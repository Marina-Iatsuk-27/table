{
    "sourceFile": "table.html",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 38,
            "patches": [
                {
                    "date": 1720111523148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720111531276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -574,9 +574,8 @@\n         console.error('Введите корректное значение для количества дней');\n     }\n });\n \n-    });\n     \n document.addEventListener('DOMContentLoaded', function () {\n     const gridDiv = document.querySelector('#myGrid');\n     new agGrid.Grid(gridDiv, gridOptions);\n"
                },
                {
                    "date": 1720111541649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n <!DOCTYPE html>\n <html lang=\"en\">\n+\n <head>\n     <meta charset=\"UTF-8\">\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n     <title>Document</title>\n@@ -13,580 +14,638 @@\n     <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n     <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n     <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n     <style>\n-        img{\n+        img {\n             height: 120px;\n             padding: 2%;\n         }\n+\n         .red-text {\n-    background-color: red;\n-    color: white; /* белый текст на красном фоне */\n-    padding: 2px 5px; /* отступы вокруг текста */\n-    border-radius: 3px; /* скругление углов */\n-}\n+            background-color: red;\n+            color: white;\n+            /* белый текст на красном фоне */\n+            padding: 2px 5px;\n+            /* отступы вокруг текста */\n+            border-radius: 3px;\n+            /* скругление углов */\n+        }\n \n-.orange-text {\n-    background-color: orange;\n-    color: black; /* черный текст на оранжевом фоне */\n-    padding: 2px 5px;\n-    border-radius: 3px;\n-}\n+        .orange-text {\n+            background-color: orange;\n+            color: black;\n+            /* черный текст на оранжевом фоне */\n+            padding: 2px 5px;\n+            border-radius: 3px;\n+        }\n \n-.yellow-text {\n-    background-color: yellow;\n-    color: black;\n-    padding: 2px 5px;\n-    border-radius: 3px;\n-}\n+        .yellow-text {\n+            background-color: yellow;\n+            color: black;\n+            padding: 2px 5px;\n+            border-radius: 3px;\n+        }\n \n-.green-text {\n-    background-color: green;\n-    color: white;\n-    padding: 2px 5px;\n-    border-radius: 3px;\n-}\n-.table-wrapper {\n+        .green-text {\n+            background-color: green;\n+            color: white;\n+            padding: 2px 5px;\n+            border-radius: 3px;\n+        }\n+\n+        .table-wrapper {\n             display: flex;\n             flex-direction: column;\n             height: 100vh;\n             padding: 20px;\n             width: 100vw;\n             align-items: center;\n         }\n+\n         .headerContainer {\n             display: flex;\n             justify-content: space-between;\n             align-items: center;\n             margin-bottom: 15px;\n             width: 80vw;\n         }\n-        .input-group,.btn-wrapper{\n+\n+        .input-group,\n+        .btn-wrapper {\n             height: 50px;\n         }\n-        input, button{\n+\n+        input,\n+        button {\n             height: 100% !important;\n             font-size: small !important;\n         }\n-        .input-group{\n+\n+        .input-group {\n             width: 40vw !important;\n         }\n+\n         .table-inner {\n-          \n+\n             width: 100%;\n         }\n+\n         #myGrid {\n             /* height: calc(100% - 50px); */\n             width: 100%;\n         }\n+\n         #loading {\n             text-align: center;\n             padding: 20px;\n             font-size: 1.5rem;\n         }\n+\n         #resetFilters {\n             margin-bottom: 10px;\n         }\n-\n-\n     </style>\n </head>\n+\n <body>\n     <div class=\"table-wrapper\">\n         <div class=\"headerContainer\">\n             <div class=\"input-group\">\n                 <input type=\"number\" id=\"daysInput\" class=\"form-control\" placeholder=\"Введите количество дней\"\n                     aria-label=\"Введите количество дней от 15 до 45\" aria-describedby=\"basic-addon2\" min=\"15\" max=\"45\">\n                 <div class=\"input-group-append\">\n-                    <button class=\"btn btn-outline-secondary calculateReplenishment\" type=\"button\">Рассчитать пополнение (шт)</button>\n+                    <button class=\"btn btn-outline-secondary calculateReplenishment\" type=\"button\">Рассчитать пополнение\n+                        (шт)</button>\n                 </div>\n             </div>\n-            <div class=\"btn-wrapper\"> <button id=\"resetFilters\" class=\"btn btn-outline-secondary \">Сбросить все фильтры</button> </div>\n-            <div class=\"btn-wrapper\"> <button class=\"btn btn-outline-secondary deleteModify\" type=\"button\">Показать товар без модификаций</button></div>\n-            \n-           \n+            <div class=\"btn-wrapper\"> <button id=\"resetFilters\" class=\"btn btn-outline-secondary \">Сбросить все\n+                    фильтры</button> </div>\n+            <div class=\"btn-wrapper\"> <button class=\"btn btn-outline-secondary deleteModify\" type=\"button\">Показать\n+                    товар без модификаций</button></div>\n+\n+\n         </div>\n-        \n+\n         <div class=\"table-inner container mt-4\">\n             <div id=\"myGrid\" class=\"ag-theme-alpine\" style=\"height: 600px\"></div>\n             <div id=\"loading\" style=\"display: none;\">Загрузка...</div>\n         </div>\n     </div>\n \n     <script>\n-     // Определение столбцов и параметров сетки\n-const columnDefs = [\n-    { headerName: '№', valueGetter: 'node.rowIndex + 1', width: 60, sortable: false, filter: false },\n-    { headerName: 'Фото', field: 'photo', width: 100, cellRenderer: params => `<img src=\"${params.value}\">` },\n-    { headerName: 'Предмет', field: 'subjectName', width: 120 },\n-    { headerName: 'Номенклатура', field: 'nmID', width: 160 },\n-    { headerName: 'Размер', field: 'size', width: 120 },\n-    { headerName: 'Заказы 1м', field: 'orders1m', width: 150 },\n-    { headerName: 'Заказы 14 д', field: 'orders14d', width: 150 },\n-    // { headerName: 'График продаж за месяц', field: 'salesGraph', width: 250, cellRenderer: params => createSalesGraph(params.data.salesGraph) },\n-    // { headerName: 'Сравнение продаж (нед)', field: 'compareGraph', width: 250, cellRenderer: params => createCompareGraph(params.data.graph) },\n-    {\n-        headerName: 'Графики',\n-        field: 'graph',\n-        width: 300,\n-        cellRenderer: params => createToggleableGraph(params)\n-    },\n-    {\n-        headerName: 'Остаток (шт)',\n-        field: 'stock',\n-        width: 120,\n-        cellRenderer: function(params) {\n-            const value = params.value;\n-            let className = '';\n-            if (value >= 0 && value <= 1.99) {\n-                className = 'red-text';\n-            } else if (value >= 2 && value <= 5.99) {\n-                className = 'orange-text';\n-            } else if (value >= 6 && value <= 10.99) {\n-                className = 'yellow-text';\n-            } else if (value >= 11) {\n-                className = 'green-text';\n+        // Определение столбцов и параметров сетки\n+        const columnDefs = [{\n+                headerName: '№',\n+                valueGetter: 'node.rowIndex + 1',\n+                width: 60,\n+                sortable: false,\n+                filter: false\n+            },\n+            {\n+                headerName: 'Фото',\n+                field: 'photo',\n+                width: 100,\n+                cellRenderer: params => `<img src=\"${params.value}\">`\n+            },\n+            {\n+                headerName: 'Предмет',\n+                field: 'subjectName',\n+                width: 120\n+            },\n+            {\n+                headerName: 'Номенклатура',\n+                field: 'nmID',\n+                width: 160\n+            },\n+            {\n+                headerName: 'Размер',\n+                field: 'size',\n+                width: 120\n+            },\n+            {\n+                headerName: 'Заказы 1м',\n+                field: 'orders1m',\n+                width: 150\n+            },\n+            {\n+                headerName: 'Заказы 14 д',\n+                field: 'orders14d',\n+                width: 150\n+            },\n+            // { headerName: 'График продаж за месяц', field: 'salesGraph', width: 250, cellRenderer: params => createSalesGraph(params.data.salesGraph) },\n+            // { headerName: 'Сравнение продаж (нед)', field: 'compareGraph', width: 250, cellRenderer: params => createCompareGraph(params.data.graph) },\n+            {\n+                headerName: 'Графики',\n+                field: 'graph',\n+                width: 300,\n+                cellRenderer: params => createToggleableGraph(params)\n+            },\n+            {\n+                headerName: 'Остаток (шт)',\n+                field: 'stock',\n+                width: 120,\n+                cellRenderer: function (params) {\n+                    const value = params.value;\n+                    let className = '';\n+                    if (value >= 0 && value <= 1.99) {\n+                        className = 'red-text';\n+                    } else if (value >= 2 && value <= 5.99) {\n+                        className = 'orange-text';\n+                    } else if (value >= 6 && value <= 10.99) {\n+                        className = 'yellow-text';\n+                    } else if (value >= 11) {\n+                        className = 'green-text';\n+                    }\n+\n+                    return `<span class=\"${className}\">${value}</span>`;\n+                }\n+            },\n+            {\n+                headerName: 'Остаток (дн)',\n+                field: 'stockDays',\n+                width: 120,\n+                cellRenderer: function (params) {\n+                    const value = params.value;\n+                    let className = '';\n+                    if (value >= 0 && value <= 1.99) {\n+                        className = 'red-text';\n+                    } else if (value >= 2 && value <= 5.99) {\n+                        className = 'orange-text';\n+                    } else if (value >= 6 && value <= 10.99) {\n+                        className = 'yellow-text';\n+                    } else if (value >= 11) {\n+                        className = 'green-text';\n+                    }\n+\n+                    return `<span class=\"${className}\">${value}</span>`;\n+                }\n+            },\n+            {\n+                headerName: 'Пополнить (шт)',\n+                field: 'replenish',\n+                width: 120\n+            },\n+            {\n+                headerName: 'Артикул',\n+                field: 'vendorCode',\n+                width: 150,\n             }\n+        ];\n+        //переключаем графики\n+        function createToggleableGraph(params) {\n+            const container = document.createElement('div');\n+            let currentGraph = 'compareGraph';\n \n-            return `<span class=\"${className}\">${value}</span>`;\n-        }\n-    },\n-    {\n-        headerName: 'Остаток (дн)',\n-        field: 'stockDays',\n-        width: 120,\n-        cellRenderer: function(params) {\n-            const value = params.value;\n-            let className = '';\n-            if (value >= 0 && value <= 1.99) {\n-                className = 'red-text';\n-            } else if (value >= 2 && value <= 5.99) {\n-                className = 'orange-text';\n-            } else if (value >= 6 && value <= 10.99) {\n-                className = 'yellow-text';\n-            } else if (value >= 11) {\n-                className = 'green-text';\n+            function toggleGraph() {\n+                currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n+                const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n+                container.innerHTML = createGraphComponent(graphData);\n             }\n \n-            return `<span class=\"${className}\">${value}</span>`;\n-        }\n-    },\n-    { headerName: 'Пополнить (шт)', field: 'replenish',width: 120 },\n-    { headerName: 'Артикул', field: 'vendorCode', width: 150, }\n-];\n-//переключаем графики\n-function createToggleableGraph(params) {\n-    const container = document.createElement('div');\n-    let currentGraph = 'compareGraph'; \n+            function createGraphComponent(graphData) {\n+                if (currentGraph === 'compareGraph') {\n+                    return createCompareGraph(graphData);\n+                } else {\n+                    return createSalesGraph(graphData);\n+                }\n+            }\n \n-    function toggleGraph() {\n-        currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n-        const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n-        container.innerHTML = createGraphComponent(graphData);\n-    }\n+            container.innerHTML = createGraphComponent(params.data.graph);\n+            container.addEventListener('click', toggleGraph);\n \n-    function createGraphComponent(graphData) {\n-        if (currentGraph === 'compareGraph') {\n-            return createCompareGraph(graphData);\n-        } else {\n-            return createSalesGraph(graphData);\n+            return container;\n         }\n-    }\n \n-    container.innerHTML = createGraphComponent(params.data.graph);\n-    container.addEventListener('click', toggleGraph);\n \n-    return container;\n-}\n \n \n- \n+        const localeText = {\n+            // Русификация фильтров\n+            page: 'страница',\n+            more: 'ещё',\n+            to: 'к',\n+            of: 'из',\n+            next: 'следующий',\n+            last: 'последний',\n+            first: 'первый',\n+            previous: 'предыдущий',\n+            loadingOoo: 'Загрузка...',\n+            applyFilter: 'Применить фильтр...',\n+            equals: 'Равно',\n+            notEqual: 'Не равно',\n+            filterOoo: 'Фильтр...',\n+            contains: 'Содержит',\n+            notContains: 'Не содержит',\n+            startsWith: 'Начинается с',\n+            endsWith: 'Заканчивается на',\n+            andCondition: 'И',\n+            orCondition: 'Или'\n+        };\n \n-const localeText = {\n-    // Русификация фильтров\n-    page: 'страница',\n-    more: 'ещё',\n-    to: 'к',\n-    of: 'из',\n-    next: 'следующий',\n-    last: 'последний',\n-    first: 'первый',\n-    previous: 'предыдущий',\n-    loadingOoo: 'Загрузка...',\n-    applyFilter: 'Применить фильтр...',\n-    equals: 'Равно',\n-    notEqual: 'Не равно',\n-    filterOoo: 'Фильтр...',\n-    contains: 'Содержит',\n-    notContains: 'Не содержит',\n-    startsWith: 'Начинается с',\n-    endsWith: 'Заканчивается на',\n-    andCondition: 'И',\n-    orCondition: 'Или'\n-};\n \n \n+        const gridOptions = {\n+            enableCellTextSelection: true,\n+            columnDefs: columnDefs,\n+            defaultColDef: {\n+                sortable: true,\n+                filter: true,\n+                resizable: true\n+            },\n+            rowData: [],\n+            localeText: localeText,\n+            rowHeight: 120,\n+            getRowId: params => {\n+                const id = params.data.uniqueId;\n+                console.log('Row ID:', id, 'Data:', params);\n+                return id;\n+            }\n+        };\n \n-const gridOptions = {\n-    enableCellTextSelection: true,\n-    columnDefs: columnDefs,\n-    defaultColDef: {\n-        sortable: true,\n-        filter: true,\n-        resizable: true\n-    },\n-    rowData: [],\n-    localeText: localeText,\n-    rowHeight: 120,\n-    getRowId: params => {\n-        const id = params.data.uniqueId;\n-        console.log('Row ID:', id, 'Data:', params);\n-        return id;\n-    }\n-};\n \n+        // Функция для преобразования данных\n+        function transformData(data) {\n+            let transformedData = [];\n+            data.forEach(item => {\n+                item.allowed_sizes.forEach(size => {\n+                    let stock = item.stocks ? item.stocks[size] || 0 : 0;\n+                    let orders1m = item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n+                    let stockDays = orders1m !== 0 ? parseFloat((stock / orders1m).toFixed(2)) : 0;\n \n-// Функция для преобразования данных\n-function transformData(data) {\n-    let transformedData = [];\n-    data.forEach(item => {\n-        item.allowed_sizes.forEach(size => {\n-            let stock = item.stocks ? item.stocks[size] || 0 : 0;\n-            let orders1m = item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n-            let stockDays = orders1m !== 0 ? parseFloat((stock / orders1m).toFixed(2)) : 0;\n-\n-            // Создаем уникальный идентификатор на основе генератора\n-            let uniqueId = `${item.nmID}-${size}`;\n-            console.log('uniqueId в начале' , uniqueId);\n-            // console.log('Transformed uniqueId:', uniqueId);\n-            // console.log('item.graph :', item.graph );\n-            transformedData.push({\n-                uniqueId: uniqueId, // Добавляем уникальный идентификатор\n-                photo: item.photos ? item.photos[0][\"c516x688\"] : '',\n-                subjectName: item.subjectName,\n-                nmID: item.nmID,\n-                size: size,\n-                orders1m: orders1m,\n-                orders14d: item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0,\n-                salesGraph: item[\"30stat\"], // Данные для графика,\n-                graph: item.graph ,// Данные для сравнения графиков продаж\n-                stock: stock,\n-                stockDays: stockDays,\n-                replenish: '',\n-                vendorCode: item.vendorCode\n+                    // Создаем уникальный идентификатор на основе генератора\n+                    let uniqueId = `${item.nmID}-${size}`;\n+                    console.log('uniqueId в начале', uniqueId);\n+                    // console.log('Transformed uniqueId:', uniqueId);\n+                    // console.log('item.graph :', item.graph );\n+                    transformedData.push({\n+                        uniqueId: uniqueId, // Добавляем уникальный идентификатор\n+                        photo: item.photos ? item.photos[0][\"c516x688\"] : '',\n+                        subjectName: item.subjectName,\n+                        nmID: item.nmID,\n+                        size: size,\n+                        orders1m: orders1m,\n+                        orders14d: item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0,\n+                        salesGraph: item[\"30stat\"], // Данные для графика,\n+                        graph: item.graph, // Данные для сравнения графиков продаж\n+                        stock: stock,\n+                        stockDays: stockDays,\n+                        replenish: '',\n+                        vendorCode: item.vendorCode\n+                    });\n+                });\n             });\n-        });\n-    });\n-    return transformedData;\n-}\n+            return transformedData;\n+        }\n \n-// Функция для преобразования данных без размеров\n-function transformDataWithoutSizes(data) {\n-    let transformedData = [];\n-    data.forEach(item => {\n-        let totalStock = 0;\n-        let totalOrders1m = 0;\n-        let totalOrders14d = 0;\n-        \n-         console.log('item.graph ',item.graph);\n+        // Функция для преобразования данных без размеров\n+        function transformDataWithoutSizes(data) {\n+            let transformedData = [];\n+            data.forEach(item => {\n+                let totalStock = 0;\n+                let totalOrders1m = 0;\n+                let totalOrders14d = 0;\n \n-        item.allowed_sizes.forEach(size => {\n-            totalStock += item.stocks ? item.stocks[size] || 0 : 0;\n-            totalOrders1m += item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n-            totalOrders14d += item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0;\n-        });\n+                console.log('item.graph ', item.graph);\n \n-        let stockDays = totalOrders1m !== 0 ? parseFloat((totalStock / totalOrders1m).toFixed(2)) : 0;\n-let orders1m  = parseFloat(totalOrders1m.toFixed(2))\n-let orders14d  = parseFloat(totalOrders14d.toFixed(2))\n-        let uniqueId = item.nmID;\n-        console.log('uniqueId во второй' , uniqueId);\n-        transformedData.push({\n-            uniqueId: uniqueId, // Добавляем уникальный идентификатор\n-            photo: item.photos ? item.photos[0].c246x328 : '',\n-            subjectName: item.subjectName,\n-            nmID: item.nmID,\n-            size: '-', // Прочерк для размера\n-            orders1m: orders1m,\n-            orders14d: orders14d,\n-            salesGraph: item[\"30stat\"],\n-            compareGraph: item.graph, \n-            stock: totalStock,\n-            stockDays: stockDays, //  добавить логику для расчета\n-            replenish: '',\n-            vendorCode: item.vendorCode\n-        });\n-    });\n-    return transformedData;\n-}\n+                item.allowed_sizes.forEach(size => {\n+                    totalStock += item.stocks ? item.stocks[size] || 0 : 0;\n+                    totalOrders1m += item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n+                    totalOrders14d += item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0;\n+                });\n \n-// Функция для загрузки данных и отображения таблицы\n-function fetchData() {\n-    $.getJSON('data.json', function (response) {\n-        const originalData = response.data;\n-        const rowData = transformData(originalData);\n-        gridOptions.api.applyTransaction({ add: rowData });\n-    }).fail(function () {\n-        console.error('Ошибка при загрузке данных');\n-    });\n-}\n+                let stockDays = totalOrders1m !== 0 ? parseFloat((totalStock / totalOrders1m).toFixed(2)) : 0;\n+                let orders1m = parseFloat(totalOrders1m.toFixed(2))\n+                let orders14d = parseFloat(totalOrders14d.toFixed(2))\n+                let uniqueId = item.nmID;\n+                console.log('uniqueId во второй', uniqueId);\n+                transformedData.push({\n+                    uniqueId: uniqueId, // Добавляем уникальный идентификатор\n+                    photo: item.photos ? item.photos[0].c246x328 : '',\n+                    subjectName: item.subjectName,\n+                    nmID: item.nmID,\n+                    size: '-', // Прочерк для размера\n+                    orders1m: orders1m,\n+                    orders14d: orders14d,\n+                    salesGraph: item[\"30stat\"],\n+                    compareGraph: item.graph,\n+                    stock: totalStock,\n+                    stockDays: stockDays, //  добавить логику для расчета\n+                    replenish: '',\n+                    vendorCode: item.vendorCode\n+                });\n+            });\n+            return transformedData;\n+        }\n \n-// График на 30 дней\n-function createSalesGraph(statData) {\n-    const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n-    setTimeout(() => {\n-        const ctx = document.getElementById(canvasId).getContext('2d');\n-        new Chart(ctx, {\n-            type: 'line',\n-            data: {\n-                labels: Object.keys(statData),\n-                datasets: [{\n-                    label: 'Продажи',\n-                    data: Object.values(statData),\n-                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n-                    borderColor: 'rgba(75, 192, 192, 1)',\n-                    borderWidth: 1,\n-                    pointRadius: 0,\n-                    borderWidth: 1, // Устанавливаем толщину линии\n-                    pointHoverRadius: 5, // Радиус точки при наведении\n-                }]\n-            },\n-            options: {\n-                responsive: true,\n-                maintainAspectRatio: false,\n-                scales: {\n-                    x: {\n-                        display: true, // Отображение оси X\n-                        ticks: {\n-                            display: false // Скрываем метки по оси X\n-                        }\n+        // Функция для загрузки данных и отображения таблицы\n+        function fetchData() {\n+            $.getJSON('data.json', function (response) {\n+                const originalData = response.data;\n+                const rowData = transformData(originalData);\n+                gridOptions.api.applyTransaction({\n+                    add: rowData\n+                });\n+            }).fail(function () {\n+                console.error('Ошибка при загрузке данных');\n+            });\n+        }\n+\n+        // График на 30 дней\n+        function createSalesGraph(statData) {\n+            const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n+            setTimeout(() => {\n+                const ctx = document.getElementById(canvasId).getContext('2d');\n+                new Chart(ctx, {\n+                    type: 'line',\n+                    data: {\n+                        labels: Object.keys(statData),\n+                        datasets: [{\n+                            label: 'Продажи',\n+                            data: Object.values(statData),\n+                            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n+                            borderColor: 'rgba(75, 192, 192, 1)',\n+                            borderWidth: 1,\n+                            pointRadius: 0,\n+                            borderWidth: 1, // Устанавливаем толщину линии\n+                            pointHoverRadius: 5, // Радиус точки при наведении\n+                        }]\n                     },\n-                    y: {\n-                        display: true, // Отображение оси Y\n-                        ticks: {\n-                            display: false // Скрываем метки по оси Y\n-                        }\n-                    }\n-                },\n-                plugins: {\n-                    legend: {\n-                        display: false // Убираем легенду\n-                    },\n-                    tooltip: {\n-                        callbacks: {\n-                            label: function (context) {\n-                                return `Дата: ${context.label}, Количество: ${context.parsed.y}`;\n+                    options: {\n+                        responsive: true,\n+                        maintainAspectRatio: false,\n+                        scales: {\n+                            x: {\n+                                display: true, // Отображение оси X\n+                                ticks: {\n+                                    display: false // Скрываем метки по оси X\n+                                }\n+                            },\n+                            y: {\n+                                display: true, // Отображение оси Y\n+                                ticks: {\n+                                    display: false // Скрываем метки по оси Y\n+                                }\n                             }\n+                        },\n+                        plugins: {\n+                            legend: {\n+                                display: false // Убираем легенду\n+                            },\n+                            tooltip: {\n+                                callbacks: {\n+                                    label: function (context) {\n+                                        return `Дата: ${context.label}, Количество: ${context.parsed.y}`;\n+                                    }\n+                                }\n+                            },\n+                            hover: {\n+                                mode: 'index',\n+                                intersect: false,\n+                            }\n+                        },\n+                        interaction: {\n+                            mode: 'index',\n+                            intersect: false,\n+                        },\n+                        elements: {\n+                            point: {\n+                                radius: 0, // Скрываем точки\n+                                hoverRadius: 5, // Радиус точки при наведении\n+                                hitRadius: 10, // Радиус области взаимодействия точки\n+                            }\n                         }\n-                    },\n-                    hover: {\n-                        mode: 'index',\n-                        intersect: false,\n                     }\n-                },\n-                interaction: {\n-                    mode: 'index',\n-                    intersect: false,\n-                },\n-                elements: {\n-                    point: {\n-                        radius: 0, // Скрываем точки\n-                        hoverRadius: 5, // Радиус точки при наведении\n-                        hitRadius: 10, // Радиус области взаимодействия точки\n-                    }\n-                }\n-            }\n-        });\n-    }, 100);\n-    return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n-}\n+                });\n+            }, 100);\n+            return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n+        }\n \n-function createCompareGraph(graphData) {\n-    const canvasId = `compare-chart-${Math.random().toString(36).substr(2, 9)}`;\n-    const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]; // индексы этих дней: 0,1,2,3,4,5,6\n-    const currentDate = new Date();\n-    const currentDayIndex = currentDate.getDay(); // нашли индекс текущего дня\n+        function createCompareGraph(graphData) {\n+            const canvasId = `compare-chart-${Math.random().toString(36).substr(2, 9)}`;\n+            const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]; // индексы этих дней: 0,1,2,3,4,5,6\n+            const currentDate = new Date();\n+            const currentDayIndex = currentDate.getDay(); // нашли индекс текущего дня\n \n-    // меняем массив дней недели так, чтобы справа был текущий день недели\n-    const labels = [...daysOfWeek.slice(currentDayIndex + 1), ...daysOfWeek.slice(0, currentDayIndex + 1)];\n+            // меняем массив дней недели так, чтобы справа был текущий день недели\n+            const labels = [...daysOfWeek.slice(currentDayIndex + 1), ...daysOfWeek.slice(0, currentDayIndex + 1)];\n \n-    const currentWeekData = new Array(7).fill(0); // Продажи текущей недели\n-    const previousWeekData = new Array(7).fill(0); // Продажи предыдущей \n+            const currentWeekData = new Array(7).fill(0); // Продажи текущей недели\n+            const previousWeekData = new Array(7).fill(0); // Продажи предыдущей \n \n-    // меняем строку даты в объект Date\n-    const parseDate = (dateString) => {\n-        const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n-        return new Date(`20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n-    };\n+            // меняем строку даты в объект Date\n+            const parseDate = (dateString) => {\n+                const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n+                return new Date(\n+                `20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n+            };\n \n-    // Функция для получения индекса дня недели\n-    const getWeekdayIndex = (date) => {\n-        return date.getDay();\n-    };\n+            // Функция для получения индекса дня недели\n+            const getWeekdayIndex = (date) => {\n+                return date.getDay();\n+            };\n \n-    // Заполняем данные продаж для текущей и предыдущей недели\n-    for (const [dateString, count] of Object.entries(graphData)) {\n-        const date = parseDate(dateString);\n-        const dayDiff = Math.floor((currentDate - date) / (1000 * 60 * 60 * 24));\n-        if (dayDiff >= 0 && dayDiff < 7) {\n-            currentWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n-        } else if (dayDiff >= 7 && dayDiff < 14) {\n-            previousWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n-        }\n-    }\n+            // Заполняем данные продаж для текущей и предыдущей недели\n+            for (const [dateString, count] of Object.entries(graphData)) {\n+                const date = parseDate(dateString);\n+                const dayDiff = Math.floor((currentDate - date) / (1000 * 60 * 60 * 24));\n+                if (dayDiff >= 0 && dayDiff < 7) {\n+                    currentWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n+                } else if (dayDiff >= 7 && dayDiff < 14) {\n+                    previousWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n+                }\n+            }\n \n-    setTimeout(() => {\n-        const ctx = document.getElementById(canvasId).getContext('2d');\n-        new Chart(ctx, {\n-            type: 'bar',\n-            data: {\n-                labels: labels,\n-                datasets: [{\n-                    label: 'Продажи предыдущей недели', // убрал это обозначение\n-                    data: previousWeekData,\n-                    backgroundColor: 'rgba(75, 192, 192, 0.6)',\n-                    borderColor: 'rgba(75, 192, 192, 1)',\n-                    borderWidth: 1\n-                }, {\n-                    label: 'Продажи текущей недели', // убрал это обозначение\n-                    data: currentWeekData,\n-                    backgroundColor: 'rgba(153, 102, 255, 0.6)',\n-                    borderColor: 'rgba(153, 102, 255, 1)',\n-                    borderWidth: 1\n-                }]\n-            },\n-            options: {\n-                scales: {\n-                    y: {\n-                        display: false // Скрыть ось Y\n+            setTimeout(() => {\n+                const ctx = document.getElementById(canvasId).getContext('2d');\n+                new Chart(ctx, {\n+                    type: 'bar',\n+                    data: {\n+                        labels: labels,\n+                        datasets: [{\n+                            label: 'Продажи предыдущей недели', // убрал это обозначение\n+                            data: previousWeekData,\n+                            backgroundColor: 'rgba(75, 192, 192, 0.6)',\n+                            borderColor: 'rgba(75, 192, 192, 1)',\n+                            borderWidth: 1\n+                        }, {\n+                            label: 'Продажи текущей недели', // убрал это обозначение\n+                            data: currentWeekData,\n+                            backgroundColor: 'rgba(153, 102, 255, 0.6)',\n+                            borderColor: 'rgba(153, 102, 255, 1)',\n+                            borderWidth: 1\n+                        }]\n                     },\n-                    x: {\n-                        display: true,\n-                        ticks: {\n-                            color: 'grey' // Цвет текста на оси X\n-                        }\n-                    }\n-                },\n-                plugins: {\n-                    legend: {\n-                        display: false // Скрыть легенду\n-                    },\n-                    tooltip: {\n-                        enabled: true,\n-                        callbacks: {\n-                            label: function (tooltipItem) {\n-                                let label = tooltipItem.dataset.label || '';\n-                                if (label) {\n-                                    label += ': ';\n+                    options: {\n+                        scales: {\n+                            y: {\n+                                display: false // Скрыть ось Y\n+                            },\n+                            x: {\n+                                display: true,\n+                                ticks: {\n+                                    color: 'grey' // Цвет текста на оси X\n                                 }\n-                                label += tooltipItem.raw.toFixed(2);\n-                                return label;\n                             }\n-                        }\n+                        },\n+                        plugins: {\n+                            legend: {\n+                                display: false // Скрыть легенду\n+                            },\n+                            tooltip: {\n+                                enabled: true,\n+                                callbacks: {\n+                                    label: function (tooltipItem) {\n+                                        let label = tooltipItem.dataset.label || '';\n+                                        if (label) {\n+                                            label += ': ';\n+                                        }\n+                                        label += tooltipItem.raw.toFixed(2);\n+                                        return label;\n+                                    }\n+                                }\n+                            }\n+                        },\n+                        maintainAspectRatio: false,\n+                        responsive: true\n                     }\n-                },\n-                maintainAspectRatio: false,\n-                responsive: true\n+                });\n+            }, 100);\n+\n+            return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n+        }\n+\n+\n+        // Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n+        document.querySelector('.deleteModify').addEventListener('click', function () {\n+            if ($(this).text() === \"Показать товар без модификаций\") {\n+                $(this).text(\"Показать модификации\");\n+                $.getJSON('data.json', function (response) {\n+                    const originalData = response.data;\n+                    const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n+\n+                    // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n+                    const nodesToRemove = [];\n+                    console.log('nodesToRemove: ', nodesToRemove);\n+                    gridOptions.api.forEachNode(node => {\n+                        nodesToRemove.push(node);\n+                    });\n+\n+                    gridOptions.api.applyTransaction({\n+                        remove: nodesToRemove,\n+                        add: rowDataWithoutSizes\n+                    });\n+                }).fail(function () {\n+                    console.error('Ошибка при загрузке данных');\n+                });\n+\n+            } else if ($(this).text() === \"Показать модификации\") {\n+                $(this).text(\"Показать товар без модификации\");\n+                //  // Загружаем и отображаем модификации\n+                //  $.getJSON('data.json', function (response) {\n+                //     const originalData = response.data;\n+                //     const modifiedData = transformData(originalData);\n+\n+                //     gridOptions.api.applyTransaction({\n+                //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n+                //         add: modifiedData\n+                //     });\n+                // }).fail(function () {\n+                //     console.error('Ошибка при загрузке данных');\n+                // });\n+                location.reload()\n             }\n+\n         });\n-    }, 100);\n \n-    return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n-}\n-     \n \n-// Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n-document.querySelector('.deleteModify').addEventListener('click', function () {\n-    if ($(this).text() === \"Показать товар без модификаций\") {   \n-        $(this).text(\"Показать модификации\");   \n-        $.getJSON('data.json', function (response) {\n-        const originalData = response.data;\n-        const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n \n-        // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n-        const nodesToRemove = [];\n-        console.log('nodesToRemove: ',nodesToRemove);\n-        gridOptions.api.forEachNode(node => {\n-            nodesToRemove.push(node);\n+        // Добавление события для кнопки сброса всех фильтров\n+        document.querySelector('#resetFilters').addEventListener('click', function () {\n+            gridOptions.api.setFilterModel(null);\n         });\n \n-        gridOptions.api.applyTransaction({\n-            remove: nodesToRemove,\n-            add: rowDataWithoutSizes\n-        });\n-    }).fail(function () {\n-        console.error('Ошибка при загрузке данных');\n-    });\n-       \n-    } else if ($(this).text() === \"Показать модификации\") {\n-         $(this).text(\"Показать товар без модификации\");      \n-        //  // Загружаем и отображаем модификации\n-        //  $.getJSON('data.json', function (response) {\n-        //     const originalData = response.data;\n-        //     const modifiedData = transformData(originalData);\n \n-        //     gridOptions.api.applyTransaction({\n-        //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n-        //         add: modifiedData\n-        //     });\n-        // }).fail(function () {\n-        //     console.error('Ошибка при загрузке данных');\n-        // });\n-        location.reload()\n-    }\n-    \n-});\n+        // Обработчик кнопки \"Рассчитать пополнение (шт)\"\n+        document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n+            const daysInputElement = document.querySelector('#daysInput');\n+            const daysInput = daysInputElement.value;\n \n+            if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n+                alert('Введите число в диапазоне от 15 до 45');\n+            }\n \n+            // Проверяем, что daysInput не пустой и является числом\n+            if (daysInput && !isNaN(daysInput)) {\n+                // Рассчитываем replenish для каждой строки\n+                gridOptions.api.forEachNode(rowNode => {\n+                    const orders1m = rowNode.data.orders1m;\n+                    const stockDays = rowNode.data.stockDays;\n \n-// Добавление события для кнопки сброса всех фильтров\n-document.querySelector('#resetFilters').addEventListener('click', function() {\n-        gridOptions.api.setFilterModel(null);\n-    });\n- \n- \n-// Обработчик кнопки \"Рассчитать пополнение (шт)\"\n-document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n-    const daysInputElement = document.querySelector('#daysInput');\n-    const daysInput = daysInputElement.value;\n+                    if (orders1m !== 0 && stockDays !== 0) {\n+                        let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n \n-    if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n-        alert('Введите число в диапазоне от 15 до 45');\n-    } \n+                        // Обновляем данные в текущей строке\n+                        rowNode.setDataValue('replenish', replenish);\n+                    }\n+                });\n \n-    // Проверяем, что daysInput не пустой и является числом\n-    if (daysInput && !isNaN(daysInput)) {\n-        // Рассчитываем replenish для каждой строки\n-        gridOptions.api.forEachNode(rowNode => {\n-            const orders1m = rowNode.data.orders1m;\n-            const stockDays = rowNode.data.stockDays;\n-\n-            if (orders1m !== 0 && stockDays !== 0) {\n-                let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n-\n-                // Обновляем данные в текущей строке\n-                rowNode.setDataValue('replenish', replenish);\n+                // Очищаем значение инпута после выполнения расчетов\n+                daysInputElement.value = '';\n+            } else {\n+                console.error('Введите корректное значение для количества дней');\n             }\n         });\n \n-        // Очищаем значение инпута после выполнения расчетов\n-        daysInputElement.value = '';\n-    } else {\n-        console.error('Введите корректное значение для количества дней');\n-    }\n-});\n \n-    \n-document.addEventListener('DOMContentLoaded', function () {\n-    const gridDiv = document.querySelector('#myGrid');\n-    new agGrid.Grid(gridDiv, gridOptions);\n+        document.addEventListener('DOMContentLoaded', function () {\n+            const gridDiv = document.querySelector('#myGrid');\n+            new agGrid.Grid(gridDiv, gridOptions);\n \n-    fetchData();\n+            fetchData();\n \n-    \n-    \n-});\n \n \n+        });\n     </script>\n </body>\n-</html>\n+\n+</html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720111558785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,36 +229,11 @@\n                 field: 'vendorCode',\n                 width: 150,\n             }\n         ];\n-        //переключаем графики\n-        function createToggleableGraph(params) {\n-            const container = document.createElement('div');\n-            let currentGraph = 'compareGraph';\n+       \n \n-            function toggleGraph() {\n-                currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n-                const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n-                container.innerHTML = createGraphComponent(graphData);\n-            }\n \n-            function createGraphComponent(graphData) {\n-                if (currentGraph === 'compareGraph') {\n-                    return createCompareGraph(graphData);\n-                } else {\n-                    return createSalesGraph(graphData);\n-                }\n-            }\n-\n-            container.innerHTML = createGraphComponent(params.data.graph);\n-            container.addEventListener('click', toggleGraph);\n-\n-            return container;\n-        }\n-\n-\n-\n-\n         const localeText = {\n             // Русификация фильтров\n             page: 'страница',\n             more: 'ещё',\n"
                },
                {
                    "date": 1720111580026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,8 +363,10 @@\n                 console.error('Ошибка при загрузке данных');\n             });\n         }\n \n+        \n+\n         // График на 30 дней\n         function createSalesGraph(statData) {\n             const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n             setTimeout(() => {\n"
                },
                {
                    "date": 1720111586117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,23 +350,37 @@\n             });\n             return transformedData;\n         }\n \n-        // Функция для загрузки данных и отображения таблицы\n-        function fetchData() {\n-            $.getJSON('data.json', function (response) {\n-                const originalData = response.data;\n-                const rowData = transformData(originalData);\n-                gridOptions.api.applyTransaction({\n-                    add: rowData\n-                });\n-            }).fail(function () {\n-                console.error('Ошибка при загрузке данных');\n-            });\n+        \n+\n+         //переключаем графики\n+         function createToggleableGraph(params) {\n+            const container = document.createElement('div');\n+            let currentGraph = 'compareGraph';\n+\n+            function toggleGraph() {\n+                currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n+                const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n+                container.innerHTML = createGraphComponent(graphData);\n+            }\n+\n+            function createGraphComponent(graphData) {\n+                if (currentGraph === 'compareGraph') {\n+                    return createCompareGraph(graphData);\n+                } else {\n+                    return createSalesGraph(graphData);\n+                }\n+            }\n+\n+            container.innerHTML = createGraphComponent(params.data.graph);\n+            container.addEventListener('click', toggleGraph);\n+\n+            return container;\n         }\n \n-        \n \n+\n         // График на 30 дней\n         function createSalesGraph(statData) {\n             const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n             setTimeout(() => {\n"
                },
                {
                    "date": 1720111595516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,9 +275,20 @@\n                 return id;\n             }\n         };\n \n-\n+// Функция для загрузки данных и отображения таблицы\n+function fetchData() {\n+            $.getJSON('data.json', function (response) {\n+                const originalData = response.data;\n+                const rowData = transformData(originalData);\n+                gridOptions.api.applyTransaction({\n+                    add: rowData\n+                });\n+            }).fail(function () {\n+                console.error('Ошибка при загрузке данных');\n+            });\n+        }\n         // Функция для преобразования данных\n         function transformData(data) {\n             let transformedData = [];\n             data.forEach(item => {\n"
                },
                {
                    "date": 1720111606141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,9 +275,9 @@\n                 return id;\n             }\n         };\n \n-// Функция для загрузки данных и отображения таблицы\n+// Функция для загрузки данных ИЗ ФАЙЛА и отображения таблицы\n function fetchData() {\n             $.getJSON('data.json', function (response) {\n                 const originalData = response.data;\n                 const rowData = transformData(originalData);\n@@ -287,8 +287,10 @@\n             }).fail(function () {\n                 console.error('Ошибка при загрузке данных');\n             });\n         }\n+\n+\n         // Функция для преобразования данных\n         function transformData(data) {\n             let transformedData = [];\n             data.forEach(item => {\n"
                },
                {
                    "date": 1720111622841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -288,9 +288,26 @@\n                 console.error('Ошибка при загрузке данных');\n             });\n         }\n \n+        function fetchData() {\n+    $.ajax({\n+        url: '/api/get_stat_table',\n+        method: 'GET',\n+        dataType: 'json',\n+        success: function (response) {\n+            const originalData = response.data;\n+            const rowData = transformData(originalData);\n+            gridOptions.api.applyTransaction({ add: rowData });\n+        },\n+        error: function () {\n+            console.error('Ошибка при загрузке данных');\n+        }\n+    });\n+}\n \n+\n+\n         // Функция для преобразования данных\n         function transformData(data) {\n             let transformedData = [];\n             data.forEach(item => {\n"
                },
                {
                    "date": 1720111631487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,27 +287,27 @@\n             }).fail(function () {\n                 console.error('Ошибка при загрузке данных');\n             });\n         }\n+/\n+//         function fetchData() {\n+//     $.ajax({\n+//         url: '/api/get_stat_table',\n+//         method: 'GET',\n+//         dataType: 'json',\n+//         success: function (response) {\n+//             const originalData = response.data;\n+//             const rowData = transformData(originalData);\n+//             gridOptions.api.applyTransaction({ add: rowData });\n+//         },\n+//         error: function () {\n+//             console.error('Ошибка при загрузке данных');\n+//         }\n+//     });\n+// }\n \n-        function fetchData() {\n-    $.ajax({\n-        url: '/api/get_stat_table',\n-        method: 'GET',\n-        dataType: 'json',\n-        success: function (response) {\n-            const originalData = response.data;\n-            const rowData = transformData(originalData);\n-            gridOptions.api.applyTransaction({ add: rowData });\n-        },\n-        error: function () {\n-            console.error('Ошибка при загрузке данных');\n-        }\n-    });\n-}\n \n \n-\n         // Функция для преобразования данных\n         function transformData(data) {\n             let transformedData = [];\n             data.forEach(item => {\n"
                },
                {
                    "date": 1720111638984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,9 +287,9 @@\n             }).fail(function () {\n                 console.error('Ошибка при загрузке данных');\n             });\n         }\n-/\n+//!!!! ВОТ ЭТУ ФУНКЦИЮ \n //         function fetchData() {\n //     $.ajax({\n //         url: '/api/get_stat_table',\n //         method: 'GET',\n"
                },
                {
                    "date": 1720111647868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,9 +287,9 @@\n             }).fail(function () {\n                 console.error('Ошибка при загрузке данных');\n             });\n         }\n-//!!!! ВОТ ЭТУ ФУНКЦИЮ \n+//!!!! ВОТ ЭТУ ФУНКЦИЮ расскоментировать приполучении \n //         function fetchData() {\n //     $.ajax({\n //         url: '/api/get_stat_table',\n //         method: 'GET',\n"
                },
                {
                    "date": 1720111657740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,11 +229,11 @@\n                 field: 'vendorCode',\n                 width: 150,\n             }\n         ];\n-       \n \n \n+\n         const localeText = {\n             // Русификация фильтров\n             page: 'страница',\n             more: 'ещё',\n@@ -275,10 +275,10 @@\n                 return id;\n             }\n         };\n \n-// Функция для загрузки данных ИЗ ФАЙЛА и отображения таблицы\n-function fetchData() {\n+        // Функция для загрузки данных ИЗ ФАЙЛА и отображения таблицы\n+        function fetchData() {\n             $.getJSON('data.json', function (response) {\n                 const originalData = response.data;\n                 const rowData = transformData(originalData);\n                 gridOptions.api.applyTransaction({\n@@ -287,24 +287,24 @@\n             }).fail(function () {\n                 console.error('Ошибка при загрузке данных');\n             });\n         }\n-//!!!! ВОТ ЭТУ ФУНКЦИЮ расскоментировать приполучении \n-//         function fetchData() {\n-//     $.ajax({\n-//         url: '/api/get_stat_table',\n-//         method: 'GET',\n-//         dataType: 'json',\n-//         success: function (response) {\n-//             const originalData = response.data;\n-//             const rowData = transformData(originalData);\n-//             gridOptions.api.applyTransaction({ add: rowData });\n-//         },\n-//         error: function () {\n-//             console.error('Ошибка при загрузке данных');\n-//         }\n-//     });\n-// }\n+        //!!!! ВОТ ЭТУ ФУНКЦИЮ расскоментировать приполучении данных с сервера\n+        //         function fetchData() {\n+        //     $.ajax({\n+        //         url: '/api/get_stat_table',\n+        //         method: 'GET',\n+        //         dataType: 'json',\n+        //         success: function (response) {\n+        //             const originalData = response.data;\n+        //             const rowData = transformData(originalData);\n+        //             gridOptions.api.applyTransaction({ add: rowData });\n+        //         },\n+        //         error: function () {\n+        //             console.error('Ошибка при загрузке данных');\n+        //         }\n+        //     });\n+        // }\n \n \n \n         // Функция для преобразования данных\n@@ -380,12 +380,12 @@\n             });\n             return transformedData;\n         }\n \n-        \n \n-         //переключаем графики\n-         function createToggleableGraph(params) {\n+\n+        //переключаем графики\n+        function createToggleableGraph(params) {\n             const container = document.createElement('div');\n             let currentGraph = 'compareGraph';\n \n             function toggleGraph() {\n@@ -495,9 +495,9 @@\n             // меняем строку даты в объект Date\n             const parseDate = (dateString) => {\n                 const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n                 return new Date(\n-                `20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n+                    `20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n             };\n \n             // Функция для получения индекса дня недели\n             const getWeekdayIndex = (date) => {\n"
                },
                {
                    "date": 1720111900936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -576,8 +576,9 @@\n \n \n         // Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n         document.querySelector('.deleteModify').addEventListener('click', function () {\n+            д\n             if ($(this).text() === \"Показать товар без модификаций\") {\n                 $(this).text(\"Показать модификации\");\n                 $.getJSON('data.json', function (response) {\n                     const originalData = response.data;\n"
                },
                {
                    "date": 1720111908600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -576,9 +576,9 @@\n \n \n         // Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n         document.querySelector('.deleteModify').addEventListener('click', function () {\n-            д\n+            console.log('work');\n             if ($(this).text() === \"Показать товар без модификаций\") {\n                 $(this).text(\"Показать модификации\");\n                 $.getJSON('data.json', function (response) {\n                     const originalData = response.data;\n"
                },
                {
                    "date": 1720111941928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,11 +229,11 @@\n                 field: 'vendorCode',\n                 width: 150,\n             }\n         ];\n+       \n \n \n-\n         const localeText = {\n             // Русификация фильтров\n             page: 'страница',\n             more: 'ещё',\n@@ -275,10 +275,10 @@\n                 return id;\n             }\n         };\n \n-        // Функция для загрузки данных ИЗ ФАЙЛА и отображения таблицы\n-        function fetchData() {\n+// Функция для загрузки данных ИЗ ФАЙЛА и отображения таблицы\n+function fetchData() {\n             $.getJSON('data.json', function (response) {\n                 const originalData = response.data;\n                 const rowData = transformData(originalData);\n                 gridOptions.api.applyTransaction({\n@@ -287,24 +287,24 @@\n             }).fail(function () {\n                 console.error('Ошибка при загрузке данных');\n             });\n         }\n-        //!!!! ВОТ ЭТУ ФУНКЦИЮ расскоментировать приполучении данных с сервера\n-        //         function fetchData() {\n-        //     $.ajax({\n-        //         url: '/api/get_stat_table',\n-        //         method: 'GET',\n-        //         dataType: 'json',\n-        //         success: function (response) {\n-        //             const originalData = response.data;\n-        //             const rowData = transformData(originalData);\n-        //             gridOptions.api.applyTransaction({ add: rowData });\n-        //         },\n-        //         error: function () {\n-        //             console.error('Ошибка при загрузке данных');\n-        //         }\n-        //     });\n-        // }\n+//!!!! ВОТ ЭТУ ФУНКЦИЮ расскоментировать приполучении данных с сервера\n+//         function fetchData() {\n+//     $.ajax({\n+//         url: '/api/get_stat_table',\n+//         method: 'GET',\n+//         dataType: 'json',\n+//         success: function (response) {\n+//             const originalData = response.data;\n+//             const rowData = transformData(originalData);\n+//             gridOptions.api.applyTransaction({ add: rowData });\n+//         },\n+//         error: function () {\n+//             console.error('Ошибка при загрузке данных');\n+//         }\n+//     });\n+// }\n \n \n \n         // Функция для преобразования данных\n@@ -380,12 +380,12 @@\n             });\n             return transformedData;\n         }\n \n+        \n \n-\n-        //переключаем графики\n-        function createToggleableGraph(params) {\n+         //переключаем графики\n+         function createToggleableGraph(params) {\n             const container = document.createElement('div');\n             let currentGraph = 'compareGraph';\n \n             function toggleGraph() {\n@@ -495,9 +495,9 @@\n             // меняем строку даты в объект Date\n             const parseDate = (dateString) => {\n                 const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n                 return new Date(\n-                    `20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n+                `20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n             };\n \n             // Функция для получения индекса дня недели\n             const getWeekdayIndex = (date) => {\n@@ -576,9 +576,8 @@\n \n \n         // Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n         document.querySelector('.deleteModify').addEventListener('click', function () {\n-            console.log('work');\n             if ($(this).text() === \"Показать товар без модификаций\") {\n                 $(this).text(\"Показать модификации\");\n                 $.getJSON('data.json', function (response) {\n                     const originalData = response.data;\n"
                },
                {
                    "date": 1720111956112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,9 +287,9 @@\n             }).fail(function () {\n                 console.error('Ошибка при загрузке данных');\n             });\n         }\n-//!!!! ВОТ ЭТУ ФУНКЦИЮ расскоментировать приполучении данных с сервера\n+//!!!! ВОТ ЭТУ ФУНКЦИЮ расскоментировать приполучении данных с\n //         function fetchData() {\n //     $.ajax({\n //         url: '/api/get_stat_table',\n //         method: 'GET',\n"
                },
                {
                    "date": 1720111969688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,27 +287,10 @@\n             }).fail(function () {\n                 console.error('Ошибка при загрузке данных');\n             });\n         }\n-//!!!! ВОТ ЭТУ ФУНКЦИЮ расскоментировать приполучении данных с\n-//         function fetchData() {\n-//     $.ajax({\n-//         url: '/api/get_stat_table',\n-//         method: 'GET',\n-//         dataType: 'json',\n-//         success: function (response) {\n-//             const originalData = response.data;\n-//             const rowData = transformData(originalData);\n-//             gridOptions.api.applyTransaction({ add: rowData });\n-//         },\n-//         error: function () {\n-//             console.error('Ошибка при загрузке данных');\n-//         }\n-//     });\n-// }\n \n \n-\n         // Функция для преобразования данных\n         function transformData(data) {\n             let transformedData = [];\n             data.forEach(item => {\n"
                },
                {
                    "date": 1720111976303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,22 +275,9 @@\n                 return id;\n             }\n         };\n \n-// Функция для загрузки данных ИЗ ФАЙЛА и отображения таблицы\n-function fetchData() {\n-            $.getJSON('data.json', function (response) {\n-                const originalData = response.data;\n-                const rowData = transformData(originalData);\n-                gridOptions.api.applyTransaction({\n-                    add: rowData\n-                });\n-            }).fail(function () {\n-                console.error('Ошибка при загрузке данных');\n-            });\n-        }\n \n-\n         // Функция для преобразования данных\n         function transformData(data) {\n             let transformedData = [];\n             data.forEach(item => {\n@@ -363,9 +350,20 @@\n             });\n             return transformedData;\n         }\n \n-        \n+        // Функция для загрузки данных и отображения таблицы\n+        function fetchData() {\n+            $.getJSON('data.json', function (response) {\n+                const originalData = response.data;\n+                const rowData = transformData(originalData);\n+                gridOptions.api.applyTransaction({\n+                    add: rowData\n+                });\n+            }).fail(function () {\n+                console.error('Ошибка при загрузке данных');\n+            });\n+        }\n \n          //переключаем графики\n          function createToggleableGraph(params) {\n             const container = document.createElement('div');\n"
                },
                {
                    "date": 1720111996842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,11 +229,36 @@\n                 field: 'vendorCode',\n                 width: 150,\n             }\n         ];\n-       \n+        //переключаем графики\n+        function createToggleableGraph(params) {\n+            const container = document.createElement('div');\n+            let currentGraph = 'compareGraph';\n \n+            function toggleGraph() {\n+                currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n+                const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n+                container.innerHTML = createGraphComponent(graphData);\n+            }\n \n+            function createGraphComponent(graphData) {\n+                if (currentGraph === 'compareGraph') {\n+                    return createCompareGraph(graphData);\n+                } else {\n+                    return createSalesGraph(graphData);\n+                }\n+            }\n+\n+            container.innerHTML = createGraphComponent(params.data.graph);\n+            container.addEventListener('click', toggleGraph);\n+\n+            return container;\n+        }\n+\n+\n+\n+\n         const localeText = {\n             // Русификация фильтров\n             page: 'страница',\n             more: 'ещё',\n@@ -363,35 +388,8 @@\n                 console.error('Ошибка при загрузке данных');\n             });\n         }\n \n-         //переключаем графики\n-         function createToggleableGraph(params) {\n-            const container = document.createElement('div');\n-            let currentGraph = 'compareGraph';\n-\n-            function toggleGraph() {\n-                currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n-                const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n-                container.innerHTML = createGraphComponent(graphData);\n-            }\n-\n-            function createGraphComponent(graphData) {\n-                if (currentGraph === 'compareGraph') {\n-                    return createCompareGraph(graphData);\n-                } else {\n-                    return createSalesGraph(graphData);\n-                }\n-            }\n-\n-            container.innerHTML = createGraphComponent(params.data.graph);\n-            container.addEventListener('click', toggleGraph);\n-\n-            return container;\n-        }\n-\n-\n-\n         // График на 30 дней\n         function createSalesGraph(statData) {\n             const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n             setTimeout(() => {\n"
                },
                {
                    "date": 1720112002903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n <!DOCTYPE html>\n <html lang=\"en\">\n-\n <head>\n     <meta charset=\"UTF-8\">\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n     <title>Document</title>\n@@ -14,638 +13,580 @@\n     <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n     <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n     <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n     <style>\n-        img {\n+        img{\n             height: 120px;\n             padding: 2%;\n         }\n-\n         .red-text {\n-            background-color: red;\n-            color: white;\n-            /* белый текст на красном фоне */\n-            padding: 2px 5px;\n-            /* отступы вокруг текста */\n-            border-radius: 3px;\n-            /* скругление углов */\n-        }\n+    background-color: red;\n+    color: white; /* белый текст на красном фоне */\n+    padding: 2px 5px; /* отступы вокруг текста */\n+    border-radius: 3px; /* скругление углов */\n+}\n \n-        .orange-text {\n-            background-color: orange;\n-            color: black;\n-            /* черный текст на оранжевом фоне */\n-            padding: 2px 5px;\n-            border-radius: 3px;\n-        }\n+.orange-text {\n+    background-color: orange;\n+    color: black; /* черный текст на оранжевом фоне */\n+    padding: 2px 5px;\n+    border-radius: 3px;\n+}\n \n-        .yellow-text {\n-            background-color: yellow;\n-            color: black;\n-            padding: 2px 5px;\n-            border-radius: 3px;\n-        }\n+.yellow-text {\n+    background-color: yellow;\n+    color: black;\n+    padding: 2px 5px;\n+    border-radius: 3px;\n+}\n \n-        .green-text {\n-            background-color: green;\n-            color: white;\n-            padding: 2px 5px;\n-            border-radius: 3px;\n-        }\n-\n-        .table-wrapper {\n+.green-text {\n+    background-color: green;\n+    color: white;\n+    padding: 2px 5px;\n+    border-radius: 3px;\n+}\n+.table-wrapper {\n             display: flex;\n             flex-direction: column;\n             height: 100vh;\n             padding: 20px;\n             width: 100vw;\n             align-items: center;\n         }\n-\n         .headerContainer {\n             display: flex;\n             justify-content: space-between;\n             align-items: center;\n             margin-bottom: 15px;\n             width: 80vw;\n         }\n-\n-        .input-group,\n-        .btn-wrapper {\n+        .input-group,.btn-wrapper{\n             height: 50px;\n         }\n-\n-        input,\n-        button {\n+        input, button{\n             height: 100% !important;\n             font-size: small !important;\n         }\n-\n-        .input-group {\n+        .input-group{\n             width: 40vw !important;\n         }\n-\n         .table-inner {\n-\n+          \n             width: 100%;\n         }\n-\n         #myGrid {\n             /* height: calc(100% - 50px); */\n             width: 100%;\n         }\n-\n         #loading {\n             text-align: center;\n             padding: 20px;\n             font-size: 1.5rem;\n         }\n-\n         #resetFilters {\n             margin-bottom: 10px;\n         }\n+\n+\n     </style>\n </head>\n-\n <body>\n     <div class=\"table-wrapper\">\n         <div class=\"headerContainer\">\n             <div class=\"input-group\">\n                 <input type=\"number\" id=\"daysInput\" class=\"form-control\" placeholder=\"Введите количество дней\"\n                     aria-label=\"Введите количество дней от 15 до 45\" aria-describedby=\"basic-addon2\" min=\"15\" max=\"45\">\n                 <div class=\"input-group-append\">\n-                    <button class=\"btn btn-outline-secondary calculateReplenishment\" type=\"button\">Рассчитать пополнение\n-                        (шт)</button>\n+                    <button class=\"btn btn-outline-secondary calculateReplenishment\" type=\"button\">Рассчитать пополнение (шт)</button>\n                 </div>\n             </div>\n-            <div class=\"btn-wrapper\"> <button id=\"resetFilters\" class=\"btn btn-outline-secondary \">Сбросить все\n-                    фильтры</button> </div>\n-            <div class=\"btn-wrapper\"> <button class=\"btn btn-outline-secondary deleteModify\" type=\"button\">Показать\n-                    товар без модификаций</button></div>\n-\n-\n+            <div class=\"btn-wrapper\"> <button id=\"resetFilters\" class=\"btn btn-outline-secondary \">Сбросить все фильтры</button> </div>\n+            <div class=\"btn-wrapper\"> <button class=\"btn btn-outline-secondary deleteModify\" type=\"button\">Показать товар без модификаций</button></div>\n+            \n+           \n         </div>\n-\n+        \n         <div class=\"table-inner container mt-4\">\n             <div id=\"myGrid\" class=\"ag-theme-alpine\" style=\"height: 600px\"></div>\n             <div id=\"loading\" style=\"display: none;\">Загрузка...</div>\n         </div>\n     </div>\n \n     <script>\n-        // Определение столбцов и параметров сетки\n-        const columnDefs = [{\n-                headerName: '№',\n-                valueGetter: 'node.rowIndex + 1',\n-                width: 60,\n-                sortable: false,\n-                filter: false\n-            },\n-            {\n-                headerName: 'Фото',\n-                field: 'photo',\n-                width: 100,\n-                cellRenderer: params => `<img src=\"${params.value}\">`\n-            },\n-            {\n-                headerName: 'Предмет',\n-                field: 'subjectName',\n-                width: 120\n-            },\n-            {\n-                headerName: 'Номенклатура',\n-                field: 'nmID',\n-                width: 160\n-            },\n-            {\n-                headerName: 'Размер',\n-                field: 'size',\n-                width: 120\n-            },\n-            {\n-                headerName: 'Заказы 1м',\n-                field: 'orders1m',\n-                width: 150\n-            },\n-            {\n-                headerName: 'Заказы 14 д',\n-                field: 'orders14d',\n-                width: 150\n-            },\n-            // { headerName: 'График продаж за месяц', field: 'salesGraph', width: 250, cellRenderer: params => createSalesGraph(params.data.salesGraph) },\n-            // { headerName: 'Сравнение продаж (нед)', field: 'compareGraph', width: 250, cellRenderer: params => createCompareGraph(params.data.graph) },\n-            {\n-                headerName: 'Графики',\n-                field: 'graph',\n-                width: 300,\n-                cellRenderer: params => createToggleableGraph(params)\n-            },\n-            {\n-                headerName: 'Остаток (шт)',\n-                field: 'stock',\n-                width: 120,\n-                cellRenderer: function (params) {\n-                    const value = params.value;\n-                    let className = '';\n-                    if (value >= 0 && value <= 1.99) {\n-                        className = 'red-text';\n-                    } else if (value >= 2 && value <= 5.99) {\n-                        className = 'orange-text';\n-                    } else if (value >= 6 && value <= 10.99) {\n-                        className = 'yellow-text';\n-                    } else if (value >= 11) {\n-                        className = 'green-text';\n-                    }\n-\n-                    return `<span class=\"${className}\">${value}</span>`;\n-                }\n-            },\n-            {\n-                headerName: 'Остаток (дн)',\n-                field: 'stockDays',\n-                width: 120,\n-                cellRenderer: function (params) {\n-                    const value = params.value;\n-                    let className = '';\n-                    if (value >= 0 && value <= 1.99) {\n-                        className = 'red-text';\n-                    } else if (value >= 2 && value <= 5.99) {\n-                        className = 'orange-text';\n-                    } else if (value >= 6 && value <= 10.99) {\n-                        className = 'yellow-text';\n-                    } else if (value >= 11) {\n-                        className = 'green-text';\n-                    }\n-\n-                    return `<span class=\"${className}\">${value}</span>`;\n-                }\n-            },\n-            {\n-                headerName: 'Пополнить (шт)',\n-                field: 'replenish',\n-                width: 120\n-            },\n-            {\n-                headerName: 'Артикул',\n-                field: 'vendorCode',\n-                width: 150,\n+     // Определение столбцов и параметров сетки\n+const columnDefs = [\n+    { headerName: '№', valueGetter: 'node.rowIndex + 1', width: 60, sortable: false, filter: false },\n+    { headerName: 'Фото', field: 'photo', width: 100, cellRenderer: params => `<img src=\"${params.value}\">` },\n+    { headerName: 'Предмет', field: 'subjectName', width: 120 },\n+    { headerName: 'Номенклатура', field: 'nmID', width: 160 },\n+    { headerName: 'Размер', field: 'size', width: 120 },\n+    { headerName: 'Заказы 1м', field: 'orders1m', width: 150 },\n+    { headerName: 'Заказы 14 д', field: 'orders14d', width: 150 },\n+    // { headerName: 'График продаж за месяц', field: 'salesGraph', width: 250, cellRenderer: params => createSalesGraph(params.data.salesGraph) },\n+    // { headerName: 'Сравнение продаж (нед)', field: 'compareGraph', width: 250, cellRenderer: params => createCompareGraph(params.data.graph) },\n+    {\n+        headerName: 'Графики',\n+        field: 'graph',\n+        width: 300,\n+        cellRenderer: params => createToggleableGraph(params)\n+    },\n+    {\n+        headerName: 'Остаток (шт)',\n+        field: 'stock',\n+        width: 120,\n+        cellRenderer: function(params) {\n+            const value = params.value;\n+            let className = '';\n+            if (value >= 0 && value <= 1.99) {\n+                className = 'red-text';\n+            } else if (value >= 2 && value <= 5.99) {\n+                className = 'orange-text';\n+            } else if (value >= 6 && value <= 10.99) {\n+                className = 'yellow-text';\n+            } else if (value >= 11) {\n+                className = 'green-text';\n             }\n-        ];\n-        //переключаем графики\n-        function createToggleableGraph(params) {\n-            const container = document.createElement('div');\n-            let currentGraph = 'compareGraph';\n \n-            function toggleGraph() {\n-                currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n-                const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n-                container.innerHTML = createGraphComponent(graphData);\n+            return `<span class=\"${className}\">${value}</span>`;\n+        }\n+    },\n+    {\n+        headerName: 'Остаток (дн)',\n+        field: 'stockDays',\n+        width: 120,\n+        cellRenderer: function(params) {\n+            const value = params.value;\n+            let className = '';\n+            if (value >= 0 && value <= 1.99) {\n+                className = 'red-text';\n+            } else if (value >= 2 && value <= 5.99) {\n+                className = 'orange-text';\n+            } else if (value >= 6 && value <= 10.99) {\n+                className = 'yellow-text';\n+            } else if (value >= 11) {\n+                className = 'green-text';\n             }\n \n-            function createGraphComponent(graphData) {\n-                if (currentGraph === 'compareGraph') {\n-                    return createCompareGraph(graphData);\n-                } else {\n-                    return createSalesGraph(graphData);\n-                }\n-            }\n+            return `<span class=\"${className}\">${value}</span>`;\n+        }\n+    },\n+    { headerName: 'Пополнить (шт)', field: 'replenish',width: 120 },\n+    { headerName: 'Артикул', field: 'vendorCode', width: 150, }\n+];\n+//переключаем графики\n+function createToggleableGraph(params) {\n+    const container = document.createElement('div');\n+    let currentGraph = 'compareGraph'; \n \n-            container.innerHTML = createGraphComponent(params.data.graph);\n-            container.addEventListener('click', toggleGraph);\n+    function toggleGraph() {\n+        currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n+        const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n+        container.innerHTML = createGraphComponent(graphData);\n+    }\n \n-            return container;\n+    function createGraphComponent(graphData) {\n+        if (currentGraph === 'compareGraph') {\n+            return createCompareGraph(graphData);\n+        } else {\n+            return createSalesGraph(graphData);\n         }\n+    }\n \n+    container.innerHTML = createGraphComponent(params.data.graph);\n+    container.addEventListener('click', toggleGraph);\n \n+    return container;\n+}\n \n \n-        const localeText = {\n-            // Русификация фильтров\n-            page: 'страница',\n-            more: 'ещё',\n-            to: 'к',\n-            of: 'из',\n-            next: 'следующий',\n-            last: 'последний',\n-            first: 'первый',\n-            previous: 'предыдущий',\n-            loadingOoo: 'Загрузка...',\n-            applyFilter: 'Применить фильтр...',\n-            equals: 'Равно',\n-            notEqual: 'Не равно',\n-            filterOoo: 'Фильтр...',\n-            contains: 'Содержит',\n-            notContains: 'Не содержит',\n-            startsWith: 'Начинается с',\n-            endsWith: 'Заканчивается на',\n-            andCondition: 'И',\n-            orCondition: 'Или'\n-        };\n+ \n \n+const localeText = {\n+    // Русификация фильтров\n+    page: 'страница',\n+    more: 'ещё',\n+    to: 'к',\n+    of: 'из',\n+    next: 'следующий',\n+    last: 'последний',\n+    first: 'первый',\n+    previous: 'предыдущий',\n+    loadingOoo: 'Загрузка...',\n+    applyFilter: 'Применить фильтр...',\n+    equals: 'Равно',\n+    notEqual: 'Не равно',\n+    filterOoo: 'Фильтр...',\n+    contains: 'Содержит',\n+    notContains: 'Не содержит',\n+    startsWith: 'Начинается с',\n+    endsWith: 'Заканчивается на',\n+    andCondition: 'И',\n+    orCondition: 'Или'\n+};\n \n \n-        const gridOptions = {\n-            enableCellTextSelection: true,\n-            columnDefs: columnDefs,\n-            defaultColDef: {\n-                sortable: true,\n-                filter: true,\n-                resizable: true\n-            },\n-            rowData: [],\n-            localeText: localeText,\n-            rowHeight: 120,\n-            getRowId: params => {\n-                const id = params.data.uniqueId;\n-                console.log('Row ID:', id, 'Data:', params);\n-                return id;\n-            }\n-        };\n \n+const gridOptions = {\n+    enableCellTextSelection: true,\n+    columnDefs: columnDefs,\n+    defaultColDef: {\n+        sortable: true,\n+        filter: true,\n+        resizable: true\n+    },\n+    rowData: [],\n+    localeText: localeText,\n+    rowHeight: 120,\n+    getRowId: params => {\n+        const id = params.data.uniqueId;\n+        console.log('Row ID:', id, 'Data:', params);\n+        return id;\n+    }\n+};\n \n-        // Функция для преобразования данных\n-        function transformData(data) {\n-            let transformedData = [];\n-            data.forEach(item => {\n-                item.allowed_sizes.forEach(size => {\n-                    let stock = item.stocks ? item.stocks[size] || 0 : 0;\n-                    let orders1m = item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n-                    let stockDays = orders1m !== 0 ? parseFloat((stock / orders1m).toFixed(2)) : 0;\n \n-                    // Создаем уникальный идентификатор на основе генератора\n-                    let uniqueId = `${item.nmID}-${size}`;\n-                    console.log('uniqueId в начале', uniqueId);\n-                    // console.log('Transformed uniqueId:', uniqueId);\n-                    // console.log('item.graph :', item.graph );\n-                    transformedData.push({\n-                        uniqueId: uniqueId, // Добавляем уникальный идентификатор\n-                        photo: item.photos ? item.photos[0][\"c516x688\"] : '',\n-                        subjectName: item.subjectName,\n-                        nmID: item.nmID,\n-                        size: size,\n-                        orders1m: orders1m,\n-                        orders14d: item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0,\n-                        salesGraph: item[\"30stat\"], // Данные для графика,\n-                        graph: item.graph, // Данные для сравнения графиков продаж\n-                        stock: stock,\n-                        stockDays: stockDays,\n-                        replenish: '',\n-                        vendorCode: item.vendorCode\n-                    });\n-                });\n+// Функция для преобразования данных\n+function transformData(data) {\n+    let transformedData = [];\n+    data.forEach(item => {\n+        item.allowed_sizes.forEach(size => {\n+            let stock = item.stocks ? item.stocks[size] || 0 : 0;\n+            let orders1m = item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n+            let stockDays = orders1m !== 0 ? parseFloat((stock / orders1m).toFixed(2)) : 0;\n+\n+            // Создаем уникальный идентификатор на основе генератора\n+            let uniqueId = `${item.nmID}-${size}`;\n+            console.log('uniqueId в начале' , uniqueId);\n+            // console.log('Transformed uniqueId:', uniqueId);\n+            // console.log('item.graph :', item.graph );\n+            transformedData.push({\n+                uniqueId: uniqueId, // Добавляем уникальный идентификатор\n+                photo: item.photos ? item.photos[0][\"c516x688\"] : '',\n+                subjectName: item.subjectName,\n+                nmID: item.nmID,\n+                size: size,\n+                orders1m: orders1m,\n+                orders14d: item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0,\n+                salesGraph: item[\"30stat\"], // Данные для графика,\n+                graph: item.graph ,// Данные для сравнения графиков продаж\n+                stock: stock,\n+                stockDays: stockDays,\n+                replenish: '',\n+                vendorCode: item.vendorCode\n             });\n-            return transformedData;\n-        }\n+        });\n+    });\n+    return transformedData;\n+}\n \n-        // Функция для преобразования данных без размеров\n-        function transformDataWithoutSizes(data) {\n-            let transformedData = [];\n-            data.forEach(item => {\n-                let totalStock = 0;\n-                let totalOrders1m = 0;\n-                let totalOrders14d = 0;\n+// Функция для преобразования данных без размеров\n+function transformDataWithoutSizes(data) {\n+    let transformedData = [];\n+    data.forEach(item => {\n+        let totalStock = 0;\n+        let totalOrders1m = 0;\n+        let totalOrders14d = 0;\n+        \n+         console.log('item.graph ',item.graph);\n \n-                console.log('item.graph ', item.graph);\n+        item.allowed_sizes.forEach(size => {\n+            totalStock += item.stocks ? item.stocks[size] || 0 : 0;\n+            totalOrders1m += item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n+            totalOrders14d += item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0;\n+        });\n \n-                item.allowed_sizes.forEach(size => {\n-                    totalStock += item.stocks ? item.stocks[size] || 0 : 0;\n-                    totalOrders1m += item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n-                    totalOrders14d += item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0;\n-                });\n+        let stockDays = totalOrders1m !== 0 ? parseFloat((totalStock / totalOrders1m).toFixed(2)) : 0;\n+let orders1m  = parseFloat(totalOrders1m.toFixed(2))\n+let orders14d  = parseFloat(totalOrders14d.toFixed(2))\n+        let uniqueId = item.nmID;\n+        console.log('uniqueId во второй' , uniqueId);\n+        transformedData.push({\n+            uniqueId: uniqueId, // Добавляем уникальный идентификатор\n+            photo: item.photos ? item.photos[0].c246x328 : '',\n+            subjectName: item.subjectName,\n+            nmID: item.nmID,\n+            size: '-', // Прочерк для размера\n+            orders1m: orders1m,\n+            orders14d: orders14d,\n+            salesGraph: item[\"30stat\"],\n+            compareGraph: item.graph, \n+            stock: totalStock,\n+            stockDays: stockDays, //  добавить логику для расчета\n+            replenish: '',\n+            vendorCode: item.vendorCode\n+        });\n+    });\n+    return transformedData;\n+}\n \n-                let stockDays = totalOrders1m !== 0 ? parseFloat((totalStock / totalOrders1m).toFixed(2)) : 0;\n-                let orders1m = parseFloat(totalOrders1m.toFixed(2))\n-                let orders14d = parseFloat(totalOrders14d.toFixed(2))\n-                let uniqueId = item.nmID;\n-                console.log('uniqueId во второй', uniqueId);\n-                transformedData.push({\n-                    uniqueId: uniqueId, // Добавляем уникальный идентификатор\n-                    photo: item.photos ? item.photos[0].c246x328 : '',\n-                    subjectName: item.subjectName,\n-                    nmID: item.nmID,\n-                    size: '-', // Прочерк для размера\n-                    orders1m: orders1m,\n-                    orders14d: orders14d,\n-                    salesGraph: item[\"30stat\"],\n-                    compareGraph: item.graph,\n-                    stock: totalStock,\n-                    stockDays: stockDays, //  добавить логику для расчета\n-                    replenish: '',\n-                    vendorCode: item.vendorCode\n-                });\n-            });\n-            return transformedData;\n-        }\n+// Функция для загрузки данных и отображения таблицы\n+function fetchData() {\n+    $.getJSON('data.json', function (response) {\n+        const originalData = response.data;\n+        const rowData = transformData(originalData);\n+        gridOptions.api.applyTransaction({ add: rowData });\n+    }).fail(function () {\n+        console.error('Ошибка при загрузке данных');\n+    });\n+}\n \n-        // Функция для загрузки данных и отображения таблицы\n-        function fetchData() {\n-            $.getJSON('data.json', function (response) {\n-                const originalData = response.data;\n-                const rowData = transformData(originalData);\n-                gridOptions.api.applyTransaction({\n-                    add: rowData\n-                });\n-            }).fail(function () {\n-                console.error('Ошибка при загрузке данных');\n-            });\n-        }\n-\n-        // График на 30 дней\n-        function createSalesGraph(statData) {\n-            const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n-            setTimeout(() => {\n-                const ctx = document.getElementById(canvasId).getContext('2d');\n-                new Chart(ctx, {\n-                    type: 'line',\n-                    data: {\n-                        labels: Object.keys(statData),\n-                        datasets: [{\n-                            label: 'Продажи',\n-                            data: Object.values(statData),\n-                            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n-                            borderColor: 'rgba(75, 192, 192, 1)',\n-                            borderWidth: 1,\n-                            pointRadius: 0,\n-                            borderWidth: 1, // Устанавливаем толщину линии\n-                            pointHoverRadius: 5, // Радиус точки при наведении\n-                        }]\n+// График на 30 дней\n+function createSalesGraph(statData) {\n+    const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n+    setTimeout(() => {\n+        const ctx = document.getElementById(canvasId).getContext('2d');\n+        new Chart(ctx, {\n+            type: 'line',\n+            data: {\n+                labels: Object.keys(statData),\n+                datasets: [{\n\\ No newline at end of file\n+                    label: 'Продажи',\n+                    data: Object.values(statData),\n+                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n+                    borderColor: 'rgba(75, 192, 192, 1)',\n+                    borderWidth: 1,\n+                    pointRadius: 0,\n+                    borderWidth: 1, // Устанавливаем толщину линии\n+                    pointHoverRadius: 5, // Радиус точки при наведении\n+                }]\n+            },\n+            options: {\n+                responsive: true,\n+                maintainAspectRatio: false,\n+                scales: {\n+                    x: {\n+                        display: true, // Отображение оси X\n+                        ticks: {\n+                            display: false // Скрываем метки по оси X\n+                        }\n                     },\n-                    options: {\n-                        responsive: true,\n-                        maintainAspectRatio: false,\n-                        scales: {\n-                            x: {\n-                                display: true, // Отображение оси X\n-                                ticks: {\n-                                    display: false // Скрываем метки по оси X\n-                                }\n-                            },\n-                            y: {\n-                                display: true, // Отображение оси Y\n-                                ticks: {\n-                                    display: false // Скрываем метки по оси Y\n-                                }\n+                    y: {\n+                        display: true, // Отображение оси Y\n+                        ticks: {\n+                            display: false // Скрываем метки по оси Y\n+                        }\n+                    }\n+                },\n+                plugins: {\n+                    legend: {\n+                        display: false // Убираем легенду\n+                    },\n+                    tooltip: {\n+                        callbacks: {\n+                            label: function (context) {\n+                                return `Дата: ${context.label}, Количество: ${context.parsed.y}`;\n                             }\n-                        },\n-                        plugins: {\n-                            legend: {\n-                                display: false // Убираем легенду\n-                            },\n-                            tooltip: {\n-                                callbacks: {\n-                                    label: function (context) {\n-                                        return `Дата: ${context.label}, Количество: ${context.parsed.y}`;\n-                                    }\n-                                }\n-                            },\n-                            hover: {\n-                                mode: 'index',\n-                                intersect: false,\n-                            }\n-                        },\n-                        interaction: {\n-                            mode: 'index',\n-                            intersect: false,\n-                        },\n-                        elements: {\n-                            point: {\n-                                radius: 0, // Скрываем точки\n-                                hoverRadius: 5, // Радиус точки при наведении\n-                                hitRadius: 10, // Радиус области взаимодействия точки\n-                            }\n                         }\n+                    },\n+                    hover: {\n+                        mode: 'index',\n+                        intersect: false,\n                     }\n-                });\n-            }, 100);\n-            return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n-        }\n+                },\n+                interaction: {\n+                    mode: 'index',\n+                    intersect: false,\n+                },\n+                elements: {\n+                    point: {\n+                        radius: 0, // Скрываем точки\n+                        hoverRadius: 5, // Радиус точки при наведении\n+                        hitRadius: 10, // Радиус области взаимодействия точки\n+                    }\n+                }\n+            }\n+        });\n+    }, 100);\n+    return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n+}\n \n-        function createCompareGraph(graphData) {\n-            const canvasId = `compare-chart-${Math.random().toString(36).substr(2, 9)}`;\n-            const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]; // индексы этих дней: 0,1,2,3,4,5,6\n-            const currentDate = new Date();\n-            const currentDayIndex = currentDate.getDay(); // нашли индекс текущего дня\n+function createCompareGraph(graphData) {\n+    const canvasId = `compare-chart-${Math.random().toString(36).substr(2, 9)}`;\n+    const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]; // индексы этих дней: 0,1,2,3,4,5,6\n+    const currentDate = new Date();\n+    const currentDayIndex = currentDate.getDay(); // нашли индекс текущего дня\n \n-            // меняем массив дней недели так, чтобы справа был текущий день недели\n-            const labels = [...daysOfWeek.slice(currentDayIndex + 1), ...daysOfWeek.slice(0, currentDayIndex + 1)];\n+    // меняем массив дней недели так, чтобы справа был текущий день недели\n+    const labels = [...daysOfWeek.slice(currentDayIndex + 1), ...daysOfWeek.slice(0, currentDayIndex + 1)];\n \n-            const currentWeekData = new Array(7).fill(0); // Продажи текущей недели\n-            const previousWeekData = new Array(7).fill(0); // Продажи предыдущей \n+    const currentWeekData = new Array(7).fill(0); // Продажи текущей недели\n+    const previousWeekData = new Array(7).fill(0); // Продажи предыдущей \n \n-            // меняем строку даты в объект Date\n-            const parseDate = (dateString) => {\n-                const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n-                return new Date(\n-                `20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n-            };\n+    // меняем строку даты в объект Date\n+    const parseDate = (dateString) => {\n+        const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n+        return new Date(`20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n+    };\n \n-            // Функция для получения индекса дня недели\n-            const getWeekdayIndex = (date) => {\n-                return date.getDay();\n-            };\n+    // Функция для получения индекса дня недели\n+    const getWeekdayIndex = (date) => {\n+        return date.getDay();\n+    };\n \n-            // Заполняем данные продаж для текущей и предыдущей недели\n-            for (const [dateString, count] of Object.entries(graphData)) {\n-                const date = parseDate(dateString);\n-                const dayDiff = Math.floor((currentDate - date) / (1000 * 60 * 60 * 24));\n-                if (dayDiff >= 0 && dayDiff < 7) {\n-                    currentWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n-                } else if (dayDiff >= 7 && dayDiff < 14) {\n-                    previousWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n-                }\n-            }\n+    // Заполняем данные продаж для текущей и предыдущей недели\n+    for (const [dateString, count] of Object.entries(graphData)) {\n+        const date = parseDate(dateString);\n+        const dayDiff = Math.floor((currentDate - date) / (1000 * 60 * 60 * 24));\n+        if (dayDiff >= 0 && dayDiff < 7) {\n+            currentWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n+        } else if (dayDiff >= 7 && dayDiff < 14) {\n+            previousWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n+        }\n+    }\n \n-            setTimeout(() => {\n-                const ctx = document.getElementById(canvasId).getContext('2d');\n-                new Chart(ctx, {\n-                    type: 'bar',\n-                    data: {\n-                        labels: labels,\n-                        datasets: [{\n-                            label: 'Продажи предыдущей недели', // убрал это обозначение\n-                            data: previousWeekData,\n-                            backgroundColor: 'rgba(75, 192, 192, 0.6)',\n-                            borderColor: 'rgba(75, 192, 192, 1)',\n-                            borderWidth: 1\n-                        }, {\n-                            label: 'Продажи текущей недели', // убрал это обозначение\n-                            data: currentWeekData,\n-                            backgroundColor: 'rgba(153, 102, 255, 0.6)',\n-                            borderColor: 'rgba(153, 102, 255, 1)',\n-                            borderWidth: 1\n-                        }]\n+    setTimeout(() => {\n+        const ctx = document.getElementById(canvasId).getContext('2d');\n+        new Chart(ctx, {\n+            type: 'bar',\n+            data: {\n+                labels: labels,\n+                datasets: [{\n+                    label: 'Продажи предыдущей недели', // убрал это обозначение\n+                    data: previousWeekData,\n+                    backgroundColor: 'rgba(75, 192, 192, 0.6)',\n+                    borderColor: 'rgba(75, 192, 192, 1)',\n+                    borderWidth: 1\n+                }, {\n+                    label: 'Продажи текущей недели', // убрал это обозначение\n+                    data: currentWeekData,\n+                    backgroundColor: 'rgba(153, 102, 255, 0.6)',\n+                    borderColor: 'rgba(153, 102, 255, 1)',\n+                    borderWidth: 1\n+                }]\n+            },\n+            options: {\n+                scales: {\n+                    y: {\n+                        display: false // Скрыть ось Y\n                     },\n-                    options: {\n-                        scales: {\n-                            y: {\n-                                display: false // Скрыть ось Y\n-                            },\n-                            x: {\n-                                display: true,\n-                                ticks: {\n-                                    color: 'grey' // Цвет текста на оси X\n+                    x: {\n+                        display: true,\n+                        ticks: {\n+                            color: 'grey' // Цвет текста на оси X\n+                        }\n+                    }\n+                },\n+                plugins: {\n+                    legend: {\n+                        display: false // Скрыть легенду\n+                    },\n+                    tooltip: {\n+                        enabled: true,\n+                        callbacks: {\n+                            label: function (tooltipItem) {\n+                                let label = tooltipItem.dataset.label || '';\n+                                if (label) {\n+                                    label += ': ';\n                                 }\n+                                label += tooltipItem.raw.toFixed(2);\n+                                return label;\n                             }\n-                        },\n-                        plugins: {\n-                            legend: {\n-                                display: false // Скрыть легенду\n-                            },\n-                            tooltip: {\n-                                enabled: true,\n-                                callbacks: {\n-                                    label: function (tooltipItem) {\n-                                        let label = tooltipItem.dataset.label || '';\n-                                        if (label) {\n-                                            label += ': ';\n-                                        }\n-                                        label += tooltipItem.raw.toFixed(2);\n-                                        return label;\n-                                    }\n-                                }\n-                            }\n-                        },\n-                        maintainAspectRatio: false,\n-                        responsive: true\n+                        }\n                     }\n-                });\n-            }, 100);\n-\n-            return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n-        }\n-\n-\n-        // Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n-        document.querySelector('.deleteModify').addEventListener('click', function () {\n-            if ($(this).text() === \"Показать товар без модификаций\") {\n-                $(this).text(\"Показать модификации\");\n-                $.getJSON('data.json', function (response) {\n-                    const originalData = response.data;\n-                    const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n-\n-                    // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n-                    const nodesToRemove = [];\n-                    console.log('nodesToRemove: ', nodesToRemove);\n-                    gridOptions.api.forEachNode(node => {\n-                        nodesToRemove.push(node);\n-                    });\n-\n-                    gridOptions.api.applyTransaction({\n-                        remove: nodesToRemove,\n-                        add: rowDataWithoutSizes\n-                    });\n-                }).fail(function () {\n-                    console.error('Ошибка при загрузке данных');\n-                });\n-\n-            } else if ($(this).text() === \"Показать модификации\") {\n-                $(this).text(\"Показать товар без модификации\");\n-                //  // Загружаем и отображаем модификации\n-                //  $.getJSON('data.json', function (response) {\n-                //     const originalData = response.data;\n-                //     const modifiedData = transformData(originalData);\n-\n-                //     gridOptions.api.applyTransaction({\n-                //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n-                //         add: modifiedData\n-                //     });\n-                // }).fail(function () {\n-                //     console.error('Ошибка при загрузке данных');\n-                // });\n-                location.reload()\n+                },\n+                maintainAspectRatio: false,\n+                responsive: true\n             }\n-\n         });\n+    }, 100);\n \n+    return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n+}\n+     \n \n+// Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n+document.querySelector('.deleteModify').addEventListener('click', function () {\n+    if ($(this).text() === \"Показать товар без модификаций\") {   \n+        $(this).text(\"Показать модификации\");   \n+        $.getJSON('data.json', function (response) {\n+        const originalData = response.data;\n+        const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n \n-        // Добавление события для кнопки сброса всех фильтров\n-        document.querySelector('#resetFilters').addEventListener('click', function () {\n-            gridOptions.api.setFilterModel(null);\n+        // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n+        const nodesToRemove = [];\n+        console.log('nodesToRemove: ',nodesToRemove);\n+        gridOptions.api.forEachNode(node => {\n+            nodesToRemove.push(node);\n         });\n \n+        gridOptions.api.applyTransaction({\n+            remove: nodesToRemove,\n+            add: rowDataWithoutSizes\n+        });\n+    }).fail(function () {\n+        console.error('Ошибка при загрузке данных');\n+    });\n+       \n+    } else if ($(this).text() === \"Показать модификации\") {\n+         $(this).text(\"Показать товар без модификации\");      \n+        //  // Загружаем и отображаем модификации\n+        //  $.getJSON('data.json', function (response) {\n+        //     const originalData = response.data;\n+        //     const modifiedData = transformData(originalData);\n \n-        // Обработчик кнопки \"Рассчитать пополнение (шт)\"\n-        document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n-            const daysInputElement = document.querySelector('#daysInput');\n-            const daysInput = daysInputElement.value;\n+        //     gridOptions.api.applyTransaction({\n+        //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n+        //         add: modifiedData\n+        //     });\n+        // }).fail(function () {\n+        //     console.error('Ошибка при загрузке данных');\n+        // });\n+        location.reload()\n+    }\n+    \n+});\n \n-            if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n-                alert('Введите число в диапазоне от 15 до 45');\n-            }\n \n-            // Проверяем, что daysInput не пустой и является числом\n-            if (daysInput && !isNaN(daysInput)) {\n-                // Рассчитываем replenish для каждой строки\n-                gridOptions.api.forEachNode(rowNode => {\n-                    const orders1m = rowNode.data.orders1m;\n-                    const stockDays = rowNode.data.stockDays;\n \n-                    if (orders1m !== 0 && stockDays !== 0) {\n-                        let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n+// Добавление события для кнопки сброса всех фильтров\n+document.querySelector('#resetFilters').addEventListener('click', function() {\n+        gridOptions.api.setFilterModel(null);\n+    });\n+ \n+ \n+// Обработчик кнопки \"Рассчитать пополнение (шт)\"\n+document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n+    console.log('work');\n+        const daysInput = document.querySelector('#daysInput').value;\n+        if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n+            alert('Введите число в диапазоне от 15 до 45');\n+        } \n+        // Проверяем, что daysInput не пустой и является числом\n+        if (daysInput && !isNaN(daysInput)) {\n+            // Рассчитываем replenish для каждой строки\n+            gridOptions.api.forEachNode(rowNode => {\n+                const orders1m = rowNode.data.orders1m;\n+                const stockDays = rowNode.data.stockDays;\n \n-                        // Обновляем данные в текущей строке\n-                        rowNode.setDataValue('replenish', replenish);\n-                    }\n-                });\n+                if (orders1m !== 0 && stockDays !== 0) {\n+                    let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n \n-                // Очищаем значение инпута после выполнения расчетов\n-                daysInputElement.value = '';\n-            } else {\n-                console.error('Введите корректное значение для количества дней');\n-            }\n-        });\n+                    console.log('replenish: ',replenish);\n+                    \n+                    // if(replenish < 1){\n+                    //     replenish=Number(1)\n+                    // }\n+                   \n+                    // Обновляем данные в текущей строке\n+                    rowNode.setDataValue('replenish', replenish);\n+                }\n+            });\n+        } else {\n+            console.error('Введите корректное значение для количества дней');\n+        }\n+    });\n+    \n+document.addEventListener('DOMContentLoaded', function () {\n+    const gridDiv = document.querySelector('#myGrid');\n+    new agGrid.Grid(gridDiv, gridOptions);\n \n+    fetchData();\n \n-        document.addEventListener('DOMContentLoaded', function () {\n-            const gridDiv = document.querySelector('#myGrid');\n-            new agGrid.Grid(gridDiv, gridOptions);\n+    \n+    \n+});\n \n-            fetchData();\n \n-\n-\n-        });\n     </script>\n </body>\n-\n-</html>\n+</html>\n"
                },
                {
                    "date": 1720112022180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n     <style>\n         img{\n             height: 120px;\n-            padding: 2%;\n+            padding: 5%;\n         }\n         .red-text {\n     background-color: red;\n     color: white; /* белый текст на красном фоне */\n@@ -172,34 +172,11 @@\n     },\n     { headerName: 'Пополнить (шт)', field: 'replenish',width: 120 },\n     { headerName: 'Артикул', field: 'vendorCode', width: 150, }\n ];\n-//переключаем графики\n-function createToggleableGraph(params) {\n-    const container = document.createElement('div');\n-    let currentGraph = 'compareGraph'; \n \n-    function toggleGraph() {\n-        currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n-        const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n-        container.innerHTML = createGraphComponent(graphData);\n-    }\n \n-    function createGraphComponent(graphData) {\n-        if (currentGraph === 'compareGraph') {\n-            return createCompareGraph(graphData);\n-        } else {\n-            return createSalesGraph(graphData);\n-        }\n-    }\n \n-    container.innerHTML = createGraphComponent(params.data.graph);\n-    container.addEventListener('click', toggleGraph);\n-\n-    return container;\n-}\n-\n-\n  \n \n const localeText = {\n     // Русификация фильтров\n@@ -238,14 +215,44 @@\n     localeText: localeText,\n     rowHeight: 120,\n     getRowId: params => {\n         const id = params.data.uniqueId;\n-        console.log('Row ID:', id, 'Data:', params);\n+         console.log('Row ID:', id, 'Data:', params);\n         return id;\n     }\n };\n \n+// !!!!Функция для загрузки данных из ФАЙЛА и отображения таблицы. Убрать при загрузке с сервера\n+function fetchData() {\n+    $.getJSON('data.json', function (response) {\n+        const originalData = response.data;\n+        const rowData = transformData(originalData);\n+        gridOptions.api.applyTransaction({ add: rowData });\n+    }).fail(function () {\n+        console.error('Ошибка при загрузке данных');\n+    });\n+}\n \n+//!! РАСКОММЕНТИРОВАТЬ при получении данных с сервера:\n+\n+// function fetchData() {\n+//     $.ajax({\n+//         url: '/api/get_stat_table',\n+//         method: 'GET',\n+//         dataType: 'json',\n+//         success: function (response) {\n+//             const originalData = response.data;\n+//             const rowData = transformData(originalData);\n+//             gridOptions.api.applyTransaction({ add: rowData });\n+//         },\n+//         error: function () {\n+//             console.error('Ошибка при загрузке данных');\n+//         }\n+//     });\n+// }\n+\n+\n+\n // Функция для преобразования данных\n function transformData(data) {\n     let transformedData = [];\n     data.forEach(item => {\n@@ -318,17 +325,33 @@\n     });\n     return transformedData;\n }\n \n-// Функция для загрузки данных и отображения таблицы\n-function fetchData() {\n-    $.getJSON('data.json', function (response) {\n-        const originalData = response.data;\n-        const rowData = transformData(originalData);\n-        gridOptions.api.applyTransaction({ add: rowData });\n-    }).fail(function () {\n-        console.error('Ошибка при загрузке данных');\n-    });\n+\n+\n+//переключаем графики\n+function createToggleableGraph(params) {\n+    const container = document.createElement('div');\n+    let currentGraph = 'compareGraph'; \n+\n+    function toggleGraph() {\n+        currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n+        const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n+        container.innerHTML = createGraphComponent(graphData);\n+    }\n+\n+    function createGraphComponent(graphData) {\n+        if (currentGraph === 'compareGraph') {\n+            return createCompareGraph(graphData);\n+        } else {\n+            return createSalesGraph(graphData);\n+        }\n+    }\n+\n+    container.innerHTML = createGraphComponent(params.data.graph);\n+    container.addEventListener('click', toggleGraph);\n+\n+    return container;\n }\n \n // График на 30 дней\n function createSalesGraph(statData) {\n@@ -345,9 +368,9 @@\n                     backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                     borderColor: 'rgba(75, 192, 192, 1)',\n                     borderWidth: 1,\n                     pointRadius: 0,\n-                    borderWidth: 1, // Устанавливаем толщину линии\n+                    borderWidth: 1, //  толщина линии\n                     pointHoverRadius: 5, // Радиус точки при наведении\n                 }]\n             },\n             options: {\n@@ -440,15 +463,15 @@\n             type: 'bar',\n             data: {\n                 labels: labels,\n                 datasets: [{\n-                    label: 'Продажи предыдущей недели', // убрал это обозначение\n+                    label: 'Продажи предыдущей недели', \n                     data: previousWeekData,\n                     backgroundColor: 'rgba(75, 192, 192, 0.6)',\n                     borderColor: 'rgba(75, 192, 192, 1)',\n                     borderWidth: 1\n                 }, {\n-                    label: 'Продажи текущей недели', // убрал это обозначение\n+                    label: 'Продажи текущей недели', \n                     data: currentWeekData,\n                     backgroundColor: 'rgba(153, 102, 255, 0.6)',\n                     borderColor: 'rgba(153, 102, 255, 1)',\n                     borderWidth: 1\n@@ -536,19 +559,19 @@\n     \n });\n \n \n-\n // Добавление события для кнопки сброса всех фильтров\n document.querySelector('#resetFilters').addEventListener('click', function() {\n         gridOptions.api.setFilterModel(null);\n     });\n  \n  \n-// Обработчик кнопки \"Рассчитать пополнение (шт)\"\n+// Обработчик кнопки \"Рассчитать пополнение\"\n document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n-    console.log('work');\n-        const daysInput = document.querySelector('#daysInput').value;\n+    // console.log('work');\n+        const daysInputElement = document.querySelector('#daysInput');\n+    const daysInput = daysInputElement.value;\n         if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n             alert('Введите число в диапазоне от 15 до 45');\n         } \n         // Проверяем, что daysInput не пустой и является числом\n@@ -560,18 +583,20 @@\n \n                 if (orders1m !== 0 && stockDays !== 0) {\n                     let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n \n-                    console.log('replenish: ',replenish);\n+                    // console.log('replenish: ',replenish);\n                     \n                     // if(replenish < 1){\n                     //     replenish=Number(1)\n                     // }\n                    \n                     // Обновляем данные в текущей строке\n                     rowNode.setDataValue('replenish', replenish);\n+                    \n                 }\n             });\n+            daysInputElement.value = '';\n         } else {\n             console.error('Введите корректное значение для количества дней');\n         }\n     });\n@@ -588,5 +613,5 @@\n \n \n     </script>\n </body>\n-</html>\n\\ No newline at end of file\n+</html>\n"
                },
                {
                    "date": 1720112027498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n     <style>\n         img{\n             height: 120px;\n-            padding: 5%;\n+            padding: 2%;\n         }\n         .red-text {\n     background-color: red;\n     color: white; /* белый текст на красном фоне */\n@@ -172,11 +172,34 @@\n     },\n     { headerName: 'Пополнить (шт)', field: 'replenish',width: 120 },\n     { headerName: 'Артикул', field: 'vendorCode', width: 150, }\n ];\n+//переключаем графики\n+function createToggleableGraph(params) {\n+    const container = document.createElement('div');\n+    let currentGraph = 'compareGraph'; \n \n+    function toggleGraph() {\n+        currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n+        const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n+        container.innerHTML = createGraphComponent(graphData);\n+    }\n \n+    function createGraphComponent(graphData) {\n+        if (currentGraph === 'compareGraph') {\n+            return createCompareGraph(graphData);\n+        } else {\n+            return createSalesGraph(graphData);\n+        }\n+    }\n \n+    container.innerHTML = createGraphComponent(params.data.graph);\n+    container.addEventListener('click', toggleGraph);\n+\n+    return container;\n+}\n+\n+\n  \n \n const localeText = {\n     // Русификация фильтров\n@@ -215,44 +238,14 @@\n     localeText: localeText,\n     rowHeight: 120,\n     getRowId: params => {\n         const id = params.data.uniqueId;\n-         console.log('Row ID:', id, 'Data:', params);\n+        console.log('Row ID:', id, 'Data:', params);\n         return id;\n     }\n };\n \n-// !!!!Функция для загрузки данных из ФАЙЛА и отображения таблицы. Убрать при загрузке с сервера\n-function fetchData() {\n-    $.getJSON('data.json', function (response) {\n-        const originalData = response.data;\n-        const rowData = transformData(originalData);\n-        gridOptions.api.applyTransaction({ add: rowData });\n-    }).fail(function () {\n-        console.error('Ошибка при загрузке данных');\n-    });\n-}\n \n-//!! РАСКОММЕНТИРОВАТЬ при получении данных с сервера:\n-\n-// function fetchData() {\n-//     $.ajax({\n-//         url: '/api/get_stat_table',\n-//         method: 'GET',\n-//         dataType: 'json',\n-//         success: function (response) {\n-//             const originalData = response.data;\n-//             const rowData = transformData(originalData);\n-//             gridOptions.api.applyTransaction({ add: rowData });\n-//         },\n-//         error: function () {\n-//             console.error('Ошибка при загрузке данных');\n-//         }\n-//     });\n-// }\n-\n-\n-\n // Функция для преобразования данных\n function transformData(data) {\n     let transformedData = [];\n     data.forEach(item => {\n@@ -325,33 +318,17 @@\n     });\n     return transformedData;\n }\n \n-\n-\n-//переключаем графики\n-function createToggleableGraph(params) {\n-    const container = document.createElement('div');\n-    let currentGraph = 'compareGraph'; \n-\n-    function toggleGraph() {\n-        currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n-        const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n-        container.innerHTML = createGraphComponent(graphData);\n-    }\n-\n-    function createGraphComponent(graphData) {\n-        if (currentGraph === 'compareGraph') {\n-            return createCompareGraph(graphData);\n-        } else {\n-            return createSalesGraph(graphData);\n-        }\n-    }\n-\n-    container.innerHTML = createGraphComponent(params.data.graph);\n-    container.addEventListener('click', toggleGraph);\n-\n-    return container;\n+// Функция для загрузки данных и отображения таблицы\n+function fetchData() {\n+    $.getJSON('data.json', function (response) {\n+        const originalData = response.data;\n+        const rowData = transformData(originalData);\n+        gridOptions.api.applyTransaction({ add: rowData });\n+    }).fail(function () {\n+        console.error('Ошибка при загрузке данных');\n+    });\n }\n \n // График на 30 дней\n function createSalesGraph(statData) {\n@@ -368,9 +345,9 @@\n                     backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                     borderColor: 'rgba(75, 192, 192, 1)',\n                     borderWidth: 1,\n                     pointRadius: 0,\n-                    borderWidth: 1, //  толщина линии\n+                    borderWidth: 1, // Устанавливаем толщину линии\n                     pointHoverRadius: 5, // Радиус точки при наведении\n                 }]\n             },\n             options: {\n@@ -463,15 +440,15 @@\n             type: 'bar',\n             data: {\n                 labels: labels,\n                 datasets: [{\n-                    label: 'Продажи предыдущей недели', \n+                    label: 'Продажи предыдущей недели', // убрал это обозначение\n                     data: previousWeekData,\n                     backgroundColor: 'rgba(75, 192, 192, 0.6)',\n                     borderColor: 'rgba(75, 192, 192, 1)',\n                     borderWidth: 1\n                 }, {\n-                    label: 'Продажи текущей недели', \n+                    label: 'Продажи текущей недели', // убрал это обозначение\n                     data: currentWeekData,\n                     backgroundColor: 'rgba(153, 102, 255, 0.6)',\n                     borderColor: 'rgba(153, 102, 255, 1)',\n                     borderWidth: 1\n@@ -559,19 +536,19 @@\n     \n });\n \n \n+\n // Добавление события для кнопки сброса всех фильтров\n document.querySelector('#resetFilters').addEventListener('click', function() {\n         gridOptions.api.setFilterModel(null);\n     });\n  \n  \n-// Обработчик кнопки \"Рассчитать пополнение\"\n+// Обработчик кнопки \"Рассчитать пополнение (шт)\"\n document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n-    // console.log('work');\n-        const daysInputElement = document.querySelector('#daysInput');\n-    const daysInput = daysInputElement.value;\n+    console.log('work');\n+        const daysInput = document.querySelector('#daysInput').value;\n         if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n             alert('Введите число в диапазоне от 15 до 45');\n         } \n         // Проверяем, что daysInput не пустой и является числом\n@@ -583,20 +560,18 @@\n \n                 if (orders1m !== 0 && stockDays !== 0) {\n                     let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n \n-                    // console.log('replenish: ',replenish);\n+                    console.log('replenish: ',replenish);\n                     \n                     // if(replenish < 1){\n                     //     replenish=Number(1)\n                     // }\n                    \n                     // Обновляем данные в текущей строке\n                     rowNode.setDataValue('replenish', replenish);\n-                    \n                 }\n             });\n-            daysInputElement.value = '';\n         } else {\n             console.error('Введите корректное значение для количества дней');\n         }\n     });\n"
                },
                {
                    "date": 1720112038510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,651 @@\n+<!DOCTYPE html>\n+<html lang=\"en\">\n+\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+    <title>Document</title>\n+    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@ag-grid-community/styles/ag-grid.css\">\n+    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@ag-grid-community/styles/ag-theme-alpine.css\">\n+    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css\" rel=\"stylesheet\">\n+    <script src=\"https://cdn.jsdelivr.net/npm/jquery@3.6.0/jquery.min.js\"></script>\n+    <script src=\"https://cdn.jsdelivr.net/npm/@ag-grid-community/core/dist/ag-grid-community.noStyle.js\"></script>\n+    <script src=\"https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js\"></script>\n+    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n+    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n+    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n+    <style>\n+        img {\n+            height: 120px;\n+            padding: 2%;\n+        }\n+\n+        .red-text {\n+            background-color: red;\n+            color: white;\n+            /* белый текст на красном фоне */\n+            padding: 2px 5px;\n+            /* отступы вокруг текста */\n+            border-radius: 3px;\n+            /* скругление углов */\n+        }\n+\n+        .orange-text {\n+            background-color: orange;\n+            color: black;\n+            /* черный текст на оранжевом фоне */\n+            padding: 2px 5px;\n+            border-radius: 3px;\n+        }\n+\n+        .yellow-text {\n+            background-color: yellow;\n+            color: black;\n+            padding: 2px 5px;\n+            border-radius: 3px;\n+        }\n+\n+        .green-text {\n+            background-color: green;\n+            color: white;\n+            padding: 2px 5px;\n+            border-radius: 3px;\n+        }\n+\n+        .table-wrapper {\n+            display: flex;\n+            flex-direction: column;\n+            height: 100vh;\n+            padding: 20px;\n+            width: 100vw;\n+            align-items: center;\n+        }\n+\n+        .headerContainer {\n+            display: flex;\n+            justify-content: space-between;\n+            align-items: center;\n+            margin-bottom: 15px;\n+            width: 80vw;\n+        }\n+\n+        .input-group,\n+        .btn-wrapper {\n+            height: 50px;\n+        }\n+\n+        input,\n+        button {\n+            height: 100% !important;\n+            font-size: small !important;\n+        }\n+\n+        .input-group {\n+            width: 40vw !important;\n+        }\n+\n+        .table-inner {\n+\n+            width: 100%;\n+        }\n+\n+        #myGrid {\n+            /* height: calc(100% - 50px); */\n+            width: 100%;\n+        }\n+\n+        #loading {\n+            text-align: center;\n+            padding: 20px;\n+            font-size: 1.5rem;\n+        }\n+\n+        #resetFilters {\n+            margin-bottom: 10px;\n+        }\n+    </style>\n+</head>\n+\n+<body>\n+    <div class=\"table-wrapper\">\n+        <div class=\"headerContainer\">\n+            <div class=\"input-group\">\n+                <input type=\"number\" id=\"daysInput\" class=\"form-control\" placeholder=\"Введите количество дней\"\n+                    aria-label=\"Введите количество дней от 15 до 45\" aria-describedby=\"basic-addon2\" min=\"15\" max=\"45\">\n+                <div class=\"input-group-append\">\n+                    <button class=\"btn btn-outline-secondary calculateReplenishment\" type=\"button\">Рассчитать пополнение\n+                        (шт)</button>\n+                </div>\n+            </div>\n+            <div class=\"btn-wrapper\"> <button id=\"resetFilters\" class=\"btn btn-outline-secondary \">Сбросить все\n+                    фильтры</button> </div>\n+            <div class=\"btn-wrapper\"> <button class=\"btn btn-outline-secondary deleteModify\" type=\"button\">Показать\n+                    товар без модификаций</button></div>\n+\n+\n+        </div>\n+\n+        <div class=\"table-inner container mt-4\">\n+            <div id=\"myGrid\" class=\"ag-theme-alpine\" style=\"height: 600px\"></div>\n+            <div id=\"loading\" style=\"display: none;\">Загрузка...</div>\n+        </div>\n+    </div>\n+\n+    <script>\n+        // Определение столбцов и параметров сетки\n+        const columnDefs = [{\n+                headerName: '№',\n+                valueGetter: 'node.rowIndex + 1',\n+                width: 60,\n+                sortable: false,\n+                filter: false\n+            },\n+            {\n+                headerName: 'Фото',\n+                field: 'photo',\n+                width: 100,\n+                cellRenderer: params => `<img src=\"${params.value}\">`\n+            },\n+            {\n+                headerName: 'Предмет',\n+                field: 'subjectName',\n+                width: 120\n+            },\n+            {\n+                headerName: 'Номенклатура',\n+                field: 'nmID',\n+                width: 160\n+            },\n+            {\n+                headerName: 'Размер',\n+                field: 'size',\n+                width: 120\n+            },\n+            {\n+                headerName: 'Заказы 1м',\n+                field: 'orders1m',\n+                width: 150\n+            },\n+            {\n+                headerName: 'Заказы 14 д',\n+                field: 'orders14d',\n+                width: 150\n+            },\n+            // { headerName: 'График продаж за месяц', field: 'salesGraph', width: 250, cellRenderer: params => createSalesGraph(params.data.salesGraph) },\n+            // { headerName: 'Сравнение продаж (нед)', field: 'compareGraph', width: 250, cellRenderer: params => createCompareGraph(params.data.graph) },\n+            {\n+                headerName: 'Графики',\n+                field: 'graph',\n+                width: 300,\n+                cellRenderer: params => createToggleableGraph(params)\n+            },\n+            {\n+                headerName: 'Остаток (шт)',\n+                field: 'stock',\n+                width: 120,\n+                cellRenderer: function (params) {\n+                    const value = params.value;\n+                    let className = '';\n+                    if (value >= 0 && value <= 1.99) {\n+                        className = 'red-text';\n+                    } else if (value >= 2 && value <= 5.99) {\n+                        className = 'orange-text';\n+                    } else if (value >= 6 && value <= 10.99) {\n+                        className = 'yellow-text';\n+                    } else if (value >= 11) {\n+                        className = 'green-text';\n+                    }\n+\n+                    return `<span class=\"${className}\">${value}</span>`;\n+                }\n+            },\n+            {\n+                headerName: 'Остаток (дн)',\n+                field: 'stockDays',\n+                width: 120,\n+                cellRenderer: function (params) {\n+                    const value = params.value;\n+                    let className = '';\n+                    if (value >= 0 && value <= 1.99) {\n+                        className = 'red-text';\n+                    } else if (value >= 2 && value <= 5.99) {\n+                        className = 'orange-text';\n+                    } else if (value >= 6 && value <= 10.99) {\n+                        className = 'yellow-text';\n+                    } else if (value >= 11) {\n+                        className = 'green-text';\n+                    }\n+\n+                    return `<span class=\"${className}\">${value}</span>`;\n+                }\n+            },\n+            {\n+                headerName: 'Пополнить (шт)',\n+                field: 'replenish',\n+                width: 120\n+            },\n+            {\n+                headerName: 'Артикул',\n+                field: 'vendorCode',\n+                width: 150,\n+            }\n+        ];\n+        //переключаем графики\n+        function createToggleableGraph(params) {\n+            const container = document.createElement('div');\n+            let currentGraph = 'compareGraph';\n+\n+            function toggleGraph() {\n+                currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n+                const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n+                container.innerHTML = createGraphComponent(graphData);\n+            }\n+\n+            function createGraphComponent(graphData) {\n+                if (currentGraph === 'compareGraph') {\n+                    return createCompareGraph(graphData);\n+                } else {\n+                    return createSalesGraph(graphData);\n+                }\n+            }\n+\n+            container.innerHTML = createGraphComponent(params.data.graph);\n+            container.addEventListener('click', toggleGraph);\n+\n+            return container;\n+        }\n+\n+\n+\n+\n+        const localeText = {\n+            // Русификация фильтров\n+            page: 'страница',\n+            more: 'ещё',\n+            to: 'к',\n+            of: 'из',\n+            next: 'следующий',\n+            last: 'последний',\n+            first: 'первый',\n+            previous: 'предыдущий',\n+            loadingOoo: 'Загрузка...',\n+            applyFilter: 'Применить фильтр...',\n+            equals: 'Равно',\n+            notEqual: 'Не равно',\n+            filterOoo: 'Фильтр...',\n+            contains: 'Содержит',\n+            notContains: 'Не содержит',\n+            startsWith: 'Начинается с',\n+            endsWith: 'Заканчивается на',\n+            andCondition: 'И',\n+            orCondition: 'Или'\n+        };\n+\n+\n+\n+        const gridOptions = {\n+            enableCellTextSelection: true,\n+            columnDefs: columnDefs,\n+            defaultColDef: {\n+                sortable: true,\n+                filter: true,\n+                resizable: true\n+            },\n+            rowData: [],\n+            localeText: localeText,\n+            rowHeight: 120,\n+            getRowId: params => {\n+                const id = params.data.uniqueId;\n+                console.log('Row ID:', id, 'Data:', params);\n+                return id;\n+            }\n+        };\n+\n+\n+        // Функция для преобразования данных\n+        function transformData(data) {\n+            let transformedData = [];\n+            data.forEach(item => {\n+                item.allowed_sizes.forEach(size => {\n+                    let stock = item.stocks ? item.stocks[size] || 0 : 0;\n+                    let orders1m = item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n+                    let stockDays = orders1m !== 0 ? parseFloat((stock / orders1m).toFixed(2)) : 0;\n+\n+                    // Создаем уникальный идентификатор на основе генератора\n+                    let uniqueId = `${item.nmID}-${size}`;\n+                    console.log('uniqueId в начале', uniqueId);\n+                    // console.log('Transformed uniqueId:', uniqueId);\n+                    // console.log('item.graph :', item.graph );\n+                    transformedData.push({\n+                        uniqueId: uniqueId, // Добавляем уникальный идентификатор\n+                        photo: item.photos ? item.photos[0][\"c516x688\"] : '',\n+                        subjectName: item.subjectName,\n+                        nmID: item.nmID,\n+                        size: size,\n+                        orders1m: orders1m,\n+                        orders14d: item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0,\n+                        salesGraph: item[\"30stat\"], // Данные для графика,\n+                        graph: item.graph, // Данные для сравнения графиков продаж\n+                        stock: stock,\n+                        stockDays: stockDays,\n+                        replenish: '',\n+                        vendorCode: item.vendorCode\n+                    });\n+                });\n+            });\n+            return transformedData;\n+        }\n+\n+        // Функция для преобразования данных без размеров\n+        function transformDataWithoutSizes(data) {\n+            let transformedData = [];\n+            data.forEach(item => {\n+                let totalStock = 0;\n+                let totalOrders1m = 0;\n+                let totalOrders14d = 0;\n+\n+                console.log('item.graph ', item.graph);\n+\n+                item.allowed_sizes.forEach(size => {\n+                    totalStock += item.stocks ? item.stocks[size] || 0 : 0;\n+                    totalOrders1m += item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n+                    totalOrders14d += item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0;\n+                });\n+\n+                let stockDays = totalOrders1m !== 0 ? parseFloat((totalStock / totalOrders1m).toFixed(2)) : 0;\n+                let orders1m = parseFloat(totalOrders1m.toFixed(2))\n+                let orders14d = parseFloat(totalOrders14d.toFixed(2))\n+                let uniqueId = item.nmID;\n+                console.log('uniqueId во второй', uniqueId);\n+                transformedData.push({\n+                    uniqueId: uniqueId, // Добавляем уникальный идентификатор\n+                    photo: item.photos ? item.photos[0].c246x328 : '',\n+                    subjectName: item.subjectName,\n+                    nmID: item.nmID,\n+                    size: '-', // Прочерк для размера\n+                    orders1m: orders1m,\n+                    orders14d: orders14d,\n+                    salesGraph: item[\"30stat\"],\n+                    compareGraph: item.graph,\n+                    stock: totalStock,\n+                    stockDays: stockDays, //  добавить логику для расчета\n+                    replenish: '',\n+                    vendorCode: item.vendorCode\n+                });\n+            });\n+            return transformedData;\n+        }\n+\n+        // Функция для загрузки данных и отображения таблицы\n+        function fetchData() {\n+            $.getJSON('data.json', function (response) {\n+                const originalData = response.data;\n+                const rowData = transformData(originalData);\n+                gridOptions.api.applyTransaction({\n+                    add: rowData\n+                });\n+            }).fail(function () {\n+                console.error('Ошибка при загрузке данных');\n+            });\n+        }\n+\n+        // График на 30 дней\n+        function createSalesGraph(statData) {\n+            const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n+            setTimeout(() => {\n+                const ctx = document.getElementById(canvasId).getContext('2d');\n+                new Chart(ctx, {\n+                    type: 'line',\n+                    data: {\n+                        labels: Object.keys(statData),\n+                        datasets: [{\n+                            label: 'Продажи',\n+                            data: Object.values(statData),\n+                            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n+                            borderColor: 'rgba(75, 192, 192, 1)',\n+                            borderWidth: 1,\n+                            pointRadius: 0,\n+                            borderWidth: 1, // Устанавливаем толщину линии\n+                            pointHoverRadius: 5, // Радиус точки при наведении\n+                        }]\n+                    },\n+                    options: {\n+                        responsive: true,\n+                        maintainAspectRatio: false,\n+                        scales: {\n+                            x: {\n+                                display: true, // Отображение оси X\n+                                ticks: {\n+                                    display: false // Скрываем метки по оси X\n+                                }\n+                            },\n+                            y: {\n+                                display: true, // Отображение оси Y\n+                                ticks: {\n+                                    display: false // Скрываем метки по оси Y\n+                                }\n+                            }\n+                        },\n+                        plugins: {\n+                            legend: {\n+                                display: false // Убираем легенду\n+                            },\n+                            tooltip: {\n+                                callbacks: {\n+                                    label: function (context) {\n+                                        return `Дата: ${context.label}, Количество: ${context.parsed.y}`;\n+                                    }\n+                                }\n+                            },\n+                            hover: {\n+                                mode: 'index',\n+                                intersect: false,\n+                            }\n+                        },\n+                        interaction: {\n+                            mode: 'index',\n+                            intersect: false,\n+                        },\n+                        elements: {\n+                            point: {\n+                                radius: 0, // Скрываем точки\n+                                hoverRadius: 5, // Радиус точки при наведении\n+                                hitRadius: 10, // Радиус области взаимодействия точки\n+                            }\n+                        }\n+                    }\n+                });\n+            }, 100);\n+            return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n+        }\n+\n+        function createCompareGraph(graphData) {\n+            const canvasId = `compare-chart-${Math.random().toString(36).substr(2, 9)}`;\n+            const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]; // индексы этих дней: 0,1,2,3,4,5,6\n+            const currentDate = new Date();\n+            const currentDayIndex = currentDate.getDay(); // нашли индекс текущего дня\n+\n+            // меняем массив дней недели так, чтобы справа был текущий день недели\n+            const labels = [...daysOfWeek.slice(currentDayIndex + 1), ...daysOfWeek.slice(0, currentDayIndex + 1)];\n+\n+            const currentWeekData = new Array(7).fill(0); // Продажи текущей недели\n+            const previousWeekData = new Array(7).fill(0); // Продажи предыдущей \n+\n+            // меняем строку даты в объект Date\n+            const parseDate = (dateString) => {\n+                const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n+                return new Date(\n+                `20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n+            };\n+\n+            // Функция для получения индекса дня недели\n+            const getWeekdayIndex = (date) => {\n+                return date.getDay();\n+            };\n+\n+            // Заполняем данные продаж для текущей и предыдущей недели\n+            for (const [dateString, count] of Object.entries(graphData)) {\n+                const date = parseDate(dateString);\n+                const dayDiff = Math.floor((currentDate - date) / (1000 * 60 * 60 * 24));\n+                if (dayDiff >= 0 && dayDiff < 7) {\n+                    currentWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n+                } else if (dayDiff >= 7 && dayDiff < 14) {\n+                    previousWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n+                }\n+            }\n+\n+            setTimeout(() => {\n+                const ctx = document.getElementById(canvasId).getContext('2d');\n+                new Chart(ctx, {\n+                    type: 'bar',\n+                    data: {\n+                        labels: labels,\n+                        datasets: [{\n+                            label: 'Продажи предыдущей недели', // убрал это обозначение\n+                            data: previousWeekData,\n+                            backgroundColor: 'rgba(75, 192, 192, 0.6)',\n+                            borderColor: 'rgba(75, 192, 192, 1)',\n+                            borderWidth: 1\n+                        }, {\n+                            label: 'Продажи текущей недели', // убрал это обозначение\n+                            data: currentWeekData,\n+                            backgroundColor: 'rgba(153, 102, 255, 0.6)',\n+                            borderColor: 'rgba(153, 102, 255, 1)',\n+                            borderWidth: 1\n+                        }]\n+                    },\n+                    options: {\n+                        scales: {\n+                            y: {\n+                                display: false // Скрыть ось Y\n+                            },\n+                            x: {\n+                                display: true,\n+                                ticks: {\n+                                    color: 'grey' // Цвет текста на оси X\n+                                }\n+                            }\n+                        },\n+                        plugins: {\n+                            legend: {\n+                                display: false // Скрыть легенду\n+                            },\n+                            tooltip: {\n+                                enabled: true,\n+                                callbacks: {\n+                                    label: function (tooltipItem) {\n+                                        let label = tooltipItem.dataset.label || '';\n+                                        if (label) {\n+                                            label += ': ';\n+                                        }\n+                                        label += tooltipItem.raw.toFixed(2);\n+                                        return label;\n+                                    }\n+                                }\n+                            }\n+                        },\n+                        maintainAspectRatio: false,\n+                        responsive: true\n+                    }\n+                });\n+            }, 100);\n+\n+            return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n+        }\n+\n+\n+        // Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n+        document.querySelector('.deleteModify').addEventListener('click', function () {\n+            if ($(this).text() === \"Показать товар без модификаций\") {\n+                $(this).text(\"Показать модификации\");\n+                $.getJSON('data.json', function (response) {\n+                    const originalData = response.data;\n+                    const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n+\n+                    // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n+                    const nodesToRemove = [];\n+                    console.log('nodesToRemove: ', nodesToRemove);\n+                    gridOptions.api.forEachNode(node => {\n+                        nodesToRemove.push(node);\n+                    });\n+\n+                    gridOptions.api.applyTransaction({\n+                        remove: nodesToRemove,\n+                        add: rowDataWithoutSizes\n+                    });\n+                }).fail(function () {\n+                    console.error('Ошибка при загрузке данных');\n+                });\n+\n+            } else if ($(this).text() === \"Показать модификации\") {\n+                $(this).text(\"Показать товар без модификации\");\n+                //  // Загружаем и отображаем модификации\n+                //  $.getJSON('data.json', function (response) {\n+                //     const originalData = response.data;\n+                //     const modifiedData = transformData(originalData);\n+\n+                //     gridOptions.api.applyTransaction({\n+                //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n+                //         add: modifiedData\n+                //     });\n+                // }).fail(function () {\n+                //     console.error('Ошибка при загрузке данных');\n+                // });\n+                location.reload()\n+            }\n+\n+        });\n+\n+\n+\n+        // Добавление события для кнопки сброса всех фильтров\n+        document.querySelector('#resetFilters').addEventListener('click', function () {\n+            gridOptions.api.setFilterModel(null);\n+        });\n+\n+\n+        // Обработчик кнопки \"Рассчитать пополнение (шт)\"\n+        document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n+            const daysInputElement = document.querySelector('#daysInput');\n+            const daysInput = daysInputElement.value;\n+\n+            if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n+                alert('Введите число в диапазоне от 15 до 45');\n+            }\n+\n+            // Проверяем, что daysInput не пустой и является числом\n+            if (daysInput && !isNaN(daysInput)) {\n+                // Рассчитываем replenish для каждой строки\n+                gridOptions.api.forEachNode(rowNode => {\n+                    const orders1m = rowNode.data.orders1m;\n+                    const stockDays = rowNode.data.stockDays;\n+\n+                    if (orders1m !== 0 && stockDays !== 0) {\n+                        let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n+\n+                        // Обновляем данные в текущей строке\n+                        rowNode.setDataValue('replenish', replenish);\n+                    }\n+                });\n+\n+                // Очищаем значение инпута после выполнения расчетов\n+                daysInputElement.value = '';\n+            } else {\n+                console.error('Введите корректное значение для количества дней');\n+            }\n+        });\n+\n+\n+        document.addEventListener('DOMContentLoaded', function () {\n+            const gridDiv = document.querySelector('#myGrid');\n+            new agGrid.Grid(gridDiv, gridOptions);\n+\n+            fetchData();\n+\n+\n+\n+        });\n+    </script>\n+</body>\n+\n+</html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720112053908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n <!DOCTYPE html>\n <html lang=\"en\">\n-\n <head>\n     <meta charset=\"UTF-8\">\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n     <title>Document</title>\n@@ -14,658 +13,8 @@\n     <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n     <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n     <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n     <style>\n-        img {\n-            height: 120px;\n-            padding: 2%;\n-        }\n-\n-        .red-text {\n-            background-color: red;\n-            color: white;\n-            /* белый текст на красном фоне */\n-            padding: 2px 5px;\n-            /* отступы вокруг текста */\n-            border-radius: 3px;\n-            /* скругление углов */\n-        }\n-\n-        .orange-text {\n-            background-color: orange;\n-            color: black;\n-            /* черный текст на оранжевом фоне */\n-            padding: 2px 5px;\n-            border-radius: 3px;\n-        }\n-\n-        .yellow-text {\n-            background-color: yellow;\n-            color: black;\n-            padding: 2px 5px;\n-            border-radius: 3px;\n-        }\n-\n-        .green-text {\n-            background-color: green;\n-            color: white;\n-            padding: 2px 5px;\n-            border-radius: 3px;\n-        }\n-\n-        .table-wrapper {\n-            display: flex;\n-            flex-direction: column;\n-            height: 100vh;\n-            padding: 20px;\n-            width: 100vw;\n-            align-items: center;\n-        }\n-\n-        .headerContainer {\n-            display: flex;\n-            justify-content: space-between;\n-            align-items: center;\n-            margin-bottom: 15px;\n-            width: 80vw;\n-        }\n-\n-        .input-group,\n-        .btn-wrapper {\n-            height: 50px;\n-        }\n-\n-        input,\n-        button {\n-            height: 100% !important;\n-            font-size: small !important;\n-        }\n-\n-        .input-group {\n-            width: 40vw !important;\n-        }\n-\n-        .table-inner {\n-\n-            width: 100%;\n-        }\n-\n-        #myGrid {\n-            /* height: calc(100% - 50px); */\n-            width: 100%;\n-        }\n-\n-        #loading {\n-            text-align: center;\n-            padding: 20px;\n-            font-size: 1.5rem;\n-        }\n-\n-        #resetFilters {\n-            margin-bottom: 10px;\n-        }\n-    </style>\n-</head>\n-\n-<body>\n-    <div class=\"table-wrapper\">\n-        <div class=\"headerContainer\">\n-            <div class=\"input-group\">\n-                <input type=\"number\" id=\"daysInput\" class=\"form-control\" placeholder=\"Введите количество дней\"\n-                    aria-label=\"Введите количество дней от 15 до 45\" aria-describedby=\"basic-addon2\" min=\"15\" max=\"45\">\n-                <div class=\"input-group-append\">\n-                    <button class=\"btn btn-outline-secondary calculateReplenishment\" type=\"button\">Рассчитать пополнение\n-                        (шт)</button>\n-                </div>\n-            </div>\n-            <div class=\"btn-wrapper\"> <button id=\"resetFilters\" class=\"btn btn-outline-secondary \">Сбросить все\n-                    фильтры</button> </div>\n-            <div class=\"btn-wrapper\"> <button class=\"btn btn-outline-secondary deleteModify\" type=\"button\">Показать\n-                    товар без модификаций</button></div>\n-\n-\n-        </div>\n-\n-        <div class=\"table-inner container mt-4\">\n-            <div id=\"myGrid\" class=\"ag-theme-alpine\" style=\"height: 600px\"></div>\n-            <div id=\"loading\" style=\"display: none;\">Загрузка...</div>\n-        </div>\n-    </div>\n-\n-    <script>\n-        // Определение столбцов и параметров сетки\n-        const columnDefs = [{\n-                headerName: '№',\n-                valueGetter: 'node.rowIndex + 1',\n-                width: 60,\n-                sortable: false,\n-                filter: false\n-            },\n-            {\n-                headerName: 'Фото',\n-                field: 'photo',\n-                width: 100,\n-                cellRenderer: params => `<img src=\"${params.value}\">`\n-            },\n-            {\n-                headerName: 'Предмет',\n-                field: 'subjectName',\n-                width: 120\n-            },\n-            {\n-                headerName: 'Номенклатура',\n-                field: 'nmID',\n-                width: 160\n-            },\n-            {\n-                headerName: 'Размер',\n-                field: 'size',\n-                width: 120\n-            },\n-            {\n-                headerName: 'Заказы 1м',\n-                field: 'orders1m',\n-                width: 150\n-            },\n-            {\n-                headerName: 'Заказы 14 д',\n-                field: 'orders14d',\n-                width: 150\n-            },\n-            // { headerName: 'График продаж за месяц', field: 'salesGraph', width: 250, cellRenderer: params => createSalesGraph(params.data.salesGraph) },\n-            // { headerName: 'Сравнение продаж (нед)', field: 'compareGraph', width: 250, cellRenderer: params => createCompareGraph(params.data.graph) },\n-            {\n-                headerName: 'Графики',\n-                field: 'graph',\n-                width: 300,\n-                cellRenderer: params => createToggleableGraph(params)\n-            },\n-            {\n-                headerName: 'Остаток (шт)',\n-                field: 'stock',\n-                width: 120,\n-                cellRenderer: function (params) {\n-                    const value = params.value;\n-                    let className = '';\n-                    if (value >= 0 && value <= 1.99) {\n-                        className = 'red-text';\n-                    } else if (value >= 2 && value <= 5.99) {\n-                        className = 'orange-text';\n-                    } else if (value >= 6 && value <= 10.99) {\n-                        className = 'yellow-text';\n-                    } else if (value >= 11) {\n-                        className = 'green-text';\n-                    }\n-\n-                    return `<span class=\"${className}\">${value}</span>`;\n-                }\n-            },\n-            {\n-                headerName: 'Остаток (дн)',\n-                field: 'stockDays',\n-                width: 120,\n-                cellRenderer: function (params) {\n-                    const value = params.value;\n-                    let className = '';\n-                    if (value >= 0 && value <= 1.99) {\n-                        className = 'red-text';\n-                    } else if (value >= 2 && value <= 5.99) {\n-                        className = 'orange-text';\n-                    } else if (value >= 6 && value <= 10.99) {\n-                        className = 'yellow-text';\n-                    } else if (value >= 11) {\n-                        className = 'green-text';\n-                    }\n-\n-                    return `<span class=\"${className}\">${value}</span>`;\n-                }\n-            },\n-            {\n-                headerName: 'Пополнить (шт)',\n-                field: 'replenish',\n-                width: 120\n-            },\n-            {\n-                headerName: 'Артикул',\n-                field: 'vendorCode',\n-                width: 150,\n-            }\n-        ];\n-        //переключаем графики\n-        function createToggleableGraph(params) {\n-            const container = document.createElement('div');\n-            let currentGraph = 'compareGraph';\n-\n-            function toggleGraph() {\n-                currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n-                const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n-                container.innerHTML = createGraphComponent(graphData);\n-            }\n-\n-            function createGraphComponent(graphData) {\n-                if (currentGraph === 'compareGraph') {\n-                    return createCompareGraph(graphData);\n-                } else {\n-                    return createSalesGraph(graphData);\n-                }\n-            }\n-\n-            container.innerHTML = createGraphComponent(params.data.graph);\n-            container.addEventListener('click', toggleGraph);\n-\n-            return container;\n-        }\n-\n-\n-\n-\n-        const localeText = {\n-            // Русификация фильтров\n-            page: 'страница',\n-            more: 'ещё',\n-            to: 'к',\n-            of: 'из',\n-            next: 'следующий',\n-            last: 'последний',\n-            first: 'первый',\n-            previous: 'предыдущий',\n-            loadingOoo: 'Загрузка...',\n-            applyFilter: 'Применить фильтр...',\n-            equals: 'Равно',\n-            notEqual: 'Не равно',\n-            filterOoo: 'Фильтр...',\n-            contains: 'Содержит',\n-            notContains: 'Не содержит',\n-            startsWith: 'Начинается с',\n-            endsWith: 'Заканчивается на',\n-            andCondition: 'И',\n-            orCondition: 'Или'\n-        };\n-\n-\n-\n-        const gridOptions = {\n-            enableCellTextSelection: true,\n-            columnDefs: columnDefs,\n-            defaultColDef: {\n-                sortable: true,\n-                filter: true,\n-                resizable: true\n-            },\n-            rowData: [],\n-            localeText: localeText,\n-            rowHeight: 120,\n-            getRowId: params => {\n-                const id = params.data.uniqueId;\n-                console.log('Row ID:', id, 'Data:', params);\n-                return id;\n-            }\n-        };\n-\n-\n-        // Функция для преобразования данных\n-        function transformData(data) {\n-            let transformedData = [];\n-            data.forEach(item => {\n-                item.allowed_sizes.forEach(size => {\n-                    let stock = item.stocks ? item.stocks[size] || 0 : 0;\n-                    let orders1m = item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n-                    let stockDays = orders1m !== 0 ? parseFloat((stock / orders1m).toFixed(2)) : 0;\n-\n-                    // Создаем уникальный идентификатор на основе генератора\n-                    let uniqueId = `${item.nmID}-${size}`;\n-                    console.log('uniqueId в начале', uniqueId);\n-                    // console.log('Transformed uniqueId:', uniqueId);\n-                    // console.log('item.graph :', item.graph );\n-                    transformedData.push({\n-                        uniqueId: uniqueId, // Добавляем уникальный идентификатор\n-                        photo: item.photos ? item.photos[0][\"c516x688\"] : '',\n-                        subjectName: item.subjectName,\n-                        nmID: item.nmID,\n-                        size: size,\n-                        orders1m: orders1m,\n-                        orders14d: item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0,\n-                        salesGraph: item[\"30stat\"], // Данные для графика,\n-                        graph: item.graph, // Данные для сравнения графиков продаж\n-                        stock: stock,\n-                        stockDays: stockDays,\n-                        replenish: '',\n-                        vendorCode: item.vendorCode\n-                    });\n-                });\n-            });\n-            return transformedData;\n-        }\n-\n-        // Функция для преобразования данных без размеров\n-        function transformDataWithoutSizes(data) {\n-            let transformedData = [];\n-            data.forEach(item => {\n-                let totalStock = 0;\n-                let totalOrders1m = 0;\n-                let totalOrders14d = 0;\n-\n-                console.log('item.graph ', item.graph);\n-\n-                item.allowed_sizes.forEach(size => {\n-                    totalStock += item.stocks ? item.stocks[size] || 0 : 0;\n-                    totalOrders1m += item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n-                    totalOrders14d += item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0;\n-                });\n-\n-                let stockDays = totalOrders1m !== 0 ? parseFloat((totalStock / totalOrders1m).toFixed(2)) : 0;\n-                let orders1m = parseFloat(totalOrders1m.toFixed(2))\n-                let orders14d = parseFloat(totalOrders14d.toFixed(2))\n-                let uniqueId = item.nmID;\n-                console.log('uniqueId во второй', uniqueId);\n-                transformedData.push({\n-                    uniqueId: uniqueId, // Добавляем уникальный идентификатор\n-                    photo: item.photos ? item.photos[0].c246x328 : '',\n-                    subjectName: item.subjectName,\n-                    nmID: item.nmID,\n-                    size: '-', // Прочерк для размера\n-                    orders1m: orders1m,\n-                    orders14d: orders14d,\n-                    salesGraph: item[\"30stat\"],\n-                    compareGraph: item.graph,\n-                    stock: totalStock,\n-                    stockDays: stockDays, //  добавить логику для расчета\n-                    replenish: '',\n-                    vendorCode: item.vendorCode\n-                });\n-            });\n-            return transformedData;\n-        }\n-\n-        // Функция для загрузки данных и отображения таблицы\n-        function fetchData() {\n-            $.getJSON('data.json', function (response) {\n-                const originalData = response.data;\n-                const rowData = transformData(originalData);\n-                gridOptions.api.applyTransaction({\n-                    add: rowData\n-                });\n-            }).fail(function () {\n-                console.error('Ошибка при загрузке данных');\n-            });\n-        }\n-\n-        // График на 30 дней\n-        function createSalesGraph(statData) {\n-            const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n-            setTimeout(() => {\n-                const ctx = document.getElementById(canvasId).getContext('2d');\n-                new Chart(ctx, {\n-                    type: 'line',\n-                    data: {\n-                        labels: Object.keys(statData),\n-                        datasets: [{\n-                            label: 'Продажи',\n-                            data: Object.values(statData),\n-                            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n-                            borderColor: 'rgba(75, 192, 192, 1)',\n-                            borderWidth: 1,\n-                            pointRadius: 0,\n-                            borderWidth: 1, // Устанавливаем толщину линии\n-                            pointHoverRadius: 5, // Радиус точки при наведении\n-                        }]\n-                    },\n-                    options: {\n-                        responsive: true,\n-                        maintainAspectRatio: false,\n-                        scales: {\n-                            x: {\n-                                display: true, // Отображение оси X\n-                                ticks: {\n-                                    display: false // Скрываем метки по оси X\n-                                }\n-                            },\n-                            y: {\n-                                display: true, // Отображение оси Y\n-                                ticks: {\n-                                    display: false // Скрываем метки по оси Y\n-                                }\n-                            }\n-                        },\n-                        plugins: {\n-                            legend: {\n-                                display: false // Убираем легенду\n-                            },\n-                            tooltip: {\n-                                callbacks: {\n-                                    label: function (context) {\n-                                        return `Дата: ${context.label}, Количество: ${context.parsed.y}`;\n-                                    }\n-                                }\n-                            },\n-                            hover: {\n-                                mode: 'index',\n-                                intersect: false,\n-                            }\n-                        },\n-                        interaction: {\n-                            mode: 'index',\n-                            intersect: false,\n-                        },\n-                        elements: {\n-                            point: {\n-                                radius: 0, // Скрываем точки\n-                                hoverRadius: 5, // Радиус точки при наведении\n-                                hitRadius: 10, // Радиус области взаимодействия точки\n-                            }\n-                        }\n-                    }\n-                });\n-            }, 100);\n-            return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n-        }\n-\n-        function createCompareGraph(graphData) {\n-            const canvasId = `compare-chart-${Math.random().toString(36).substr(2, 9)}`;\n-            const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]; // индексы этих дней: 0,1,2,3,4,5,6\n-            const currentDate = new Date();\n-            const currentDayIndex = currentDate.getDay(); // нашли индекс текущего дня\n-\n-            // меняем массив дней недели так, чтобы справа был текущий день недели\n-            const labels = [...daysOfWeek.slice(currentDayIndex + 1), ...daysOfWeek.slice(0, currentDayIndex + 1)];\n-\n-            const currentWeekData = new Array(7).fill(0); // Продажи текущей недели\n-            const previousWeekData = new Array(7).fill(0); // Продажи предыдущей \n-\n-            // меняем строку даты в объект Date\n-            const parseDate = (dateString) => {\n-                const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n-                return new Date(\n-                `20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n-            };\n-\n-            // Функция для получения индекса дня недели\n-            const getWeekdayIndex = (date) => {\n-                return date.getDay();\n-            };\n-\n-            // Заполняем данные продаж для текущей и предыдущей недели\n-            for (const [dateString, count] of Object.entries(graphData)) {\n-                const date = parseDate(dateString);\n-                const dayDiff = Math.floor((currentDate - date) / (1000 * 60 * 60 * 24));\n-                if (dayDiff >= 0 && dayDiff < 7) {\n-                    currentWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n-                } else if (dayDiff >= 7 && dayDiff < 14) {\n-                    previousWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n-                }\n-            }\n-\n-            setTimeout(() => {\n-                const ctx = document.getElementById(canvasId).getContext('2d');\n-                new Chart(ctx, {\n-                    type: 'bar',\n-                    data: {\n-                        labels: labels,\n-                        datasets: [{\n-                            label: 'Продажи предыдущей недели', // убрал это обозначение\n-                            data: previousWeekData,\n-                            backgroundColor: 'rgba(75, 192, 192, 0.6)',\n-                            borderColor: 'rgba(75, 192, 192, 1)',\n-                            borderWidth: 1\n-                        }, {\n-                            label: 'Продажи текущей недели', // убрал это обозначение\n-                            data: currentWeekData,\n-                            backgroundColor: 'rgba(153, 102, 255, 0.6)',\n-                            borderColor: 'rgba(153, 102, 255, 1)',\n-                            borderWidth: 1\n-                        }]\n-                    },\n-                    options: {\n-                        scales: {\n-                            y: {\n-                                display: false // Скрыть ось Y\n-                            },\n-                            x: {\n-                                display: true,\n-                                ticks: {\n-                                    color: 'grey' // Цвет текста на оси X\n-                                }\n-                            }\n-                        },\n-                        plugins: {\n-                            legend: {\n-                                display: false // Скрыть легенду\n-                            },\n-                            tooltip: {\n-                                enabled: true,\n-                                callbacks: {\n-                                    label: function (tooltipItem) {\n-                                        let label = tooltipItem.dataset.label || '';\n-                                        if (label) {\n-                                            label += ': ';\n-                                        }\n-                                        label += tooltipItem.raw.toFixed(2);\n-                                        return label;\n-                                    }\n-                                }\n-                            }\n-                        },\n-                        maintainAspectRatio: false,\n-                        responsive: true\n-                    }\n-                });\n-            }, 100);\n-\n-            return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n-        }\n-\n-\n-        // Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n-        document.querySelector('.deleteModify').addEventListener('click', function () {\n-            if ($(this).text() === \"Показать товар без модификаций\") {\n-                $(this).text(\"Показать модификации\");\n-                $.getJSON('data.json', function (response) {\n-                    const originalData = response.data;\n-                    const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n-\n-                    // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n-                    const nodesToRemove = [];\n-                    console.log('nodesToRemove: ', nodesToRemove);\n-                    gridOptions.api.forEachNode(node => {\n-                        nodesToRemove.push(node);\n-                    });\n-\n-                    gridOptions.api.applyTransaction({\n-                        remove: nodesToRemove,\n-                        add: rowDataWithoutSizes\n-                    });\n-                }).fail(function () {\n-                    console.error('Ошибка при загрузке данных');\n-                });\n-\n-            } else if ($(this).text() === \"Показать модификации\") {\n-                $(this).text(\"Показать товар без модификации\");\n-                //  // Загружаем и отображаем модификации\n-                //  $.getJSON('data.json', function (response) {\n-                //     const originalData = response.data;\n-                //     const modifiedData = transformData(originalData);\n-\n-                //     gridOptions.api.applyTransaction({\n-                //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n-                //         add: modifiedData\n-                //     });\n-                // }).fail(function () {\n-                //     console.error('Ошибка при загрузке данных');\n-                // });\n-                location.reload()\n-            }\n-\n-        });\n-\n-\n-\n-        // Добавление события для кнопки сброса всех фильтров\n-        document.querySelector('#resetFilters').addEventListener('click', function () {\n-            gridOptions.api.setFilterModel(null);\n-        });\n-\n-\n-        // Обработчик кнопки \"Рассчитать пополнение (шт)\"\n-        document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n-            const daysInputElement = document.querySelector('#daysInput');\n-            const daysInput = daysInputElement.value;\n-\n-            if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n-                alert('Введите число в диапазоне от 15 до 45');\n-            }\n-\n-            // Проверяем, что daysInput не пустой и является числом\n-            if (daysInput && !isNaN(daysInput)) {\n-                // Рассчитываем replenish для каждой строки\n-                gridOptions.api.forEachNode(rowNode => {\n-                    const orders1m = rowNode.data.orders1m;\n-                    const stockDays = rowNode.data.stockDays;\n-\n-                    if (orders1m !== 0 && stockDays !== 0) {\n-                        let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n-\n-                        // Обновляем данные в текущей строке\n-                        rowNode.setDataValue('replenish', replenish);\n-                    }\n-                });\n-\n-                // Очищаем значение инпута после выполнения расчетов\n-                daysInputElement.value = '';\n-            } else {\n-                console.error('Введите корректное значение для количества дней');\n-            }\n-        });\n-\n-\n-        document.addEventListener('DOMContentLoaded', function () {\n-            const gridDiv = document.querySelector('#myGrid');\n-            new agGrid.Grid(gridDiv, gridOptions);\n-\n-            fetchData();\n-\n-\n-\n-        });\n-    </script>\n-</body>\n-\n-</html>\n-<!DOCTYPE html>\n-<html lang=\"en\">\n-<head>\n-    <meta charset=\"UTF-8\">\n-    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n-    <title>Document</title>\n-    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@ag-grid-community/styles/ag-grid.css\">\n-    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@ag-grid-community/styles/ag-theme-alpine.css\">\n-    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css\" rel=\"stylesheet\">\n-    <script src=\"https://cdn.jsdelivr.net/npm/jquery@3.6.0/jquery.min.js\"></script>\n-    <script src=\"https://cdn.jsdelivr.net/npm/@ag-grid-community/core/dist/ag-grid-community.noStyle.js\"></script>\n-    <script src=\"https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js\"></script>\n-    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n-    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n-    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n-    <style>\n         img{\n             height: 120px;\n             padding: 2%;\n         }\n@@ -1196,37 +545,37 @@\n  \n  \n // Обработчик кнопки \"Рассчитать пополнение (шт)\"\n document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n-    console.log('work');\n-        const daysInput = document.querySelector('#daysInput').value;\n-        if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n-            alert('Введите число в диапазоне от 15 до 45');\n-        } \n-        // Проверяем, что daysInput не пустой и является числом\n-        if (daysInput && !isNaN(daysInput)) {\n-            // Рассчитываем replenish для каждой строки\n-            gridOptions.api.forEachNode(rowNode => {\n-                const orders1m = rowNode.data.orders1m;\n-                const stockDays = rowNode.data.stockDays;\n+    const daysInputElement = document.querySelector('#daysInput');\n+    const daysInput = daysInputElement.value;\n \n-                if (orders1m !== 0 && stockDays !== 0) {\n-                    let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n+    if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n+        alert('Введите число в диапазоне от 15 до 45');\n+    } \n \n-                    console.log('replenish: ',replenish);\n-                    \n-                    // if(replenish < 1){\n-                    //     replenish=Number(1)\n-                    // }\n-                   \n-                    // Обновляем данные в текущей строке\n-                    rowNode.setDataValue('replenish', replenish);\n-                }\n-            });\n-        } else {\n-            console.error('Введите корректное значение для количества дней');\n-        }\n-    });\n+    // Проверяем, что daysInput не пустой и является числом\n+    if (daysInput && !isNaN(daysInput)) {\n+        // Рассчитываем replenish для каждой строки\n+        gridOptions.api.forEachNode(rowNode => {\n+            const orders1m = rowNode.data.orders1m;\n+            const stockDays = rowNode.data.stockDays;\n+\n+            if (orders1m !== 0 && stockDays !== 0) {\n+                let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n+\n+                // Обновляем данные в текущей строке\n+                rowNode.setDataValue('replenish', replenish);\n+            }\n+        });\n+\n+        // Очищаем значение инпута после выполнения расчетов\n+        daysInputElement.value = '';\n+    } else {\n+        console.error('Введите корректное значение для количества дней');\n+    }\n+});\n+\n     \n document.addEventListener('DOMContentLoaded', function () {\n     const gridDiv = document.querySelector('#myGrid');\n     new agGrid.Grid(gridDiv, gridOptions);\n@@ -1239,5 +588,5 @@\n \n \n     </script>\n </body>\n-</html>\n\\ No newline at end of file\n+</html>\n"
                },
                {
                    "date": 1720112085300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n <!DOCTYPE html>\n <html lang=\"en\">\n+\n <head>\n     <meta charset=\"UTF-8\">\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n     <title>Document</title>\n@@ -13,580 +14,638 @@\n     <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n     <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n     <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n     <style>\n-        img{\n+        img {\n             height: 120px;\n             padding: 2%;\n         }\n+\n         .red-text {\n-    background-color: red;\n-    color: white; /* белый текст на красном фоне */\n-    padding: 2px 5px; /* отступы вокруг текста */\n-    border-radius: 3px; /* скругление углов */\n-}\n+            background-color: red;\n+            color: white;\n+            /* белый текст на красном фоне */\n+            padding: 2px 5px;\n+            /* отступы вокруг текста */\n+            border-radius: 3px;\n+            /* скругление углов */\n+        }\n \n-.orange-text {\n-    background-color: orange;\n-    color: black; /* черный текст на оранжевом фоне */\n-    padding: 2px 5px;\n-    border-radius: 3px;\n-}\n+        .orange-text {\n+            background-color: orange;\n+            color: black;\n+            /* черный текст на оранжевом фоне */\n+            padding: 2px 5px;\n+            border-radius: 3px;\n+        }\n \n-.yellow-text {\n-    background-color: yellow;\n-    color: black;\n-    padding: 2px 5px;\n-    border-radius: 3px;\n-}\n+        .yellow-text {\n+            background-color: yellow;\n+            color: black;\n+            padding: 2px 5px;\n+            border-radius: 3px;\n+        }\n \n-.green-text {\n-    background-color: green;\n-    color: white;\n-    padding: 2px 5px;\n-    border-radius: 3px;\n-}\n-.table-wrapper {\n+        .green-text {\n+            background-color: green;\n+            color: white;\n+            padding: 2px 5px;\n+            border-radius: 3px;\n+        }\n+\n+        .table-wrapper {\n             display: flex;\n             flex-direction: column;\n             height: 100vh;\n             padding: 20px;\n             width: 100vw;\n             align-items: center;\n         }\n+\n         .headerContainer {\n             display: flex;\n             justify-content: space-between;\n             align-items: center;\n             margin-bottom: 15px;\n             width: 80vw;\n         }\n-        .input-group,.btn-wrapper{\n+\n+        .input-group,\n+        .btn-wrapper {\n             height: 50px;\n         }\n-        input, button{\n+\n+        input,\n+        button {\n             height: 100% !important;\n             font-size: small !important;\n         }\n-        .input-group{\n+\n+        .input-group {\n             width: 40vw !important;\n         }\n+\n         .table-inner {\n-          \n+\n             width: 100%;\n         }\n+\n         #myGrid {\n             /* height: calc(100% - 50px); */\n             width: 100%;\n         }\n+\n         #loading {\n             text-align: center;\n             padding: 20px;\n             font-size: 1.5rem;\n         }\n+\n         #resetFilters {\n             margin-bottom: 10px;\n         }\n-\n-\n     </style>\n </head>\n+\n <body>\n     <div class=\"table-wrapper\">\n         <div class=\"headerContainer\">\n             <div class=\"input-group\">\n                 <input type=\"number\" id=\"daysInput\" class=\"form-control\" placeholder=\"Введите количество дней\"\n                     aria-label=\"Введите количество дней от 15 до 45\" aria-describedby=\"basic-addon2\" min=\"15\" max=\"45\">\n                 <div class=\"input-group-append\">\n-                    <button class=\"btn btn-outline-secondary calculateReplenishment\" type=\"button\">Рассчитать пополнение (шт)</button>\n+                    <button class=\"btn btn-outline-secondary calculateReplenishment\" type=\"button\">Рассчитать пополнение\n+                        (шт)</button>\n                 </div>\n             </div>\n-            <div class=\"btn-wrapper\"> <button id=\"resetFilters\" class=\"btn btn-outline-secondary \">Сбросить все фильтры</button> </div>\n-            <div class=\"btn-wrapper\"> <button class=\"btn btn-outline-secondary deleteModify\" type=\"button\">Показать товар без модификаций</button></div>\n-            \n-           \n+            <div class=\"btn-wrapper\"> <button id=\"resetFilters\" class=\"btn btn-outline-secondary \">Сбросить все\n+                    фильтры</button> </div>\n+            <div class=\"btn-wrapper\"> <button class=\"btn btn-outline-secondary deleteModify\" type=\"button\">Показать\n+                    товар без модификаций</button></div>\n+\n+\n         </div>\n-        \n+\n         <div class=\"table-inner container mt-4\">\n             <div id=\"myGrid\" class=\"ag-theme-alpine\" style=\"height: 600px\"></div>\n             <div id=\"loading\" style=\"display: none;\">Загрузка...</div>\n         </div>\n     </div>\n \n     <script>\n-     // Определение столбцов и параметров сетки\n-const columnDefs = [\n-    { headerName: '№', valueGetter: 'node.rowIndex + 1', width: 60, sortable: false, filter: false },\n-    { headerName: 'Фото', field: 'photo', width: 100, cellRenderer: params => `<img src=\"${params.value}\">` },\n-    { headerName: 'Предмет', field: 'subjectName', width: 120 },\n-    { headerName: 'Номенклатура', field: 'nmID', width: 160 },\n-    { headerName: 'Размер', field: 'size', width: 120 },\n-    { headerName: 'Заказы 1м', field: 'orders1m', width: 150 },\n-    { headerName: 'Заказы 14 д', field: 'orders14d', width: 150 },\n-    // { headerName: 'График продаж за месяц', field: 'salesGraph', width: 250, cellRenderer: params => createSalesGraph(params.data.salesGraph) },\n-    // { headerName: 'Сравнение продаж (нед)', field: 'compareGraph', width: 250, cellRenderer: params => createCompareGraph(params.data.graph) },\n-    {\n-        headerName: 'Графики',\n-        field: 'graph',\n-        width: 300,\n-        cellRenderer: params => createToggleableGraph(params)\n-    },\n-    {\n-        headerName: 'Остаток (шт)',\n-        field: 'stock',\n-        width: 120,\n-        cellRenderer: function(params) {\n-            const value = params.value;\n-            let className = '';\n-            if (value >= 0 && value <= 1.99) {\n-                className = 'red-text';\n-            } else if (value >= 2 && value <= 5.99) {\n-                className = 'orange-text';\n-            } else if (value >= 6 && value <= 10.99) {\n-                className = 'yellow-text';\n-            } else if (value >= 11) {\n-                className = 'green-text';\n+        // Определение столбцов и параметров сетки\n+        const columnDefs = [{\n+                headerName: '№',\n+                valueGetter: 'node.rowIndex + 1',\n+                width: 60,\n+                sortable: false,\n+                filter: false\n+            },\n+            {\n+                headerName: 'Фото',\n+                field: 'photo',\n+                width: 100,\n+                cellRenderer: params => `<img src=\"${params.value}\">`\n+            },\n+            {\n+                headerName: 'Предмет',\n+                field: 'subjectName',\n+                width: 120\n+            },\n+            {\n+                headerName: 'Номенклатура',\n+                field: 'nmID',\n+                width: 160\n+            },\n+            {\n+                headerName: 'Размер',\n+                field: 'size',\n+                width: 120\n+            },\n+            {\n+                headerName: 'Заказы 1м',\n+                field: 'orders1m',\n+                width: 150\n+            },\n+            {\n+                headerName: 'Заказы 14 д',\n+                field: 'orders14d',\n+                width: 150\n+            },\n+            // { headerName: 'График продаж за месяц', field: 'salesGraph', width: 250, cellRenderer: params => createSalesGraph(params.data.salesGraph) },\n+            // { headerName: 'Сравнение продаж (нед)', field: 'compareGraph', width: 250, cellRenderer: params => createCompareGraph(params.data.graph) },\n+            {\n+                headerName: 'Графики',\n+                field: 'graph',\n+                width: 300,\n+                cellRenderer: params => createToggleableGraph(params)\n+            },\n+            {\n+                headerName: 'Остаток (шт)',\n+                field: 'stock',\n+                width: 120,\n+                cellRenderer: function (params) {\n+                    const value = params.value;\n+                    let className = '';\n+                    if (value >= 0 && value <= 1.99) {\n+                        className = 'red-text';\n+                    } else if (value >= 2 && value <= 5.99) {\n+                        className = 'orange-text';\n+                    } else if (value >= 6 && value <= 10.99) {\n+                        className = 'yellow-text';\n+                    } else if (value >= 11) {\n+                        className = 'green-text';\n+                    }\n+\n+                    return `<span class=\"${className}\">${value}</span>`;\n+                }\n+            },\n+            {\n+                headerName: 'Остаток (дн)',\n+                field: 'stockDays',\n+                width: 120,\n+                cellRenderer: function (params) {\n+                    const value = params.value;\n+                    let className = '';\n+                    if (value >= 0 && value <= 1.99) {\n+                        className = 'red-text';\n+                    } else if (value >= 2 && value <= 5.99) {\n+                        className = 'orange-text';\n+                    } else if (value >= 6 && value <= 10.99) {\n+                        className = 'yellow-text';\n+                    } else if (value >= 11) {\n+                        className = 'green-text';\n+                    }\n+\n+                    return `<span class=\"${className}\">${value}</span>`;\n+                }\n+            },\n+            {\n+                headerName: 'Пополнить (шт)',\n+                field: 'replenish',\n+                width: 120\n+            },\n+            {\n+                headerName: 'Артикул',\n+                field: 'vendorCode',\n+                width: 150,\n             }\n+        ];\n+        //переключаем графики\n+        function createToggleableGraph(params) {\n+            const container = document.createElement('div');\n+            let currentGraph = 'compareGraph';\n \n-            return `<span class=\"${className}\">${value}</span>`;\n-        }\n-    },\n-    {\n-        headerName: 'Остаток (дн)',\n-        field: 'stockDays',\n-        width: 120,\n-        cellRenderer: function(params) {\n-            const value = params.value;\n-            let className = '';\n-            if (value >= 0 && value <= 1.99) {\n-                className = 'red-text';\n-            } else if (value >= 2 && value <= 5.99) {\n-                className = 'orange-text';\n-            } else if (value >= 6 && value <= 10.99) {\n-                className = 'yellow-text';\n-            } else if (value >= 11) {\n-                className = 'green-text';\n+            function toggleGraph() {\n+                currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n+                const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n+                container.innerHTML = createGraphComponent(graphData);\n             }\n \n-            return `<span class=\"${className}\">${value}</span>`;\n-        }\n-    },\n-    { headerName: 'Пополнить (шт)', field: 'replenish',width: 120 },\n-    { headerName: 'Артикул', field: 'vendorCode', width: 150, }\n-];\n-//переключаем графики\n-function createToggleableGraph(params) {\n-    const container = document.createElement('div');\n-    let currentGraph = 'compareGraph'; \n+            function createGraphComponent(graphData) {\n+                if (currentGraph === 'compareGraph') {\n+                    return createCompareGraph(graphData);\n+                } else {\n+                    return createSalesGraph(graphData);\n+                }\n+            }\n \n-    function toggleGraph() {\n-        currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n-        const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n-        container.innerHTML = createGraphComponent(graphData);\n-    }\n+            container.innerHTML = createGraphComponent(params.data.graph);\n+            container.addEventListener('click', toggleGraph);\n \n-    function createGraphComponent(graphData) {\n-        if (currentGraph === 'compareGraph') {\n-            return createCompareGraph(graphData);\n-        } else {\n-            return createSalesGraph(graphData);\n+            return container;\n         }\n-    }\n \n-    container.innerHTML = createGraphComponent(params.data.graph);\n-    container.addEventListener('click', toggleGraph);\n \n-    return container;\n-}\n \n \n- \n+        const localeText = {\n+            // Русификация фильтров\n+            page: 'страница',\n+            more: 'ещё',\n+            to: 'к',\n+            of: 'из',\n+            next: 'следующий',\n+            last: 'последний',\n+            first: 'первый',\n+            previous: 'предыдущий',\n+            loadingOoo: 'Загрузка...',\n+            applyFilter: 'Применить фильтр...',\n+            equals: 'Равно',\n+            notEqual: 'Не равно',\n+            filterOoo: 'Фильтр...',\n+            contains: 'Содержит',\n+            notContains: 'Не содержит',\n+            startsWith: 'Начинается с',\n+            endsWith: 'Заканчивается на',\n+            andCondition: 'И',\n+            orCondition: 'Или'\n+        };\n \n-const localeText = {\n-    // Русификация фильтров\n-    page: 'страница',\n-    more: 'ещё',\n-    to: 'к',\n-    of: 'из',\n-    next: 'следующий',\n-    last: 'последний',\n-    first: 'первый',\n-    previous: 'предыдущий',\n-    loadingOoo: 'Загрузка...',\n-    applyFilter: 'Применить фильтр...',\n-    equals: 'Равно',\n-    notEqual: 'Не равно',\n-    filterOoo: 'Фильтр...',\n-    contains: 'Содержит',\n-    notContains: 'Не содержит',\n-    startsWith: 'Начинается с',\n-    endsWith: 'Заканчивается на',\n-    andCondition: 'И',\n-    orCondition: 'Или'\n-};\n \n \n+        const gridOptions = {\n+            enableCellTextSelection: true,\n+            columnDefs: columnDefs,\n+            defaultColDef: {\n+                sortable: true,\n+                filter: true,\n+                resizable: true\n+            },\n+            rowData: [],\n+            localeText: localeText,\n+            rowHeight: 120,\n+            getRowId: params => {\n+                const id = params.data.uniqueId;\n+                console.log('Row ID:', id, 'Data:', params);\n+                return id;\n+            }\n+        };\n \n-const gridOptions = {\n-    enableCellTextSelection: true,\n-    columnDefs: columnDefs,\n-    defaultColDef: {\n-        sortable: true,\n-        filter: true,\n-        resizable: true\n-    },\n-    rowData: [],\n-    localeText: localeText,\n-    rowHeight: 120,\n-    getRowId: params => {\n-        const id = params.data.uniqueId;\n-        console.log('Row ID:', id, 'Data:', params);\n-        return id;\n-    }\n-};\n \n+        // Функция для преобразования данных\n+        function transformData(data) {\n+            let transformedData = [];\n+            data.forEach(item => {\n+                item.allowed_sizes.forEach(size => {\n+                    let stock = item.stocks ? item.stocks[size] || 0 : 0;\n+                    let orders1m = item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n+                    let stockDays = orders1m !== 0 ? parseFloat((stock / orders1m).toFixed(2)) : 0;\n \n-// Функция для преобразования данных\n-function transformData(data) {\n-    let transformedData = [];\n-    data.forEach(item => {\n-        item.allowed_sizes.forEach(size => {\n-            let stock = item.stocks ? item.stocks[size] || 0 : 0;\n-            let orders1m = item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n-            let stockDays = orders1m !== 0 ? parseFloat((stock / orders1m).toFixed(2)) : 0;\n-\n-            // Создаем уникальный идентификатор на основе генератора\n-            let uniqueId = `${item.nmID}-${size}`;\n-            console.log('uniqueId в начале' , uniqueId);\n-            // console.log('Transformed uniqueId:', uniqueId);\n-            // console.log('item.graph :', item.graph );\n-            transformedData.push({\n-                uniqueId: uniqueId, // Добавляем уникальный идентификатор\n-                photo: item.photos ? item.photos[0][\"c516x688\"] : '',\n-                subjectName: item.subjectName,\n-                nmID: item.nmID,\n-                size: size,\n-                orders1m: orders1m,\n-                orders14d: item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0,\n-                salesGraph: item[\"30stat\"], // Данные для графика,\n-                graph: item.graph ,// Данные для сравнения графиков продаж\n-                stock: stock,\n-                stockDays: stockDays,\n-                replenish: '',\n-                vendorCode: item.vendorCode\n+                    // Создаем уникальный идентификатор на основе генератора\n+                    let uniqueId = `${item.nmID}-${size}`;\n+                    console.log('uniqueId в начале', uniqueId);\n+                    // console.log('Transformed uniqueId:', uniqueId);\n+                    // console.log('item.graph :', item.graph );\n+                    transformedData.push({\n+                        uniqueId: uniqueId, // Добавляем уникальный идентификатор\n+                        photo: item.photos ? item.photos[0][\"c516x688\"] : '',\n+                        subjectName: item.subjectName,\n+                        nmID: item.nmID,\n+                        size: size,\n+                        orders1m: orders1m,\n+                        orders14d: item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0,\n+                        salesGraph: item[\"30stat\"], // Данные для графика,\n+                        graph: item.graph, // Данные для сравнения графиков продаж\n+                        stock: stock,\n+                        stockDays: stockDays,\n+                        replenish: '',\n+                        vendorCode: item.vendorCode\n+                    });\n+                });\n             });\n-        });\n-    });\n-    return transformedData;\n-}\n+            return transformedData;\n+        }\n \n-// Функция для преобразования данных без размеров\n-function transformDataWithoutSizes(data) {\n-    let transformedData = [];\n-    data.forEach(item => {\n-        let totalStock = 0;\n-        let totalOrders1m = 0;\n-        let totalOrders14d = 0;\n-        \n-         console.log('item.graph ',item.graph);\n+        // Функция для преобразования данных без размеров\n+        function transformDataWithoutSizes(data) {\n+            let transformedData = [];\n+            data.forEach(item => {\n+                let totalStock = 0;\n+                let totalOrders1m = 0;\n+                let totalOrders14d = 0;\n \n-        item.allowed_sizes.forEach(size => {\n-            totalStock += item.stocks ? item.stocks[size] || 0 : 0;\n-            totalOrders1m += item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n-            totalOrders14d += item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0;\n-        });\n+                console.log('item.graph ', item.graph);\n \n-        let stockDays = totalOrders1m !== 0 ? parseFloat((totalStock / totalOrders1m).toFixed(2)) : 0;\n-let orders1m  = parseFloat(totalOrders1m.toFixed(2))\n-let orders14d  = parseFloat(totalOrders14d.toFixed(2))\n-        let uniqueId = item.nmID;\n-        console.log('uniqueId во второй' , uniqueId);\n-        transformedData.push({\n-            uniqueId: uniqueId, // Добавляем уникальный идентификатор\n-            photo: item.photos ? item.photos[0].c246x328 : '',\n-            subjectName: item.subjectName,\n-            nmID: item.nmID,\n-            size: '-', // Прочерк для размера\n-            orders1m: orders1m,\n-            orders14d: orders14d,\n-            salesGraph: item[\"30stat\"],\n-            compareGraph: item.graph, \n-            stock: totalStock,\n-            stockDays: stockDays, //  добавить логику для расчета\n-            replenish: '',\n-            vendorCode: item.vendorCode\n-        });\n-    });\n-    return transformedData;\n-}\n+                item.allowed_sizes.forEach(size => {\n+                    totalStock += item.stocks ? item.stocks[size] || 0 : 0;\n+                    totalOrders1m += item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n+                    totalOrders14d += item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0;\n+                });\n \n-// Функция для загрузки данных и отображения таблицы\n-function fetchData() {\n-    $.getJSON('data.json', function (response) {\n-        const originalData = response.data;\n-        const rowData = transformData(originalData);\n-        gridOptions.api.applyTransaction({ add: rowData });\n-    }).fail(function () {\n-        console.error('Ошибка при загрузке данных');\n-    });\n-}\n+                let stockDays = totalOrders1m !== 0 ? parseFloat((totalStock / totalOrders1m).toFixed(2)) : 0;\n+                let orders1m = parseFloat(totalOrders1m.toFixed(2))\n+                let orders14d = parseFloat(totalOrders14d.toFixed(2))\n+                let uniqueId = item.nmID;\n+                console.log('uniqueId во второй', uniqueId);\n+                transformedData.push({\n+                    uniqueId: uniqueId, // Добавляем уникальный идентификатор\n+                    photo: item.photos ? item.photos[0].c246x328 : '',\n+                    subjectName: item.subjectName,\n+                    nmID: item.nmID,\n+                    size: '-', // Прочерк для размера\n+                    orders1m: orders1m,\n+                    orders14d: orders14d,\n+                    salesGraph: item[\"30stat\"],\n+                    compareGraph: item.graph,\n+                    stock: totalStock,\n+                    stockDays: stockDays, //  добавить логику для расчета\n+                    replenish: '',\n+                    vendorCode: item.vendorCode\n+                });\n+            });\n+            return transformedData;\n+        }\n \n-// График на 30 дней\n-function createSalesGraph(statData) {\n-    const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n-    setTimeout(() => {\n-        const ctx = document.getElementById(canvasId).getContext('2d');\n-        new Chart(ctx, {\n-            type: 'line',\n-            data: {\n-                labels: Object.keys(statData),\n-                datasets: [{\n-                    label: 'Продажи',\n-                    data: Object.values(statData),\n-                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n-                    borderColor: 'rgba(75, 192, 192, 1)',\n-                    borderWidth: 1,\n-                    pointRadius: 0,\n-                    borderWidth: 1, // Устанавливаем толщину линии\n-                    pointHoverRadius: 5, // Радиус точки при наведении\n-                }]\n-            },\n-            options: {\n-                responsive: true,\n-                maintainAspectRatio: false,\n-                scales: {\n-                    x: {\n-                        display: true, // Отображение оси X\n-                        ticks: {\n-                            display: false // Скрываем метки по оси X\n-                        }\n+        // Функция для загрузки данных и отображения таблицы\n+        function fetchData() {\n+            $.getJSON('data.json', function (response) {\n+                const originalData = response.data;\n+                const rowData = transformData(originalData);\n+                gridOptions.api.applyTransaction({\n+                    add: rowData\n+                });\n+            }).fail(function () {\n+                console.error('Ошибка при загрузке данных');\n+            });\n+        }\n+\n+        // График на 30 дней\n+        function createSalesGraph(statData) {\n+            const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n+            setTimeout(() => {\n+                const ctx = document.getElementById(canvasId).getContext('2d');\n+                new Chart(ctx, {\n+                    type: 'line',\n+                    data: {\n+                        labels: Object.keys(statData),\n+                        datasets: [{\n+                            label: 'Продажи',\n+                            data: Object.values(statData),\n+                            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n+                            borderColor: 'rgba(75, 192, 192, 1)',\n+                            borderWidth: 1,\n+                            pointRadius: 0,\n+                            borderWidth: 1, // Устанавливаем толщину линии\n+                            pointHoverRadius: 5, // Радиус точки при наведении\n+                        }]\n                     },\n-                    y: {\n-                        display: true, // Отображение оси Y\n-                        ticks: {\n-                            display: false // Скрываем метки по оси Y\n-                        }\n-                    }\n-                },\n-                plugins: {\n-                    legend: {\n-                        display: false // Убираем легенду\n-                    },\n-                    tooltip: {\n-                        callbacks: {\n-                            label: function (context) {\n-                                return `Дата: ${context.label}, Количество: ${context.parsed.y}`;\n+                    options: {\n+                        responsive: true,\n+                        maintainAspectRatio: false,\n+                        scales: {\n+                            x: {\n+                                display: true, // Отображение оси X\n+                                ticks: {\n+                                    display: false // Скрываем метки по оси X\n+                                }\n+                            },\n+                            y: {\n+                                display: true, // Отображение оси Y\n+                                ticks: {\n+                                    display: false // Скрываем метки по оси Y\n+                                }\n                             }\n+                        },\n+                        plugins: {\n+                            legend: {\n+                                display: false // Убираем легенду\n+                            },\n+                            tooltip: {\n+                                callbacks: {\n+                                    label: function (context) {\n+                                        return `Дата: ${context.label}, Количество: ${context.parsed.y}`;\n+                                    }\n+                                }\n+                            },\n+                            hover: {\n+                                mode: 'index',\n+                                intersect: false,\n+                            }\n+                        },\n+                        interaction: {\n+                            mode: 'index',\n+                            intersect: false,\n+                        },\n+                        elements: {\n+                            point: {\n+                                radius: 0, // Скрываем точки\n+                                hoverRadius: 5, // Радиус точки при наведении\n+                                hitRadius: 10, // Радиус области взаимодействия точки\n+                            }\n                         }\n-                    },\n-                    hover: {\n-                        mode: 'index',\n-                        intersect: false,\n                     }\n-                },\n-                interaction: {\n-                    mode: 'index',\n-                    intersect: false,\n-                },\n-                elements: {\n-                    point: {\n-                        radius: 0, // Скрываем точки\n-                        hoverRadius: 5, // Радиус точки при наведении\n-                        hitRadius: 10, // Радиус области взаимодействия точки\n-                    }\n-                }\n-            }\n-        });\n-    }, 100);\n-    return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n-}\n+                });\n+            }, 100);\n+            return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n+        }\n \n-function createCompareGraph(graphData) {\n-    const canvasId = `compare-chart-${Math.random().toString(36).substr(2, 9)}`;\n-    const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]; // индексы этих дней: 0,1,2,3,4,5,6\n-    const currentDate = new Date();\n-    const currentDayIndex = currentDate.getDay(); // нашли индекс текущего дня\n+        function createCompareGraph(graphData) {\n+            const canvasId = `compare-chart-${Math.random().toString(36).substr(2, 9)}`;\n+            const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]; // индексы этих дней: 0,1,2,3,4,5,6\n+            const currentDate = new Date();\n+            const currentDayIndex = currentDate.getDay(); // нашли индекс текущего дня\n \n-    // меняем массив дней недели так, чтобы справа был текущий день недели\n-    const labels = [...daysOfWeek.slice(currentDayIndex + 1), ...daysOfWeek.slice(0, currentDayIndex + 1)];\n+            // меняем массив дней недели так, чтобы справа был текущий день недели\n+            const labels = [...daysOfWeek.slice(currentDayIndex + 1), ...daysOfWeek.slice(0, currentDayIndex + 1)];\n \n-    const currentWeekData = new Array(7).fill(0); // Продажи текущей недели\n-    const previousWeekData = new Array(7).fill(0); // Продажи предыдущей \n+            const currentWeekData = new Array(7).fill(0); // Продажи текущей недели\n+            const previousWeekData = new Array(7).fill(0); // Продажи предыдущей \n \n-    // меняем строку даты в объект Date\n-    const parseDate = (dateString) => {\n-        const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n-        return new Date(`20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n-    };\n+            // меняем строку даты в объект Date\n+            const parseDate = (dateString) => {\n+                const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n+                return new Date(\n+                `20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n+            };\n \n-    // Функция для получения индекса дня недели\n-    const getWeekdayIndex = (date) => {\n-        return date.getDay();\n-    };\n+            // Функция для получения индекса дня недели\n+            const getWeekdayIndex = (date) => {\n+                return date.getDay();\n+            };\n \n-    // Заполняем данные продаж для текущей и предыдущей недели\n-    for (const [dateString, count] of Object.entries(graphData)) {\n-        const date = parseDate(dateString);\n-        const dayDiff = Math.floor((currentDate - date) / (1000 * 60 * 60 * 24));\n-        if (dayDiff >= 0 && dayDiff < 7) {\n-            currentWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n-        } else if (dayDiff >= 7 && dayDiff < 14) {\n-            previousWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n-        }\n-    }\n+            // Заполняем данные продаж для текущей и предыдущей недели\n+            for (const [dateString, count] of Object.entries(graphData)) {\n+                const date = parseDate(dateString);\n+                const dayDiff = Math.floor((currentDate - date) / (1000 * 60 * 60 * 24));\n+                if (dayDiff >= 0 && dayDiff < 7) {\n+                    currentWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n+                } else if (dayDiff >= 7 && dayDiff < 14) {\n+                    previousWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n+                }\n+            }\n \n-    setTimeout(() => {\n-        const ctx = document.getElementById(canvasId).getContext('2d');\n-        new Chart(ctx, {\n-            type: 'bar',\n-            data: {\n-                labels: labels,\n-                datasets: [{\n-                    label: 'Продажи предыдущей недели', // убрал это обозначение\n-                    data: previousWeekData,\n-                    backgroundColor: 'rgba(75, 192, 192, 0.6)',\n-                    borderColor: 'rgba(75, 192, 192, 1)',\n-                    borderWidth: 1\n-                }, {\n-                    label: 'Продажи текущей недели', // убрал это обозначение\n-                    data: currentWeekData,\n-                    backgroundColor: 'rgba(153, 102, 255, 0.6)',\n-                    borderColor: 'rgba(153, 102, 255, 1)',\n-                    borderWidth: 1\n-                }]\n-            },\n-            options: {\n-                scales: {\n-                    y: {\n-                        display: false // Скрыть ось Y\n+            setTimeout(() => {\n+                const ctx = document.getElementById(canvasId).getContext('2d');\n+                new Chart(ctx, {\n+                    type: 'bar',\n+                    data: {\n+                        labels: labels,\n+                        datasets: [{\n+                            label: 'Продажи предыдущей недели', // убрал это обозначение\n+                            data: previousWeekData,\n+                            backgroundColor: 'rgba(75, 192, 192, 0.6)',\n+                            borderColor: 'rgba(75, 192, 192, 1)',\n+                            borderWidth: 1\n+                        }, {\n+                            label: 'Продажи текущей недели', // убрал это обозначение\n+                            data: currentWeekData,\n+                            backgroundColor: 'rgba(153, 102, 255, 0.6)',\n+                            borderColor: 'rgba(153, 102, 255, 1)',\n+                            borderWidth: 1\n+                        }]\n                     },\n-                    x: {\n-                        display: true,\n-                        ticks: {\n-                            color: 'grey' // Цвет текста на оси X\n-                        }\n-                    }\n-                },\n-                plugins: {\n-                    legend: {\n-                        display: false // Скрыть легенду\n-                    },\n-                    tooltip: {\n-                        enabled: true,\n-                        callbacks: {\n-                            label: function (tooltipItem) {\n-                                let label = tooltipItem.dataset.label || '';\n-                                if (label) {\n-                                    label += ': ';\n+                    options: {\n+                        scales: {\n+                            y: {\n+                                display: false // Скрыть ось Y\n+                            },\n+                            x: {\n+                                display: true,\n+                                ticks: {\n+                                    color: 'grey' // Цвет текста на оси X\n                                 }\n-                                label += tooltipItem.raw.toFixed(2);\n-                                return label;\n                             }\n-                        }\n+                        },\n+                        plugins: {\n+                            legend: {\n+                                display: false // Скрыть легенду\n+                            },\n+                            tooltip: {\n+                                enabled: true,\n+                                callbacks: {\n+                                    label: function (tooltipItem) {\n+                                        let label = tooltipItem.dataset.label || '';\n+                                        if (label) {\n+                                            label += ': ';\n+                                        }\n+                                        label += tooltipItem.raw.toFixed(2);\n+                                        return label;\n+                                    }\n+                                }\n+                            }\n+                        },\n+                        maintainAspectRatio: false,\n+                        responsive: true\n                     }\n-                },\n-                maintainAspectRatio: false,\n-                responsive: true\n+                });\n+            }, 100);\n+\n+            return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n+        }\n+\n+\n+        // Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n+        document.querySelector('.deleteModify').addEventListener('click', function () {\n+            if ($(this).text() === \"Показать товар без модификаций\") {\n+                $(this).text(\"Показать модификации\");\n+                $.getJSON('data.json', function (response) {\n+                    const originalData = response.data;\n+                    const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n+\n+                    // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n+                    const nodesToRemove = [];\n+                    console.log('nodesToRemove: ', nodesToRemove);\n+                    gridOptions.api.forEachNode(node => {\n+                        nodesToRemove.push(node);\n+                    });\n+\n+                    gridOptions.api.applyTransaction({\n+                        remove: nodesToRemove,\n+                        add: rowDataWithoutSizes\n+                    });\n+                }).fail(function () {\n+                    console.error('Ошибка при загрузке данных');\n+                });\n+\n+            } else if ($(this).text() === \"Показать модификации\") {\n+                $(this).text(\"Показать товар без модификации\");\n+                //  // Загружаем и отображаем модификации\n+                //  $.getJSON('data.json', function (response) {\n+                //     const originalData = response.data;\n+                //     const modifiedData = transformData(originalData);\n+\n+                //     gridOptions.api.applyTransaction({\n+                //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n+                //         add: modifiedData\n+                //     });\n+                // }).fail(function () {\n+                //     console.error('Ошибка при загрузке данных');\n+                // });\n+                location.reload()\n             }\n+\n         });\n-    }, 100);\n \n-    return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n-}\n-     \n \n-// Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n-document.querySelector('.deleteModify').addEventListener('click', function () {\n-    if ($(this).text() === \"Показать товар без модификаций\") {   \n-        $(this).text(\"Показать модификации\");   \n-        $.getJSON('data.json', function (response) {\n-        const originalData = response.data;\n-        const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n \n-        // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n-        const nodesToRemove = [];\n-        console.log('nodesToRemove: ',nodesToRemove);\n-        gridOptions.api.forEachNode(node => {\n-            nodesToRemove.push(node);\n+        // Добавление события для кнопки сброса всех фильтров\n+        document.querySelector('#resetFilters').addEventListener('click', function () {\n+            gridOptions.api.setFilterModel(null);\n         });\n \n-        gridOptions.api.applyTransaction({\n-            remove: nodesToRemove,\n-            add: rowDataWithoutSizes\n-        });\n-    }).fail(function () {\n-        console.error('Ошибка при загрузке данных');\n-    });\n-       \n-    } else if ($(this).text() === \"Показать модификации\") {\n-         $(this).text(\"Показать товар без модификации\");      \n-        //  // Загружаем и отображаем модификации\n-        //  $.getJSON('data.json', function (response) {\n-        //     const originalData = response.data;\n-        //     const modifiedData = transformData(originalData);\n \n-        //     gridOptions.api.applyTransaction({\n-        //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n-        //         add: modifiedData\n-        //     });\n-        // }).fail(function () {\n-        //     console.error('Ошибка при загрузке данных');\n-        // });\n-        location.reload()\n-    }\n-    \n-});\n+        // Обработчик кнопки \"Рассчитать пополнение (шт)\"\n+        document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n+            const daysInputElement = document.querySelector('#daysInput');\n+            const daysInput = daysInputElement.value;\n \n+            if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n+                alert('Введите число в диапазоне от 15 до 45');\n+            }\n \n+            // Проверяем, что daysInput не пустой и является числом\n+            if (daysInput && !isNaN(daysInput)) {\n+                // Рассчитываем replenish для каждой строки\n+                gridOptions.api.forEachNode(rowNode => {\n+                    const orders1m = rowNode.data.orders1m;\n+                    const stockDays = rowNode.data.stockDays;\n \n-// Добавление события для кнопки сброса всех фильтров\n-document.querySelector('#resetFilters').addEventListener('click', function() {\n-        gridOptions.api.setFilterModel(null);\n-    });\n- \n- \n-// Обработчик кнопки \"Рассчитать пополнение (шт)\"\n-document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n-    const daysInputElement = document.querySelector('#daysInput');\n-    const daysInput = daysInputElement.value;\n+                    if (orders1m !== 0 && stockDays !== 0) {\n+                        let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n \n-    if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n-        alert('Введите число в диапазоне от 15 до 45');\n-    } \n+                        // Обновляем данные в текущей строке\n+                        rowNode.setDataValue('replenish', replenish);\n+                    }\n+                });\n \n-    // Проверяем, что daysInput не пустой и является числом\n-    if (daysInput && !isNaN(daysInput)) {\n-        // Рассчитываем replenish для каждой строки\n-        gridOptions.api.forEachNode(rowNode => {\n-            const orders1m = rowNode.data.orders1m;\n-            const stockDays = rowNode.data.stockDays;\n-\n-            if (orders1m !== 0 && stockDays !== 0) {\n-                let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n-\n-                // Обновляем данные в текущей строке\n-                rowNode.setDataValue('replenish', replenish);\n+                // Очищаем значение инпута после выполнения расчетов\n+                daysInputElement.value = '';\n+            } else {\n+                console.error('Введите корректное значение для количества дней');\n             }\n         });\n \n-        // Очищаем значение инпута после выполнения расчетов\n-        daysInputElement.value = '';\n-    } else {\n-        console.error('Введите корректное значение для количества дней');\n-    }\n-});\n \n-    \n-document.addEventListener('DOMContentLoaded', function () {\n-    const gridDiv = document.querySelector('#myGrid');\n-    new agGrid.Grid(gridDiv, gridOptions);\n+        document.addEventListener('DOMContentLoaded', function () {\n+            const gridDiv = document.querySelector('#myGrid');\n+            new agGrid.Grid(gridDiv, gridOptions);\n \n-    fetchData();\n+            fetchData();\n \n-    \n-    \n-});\n \n \n+        });\n     </script>\n </body>\n-</html>\n+\n+</html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720112102763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n <!DOCTYPE html>\n <html lang=\"en\">\n-\n <head>\n     <meta charset=\"UTF-8\">\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n     <title>Document</title>\n@@ -14,638 +13,580 @@\n     <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n     <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n     <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n     <style>\n-        img {\n+        img{\n             height: 120px;\n             padding: 2%;\n         }\n-\n         .red-text {\n-            background-color: red;\n-            color: white;\n-            /* белый текст на красном фоне */\n-            padding: 2px 5px;\n-            /* отступы вокруг текста */\n-            border-radius: 3px;\n-            /* скругление углов */\n-        }\n+    background-color: red;\n+    color: white; /* белый текст на красном фоне */\n+    padding: 2px 5px; /* отступы вокруг текста */\n+    border-radius: 3px; /* скругление углов */\n+}\n \n-        .orange-text {\n-            background-color: orange;\n-            color: black;\n-            /* черный текст на оранжевом фоне */\n-            padding: 2px 5px;\n-            border-radius: 3px;\n-        }\n+.orange-text {\n+    background-color: orange;\n+    color: black; /* черный текст на оранжевом фоне */\n+    padding: 2px 5px;\n+    border-radius: 3px;\n+}\n \n-        .yellow-text {\n-            background-color: yellow;\n-            color: black;\n-            padding: 2px 5px;\n-            border-radius: 3px;\n-        }\n+.yellow-text {\n+    background-color: yellow;\n+    color: black;\n+    padding: 2px 5px;\n+    border-radius: 3px;\n+}\n \n-        .green-text {\n-            background-color: green;\n-            color: white;\n-            padding: 2px 5px;\n-            border-radius: 3px;\n-        }\n-\n-        .table-wrapper {\n+.green-text {\n+    background-color: green;\n+    color: white;\n+    padding: 2px 5px;\n+    border-radius: 3px;\n+}\n+.table-wrapper {\n             display: flex;\n             flex-direction: column;\n             height: 100vh;\n             padding: 20px;\n             width: 100vw;\n             align-items: center;\n         }\n-\n         .headerContainer {\n             display: flex;\n             justify-content: space-between;\n             align-items: center;\n             margin-bottom: 15px;\n             width: 80vw;\n         }\n-\n-        .input-group,\n-        .btn-wrapper {\n+        .input-group,.btn-wrapper{\n             height: 50px;\n         }\n-\n-        input,\n-        button {\n+        input, button{\n             height: 100% !important;\n             font-size: small !important;\n         }\n-\n-        .input-group {\n+        .input-group{\n             width: 40vw !important;\n         }\n-\n         .table-inner {\n-\n+          \n             width: 100%;\n         }\n-\n         #myGrid {\n             /* height: calc(100% - 50px); */\n             width: 100%;\n         }\n-\n         #loading {\n             text-align: center;\n             padding: 20px;\n             font-size: 1.5rem;\n         }\n-\n         #resetFilters {\n             margin-bottom: 10px;\n         }\n+\n+\n     </style>\n </head>\n-\n <body>\n     <div class=\"table-wrapper\">\n         <div class=\"headerContainer\">\n             <div class=\"input-group\">\n                 <input type=\"number\" id=\"daysInput\" class=\"form-control\" placeholder=\"Введите количество дней\"\n                     aria-label=\"Введите количество дней от 15 до 45\" aria-describedby=\"basic-addon2\" min=\"15\" max=\"45\">\n                 <div class=\"input-group-append\">\n-                    <button class=\"btn btn-outline-secondary calculateReplenishment\" type=\"button\">Рассчитать пополнение\n-                        (шт)</button>\n+                    <button class=\"btn btn-outline-secondary calculateReplenishment\" type=\"button\">Рассчитать пополнение (шт)</button>\n                 </div>\n             </div>\n-            <div class=\"btn-wrapper\"> <button id=\"resetFilters\" class=\"btn btn-outline-secondary \">Сбросить все\n-                    фильтры</button> </div>\n-            <div class=\"btn-wrapper\"> <button class=\"btn btn-outline-secondary deleteModify\" type=\"button\">Показать\n-                    товар без модификаций</button></div>\n-\n-\n+            <div class=\"btn-wrapper\"> <button id=\"resetFilters\" class=\"btn btn-outline-secondary \">Сбросить все фильтры</button> </div>\n+            <div class=\"btn-wrapper\"> <button class=\"btn btn-outline-secondary deleteModify\" type=\"button\">Показать товар без модификаций</button></div>\n+            \n+           \n         </div>\n-\n+        \n         <div class=\"table-inner container mt-4\">\n             <div id=\"myGrid\" class=\"ag-theme-alpine\" style=\"height: 600px\"></div>\n             <div id=\"loading\" style=\"display: none;\">Загрузка...</div>\n         </div>\n     </div>\n \n     <script>\n-        // Определение столбцов и параметров сетки\n-        const columnDefs = [{\n-                headerName: '№',\n-                valueGetter: 'node.rowIndex + 1',\n-                width: 60,\n-                sortable: false,\n-                filter: false\n-            },\n-            {\n-                headerName: 'Фото',\n-                field: 'photo',\n-                width: 100,\n-                cellRenderer: params => `<img src=\"${params.value}\">`\n-            },\n-            {\n-                headerName: 'Предмет',\n-                field: 'subjectName',\n-                width: 120\n-            },\n-            {\n-                headerName: 'Номенклатура',\n-                field: 'nmID',\n-                width: 160\n-            },\n-            {\n-                headerName: 'Размер',\n-                field: 'size',\n-                width: 120\n-            },\n-            {\n-                headerName: 'Заказы 1м',\n-                field: 'orders1m',\n-                width: 150\n-            },\n-            {\n-                headerName: 'Заказы 14 д',\n-                field: 'orders14d',\n-                width: 150\n-            },\n-            // { headerName: 'График продаж за месяц', field: 'salesGraph', width: 250, cellRenderer: params => createSalesGraph(params.data.salesGraph) },\n-            // { headerName: 'Сравнение продаж (нед)', field: 'compareGraph', width: 250, cellRenderer: params => createCompareGraph(params.data.graph) },\n-            {\n-                headerName: 'Графики',\n-                field: 'graph',\n-                width: 300,\n-                cellRenderer: params => createToggleableGraph(params)\n-            },\n-            {\n-                headerName: 'Остаток (шт)',\n-                field: 'stock',\n-                width: 120,\n-                cellRenderer: function (params) {\n-                    const value = params.value;\n-                    let className = '';\n-                    if (value >= 0 && value <= 1.99) {\n-                        className = 'red-text';\n-                    } else if (value >= 2 && value <= 5.99) {\n-                        className = 'orange-text';\n-                    } else if (value >= 6 && value <= 10.99) {\n-                        className = 'yellow-text';\n-                    } else if (value >= 11) {\n-                        className = 'green-text';\n-                    }\n-\n-                    return `<span class=\"${className}\">${value}</span>`;\n-                }\n-            },\n-            {\n-                headerName: 'Остаток (дн)',\n-                field: 'stockDays',\n-                width: 120,\n-                cellRenderer: function (params) {\n-                    const value = params.value;\n-                    let className = '';\n-                    if (value >= 0 && value <= 1.99) {\n-                        className = 'red-text';\n-                    } else if (value >= 2 && value <= 5.99) {\n-                        className = 'orange-text';\n-                    } else if (value >= 6 && value <= 10.99) {\n-                        className = 'yellow-text';\n-                    } else if (value >= 11) {\n-                        className = 'green-text';\n-                    }\n-\n-                    return `<span class=\"${className}\">${value}</span>`;\n-                }\n-            },\n-            {\n-                headerName: 'Пополнить (шт)',\n-                field: 'replenish',\n-                width: 120\n-            },\n-            {\n-                headerName: 'Артикул',\n-                field: 'vendorCode',\n-                width: 150,\n+     // Определение столбцов и параметров сетки\n+const columnDefs = [\n+    { headerName: '№', valueGetter: 'node.rowIndex + 1', width: 60, sortable: false, filter: false },\n+    { headerName: 'Фото', field: 'photo', width: 100, cellRenderer: params => `<img src=\"${params.value}\">` },\n+    { headerName: 'Предмет', field: 'subjectName', width: 120 },\n+    { headerName: 'Номенклатура', field: 'nmID', width: 160 },\n+    { headerName: 'Размер', field: 'size', width: 120 },\n+    { headerName: 'Заказы 1м', field: 'orders1m', width: 150 },\n+    { headerName: 'Заказы 14 д', field: 'orders14d', width: 150 },\n+    // { headerName: 'График продаж за месяц', field: 'salesGraph', width: 250, cellRenderer: params => createSalesGraph(params.data.salesGraph) },\n+    // { headerName: 'Сравнение продаж (нед)', field: 'compareGraph', width: 250, cellRenderer: params => createCompareGraph(params.data.graph) },\n+    {\n+        headerName: 'Графики',\n+        field: 'graph',\n+        width: 300,\n+        cellRenderer: params => createToggleableGraph(params)\n+    },\n+    {\n+        headerName: 'Остаток (шт)',\n+        field: 'stock',\n+        width: 120,\n+        cellRenderer: function(params) {\n+            const value = params.value;\n+            let className = '';\n+            if (value >= 0 && value <= 1.99) {\n+                className = 'red-text';\n+            } else if (value >= 2 && value <= 5.99) {\n+                className = 'orange-text';\n+            } else if (value >= 6 && value <= 10.99) {\n+                className = 'yellow-text';\n+            } else if (value >= 11) {\n+                className = 'green-text';\n             }\n-        ];\n-        //переключаем графики\n-        function createToggleableGraph(params) {\n-            const container = document.createElement('div');\n-            let currentGraph = 'compareGraph';\n \n-            function toggleGraph() {\n-                currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n-                const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n-                container.innerHTML = createGraphComponent(graphData);\n+            return `<span class=\"${className}\">${value}</span>`;\n+        }\n+    },\n+    {\n+        headerName: 'Остаток (дн)',\n+        field: 'stockDays',\n+        width: 120,\n+        cellRenderer: function(params) {\n+            const value = params.value;\n+            let className = '';\n+            if (value >= 0 && value <= 1.99) {\n+                className = 'red-text';\n+            } else if (value >= 2 && value <= 5.99) {\n+                className = 'orange-text';\n+            } else if (value >= 6 && value <= 10.99) {\n+                className = 'yellow-text';\n+            } else if (value >= 11) {\n+                className = 'green-text';\n             }\n \n-            function createGraphComponent(graphData) {\n-                if (currentGraph === 'compareGraph') {\n-                    return createCompareGraph(graphData);\n-                } else {\n-                    return createSalesGraph(graphData);\n-                }\n-            }\n+            return `<span class=\"${className}\">${value}</span>`;\n+        }\n+    },\n+    { headerName: 'Пополнить (шт)', field: 'replenish',width: 120 },\n+    { headerName: 'Артикул', field: 'vendorCode', width: 150, }\n+];\n+//переключаем графики\n+function createToggleableGraph(params) {\n+    const container = document.createElement('div');\n+    let currentGraph = 'compareGraph'; \n \n-            container.innerHTML = createGraphComponent(params.data.graph);\n-            container.addEventListener('click', toggleGraph);\n+    function toggleGraph() {\n+        currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n+        const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n+        container.innerHTML = createGraphComponent(graphData);\n+    }\n \n-            return container;\n+    function createGraphComponent(graphData) {\n+        if (currentGraph === 'compareGraph') {\n+            return createCompareGraph(graphData);\n+        } else {\n+            return createSalesGraph(graphData);\n         }\n+    }\n \n+    container.innerHTML = createGraphComponent(params.data.graph);\n+    container.addEventListener('click', toggleGraph);\n \n+    return container;\n+}\n \n \n-        const localeText = {\n-            // Русификация фильтров\n-            page: 'страница',\n-            more: 'ещё',\n-            to: 'к',\n-            of: 'из',\n-            next: 'следующий',\n-            last: 'последний',\n-            first: 'первый',\n-            previous: 'предыдущий',\n-            loadingOoo: 'Загрузка...',\n-            applyFilter: 'Применить фильтр...',\n-            equals: 'Равно',\n-            notEqual: 'Не равно',\n-            filterOoo: 'Фильтр...',\n-            contains: 'Содержит',\n-            notContains: 'Не содержит',\n-            startsWith: 'Начинается с',\n-            endsWith: 'Заканчивается на',\n-            andCondition: 'И',\n-            orCondition: 'Или'\n-        };\n+ \n \n+const localeText = {\n+    // Русификация фильтров\n+    page: 'страница',\n+    more: 'ещё',\n+    to: 'к',\n+    of: 'из',\n+    next: 'следующий',\n+    last: 'последний',\n+    first: 'первый',\n+    previous: 'предыдущий',\n+    loadingOoo: 'Загрузка...',\n+    applyFilter: 'Применить фильтр...',\n+    equals: 'Равно',\n+    notEqual: 'Не равно',\n+    filterOoo: 'Фильтр...',\n+    contains: 'Содержит',\n+    notContains: 'Не содержит',\n+    startsWith: 'Начинается с',\n+    endsWith: 'Заканчивается на',\n+    andCondition: 'И',\n+    orCondition: 'Или'\n+};\n \n \n-        const gridOptions = {\n-            enableCellTextSelection: true,\n-            columnDefs: columnDefs,\n-            defaultColDef: {\n-                sortable: true,\n-                filter: true,\n-                resizable: true\n-            },\n-            rowData: [],\n-            localeText: localeText,\n-            rowHeight: 120,\n-            getRowId: params => {\n-                const id = params.data.uniqueId;\n-                console.log('Row ID:', id, 'Data:', params);\n-                return id;\n-            }\n-        };\n \n+const gridOptions = {\n+    enableCellTextSelection: true,\n+    columnDefs: columnDefs,\n+    defaultColDef: {\n+        sortable: true,\n+        filter: true,\n+        resizable: true\n+    },\n+    rowData: [],\n+    localeText: localeText,\n+    rowHeight: 120,\n+    getRowId: params => {\n+        const id = params.data.uniqueId;\n+        console.log('Row ID:', id, 'Data:', params);\n+        return id;\n+    }\n+};\n \n-        // Функция для преобразования данных\n-        function transformData(data) {\n-            let transformedData = [];\n-            data.forEach(item => {\n-                item.allowed_sizes.forEach(size => {\n-                    let stock = item.stocks ? item.stocks[size] || 0 : 0;\n-                    let orders1m = item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n-                    let stockDays = orders1m !== 0 ? parseFloat((stock / orders1m).toFixed(2)) : 0;\n \n-                    // Создаем уникальный идентификатор на основе генератора\n-                    let uniqueId = `${item.nmID}-${size}`;\n-                    console.log('uniqueId в начале', uniqueId);\n-                    // console.log('Transformed uniqueId:', uniqueId);\n-                    // console.log('item.graph :', item.graph );\n-                    transformedData.push({\n-                        uniqueId: uniqueId, // Добавляем уникальный идентификатор\n-                        photo: item.photos ? item.photos[0][\"c516x688\"] : '',\n-                        subjectName: item.subjectName,\n-                        nmID: item.nmID,\n-                        size: size,\n-                        orders1m: orders1m,\n-                        orders14d: item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0,\n-                        salesGraph: item[\"30stat\"], // Данные для графика,\n-                        graph: item.graph, // Данные для сравнения графиков продаж\n-                        stock: stock,\n-                        stockDays: stockDays,\n-                        replenish: '',\n-                        vendorCode: item.vendorCode\n-                    });\n-                });\n+// Функция для преобразования данных\n+function transformData(data) {\n+    let transformedData = [];\n+    data.forEach(item => {\n+        item.allowed_sizes.forEach(size => {\n+            let stock = item.stocks ? item.stocks[size] || 0 : 0;\n+            let orders1m = item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n+            let stockDays = orders1m !== 0 ? parseFloat((stock / orders1m).toFixed(2)) : 0;\n+\n+            // Создаем уникальный идентификатор на основе генератора\n+            let uniqueId = `${item.nmID}-${size}`;\n+            console.log('uniqueId в начале' , uniqueId);\n+            // console.log('Transformed uniqueId:', uniqueId);\n+            // console.log('item.graph :', item.graph );\n+            transformedData.push({\n+                uniqueId: uniqueId, // Добавляем уникальный идентификатор\n+                photo: item.photos ? item.photos[0][\"c516x688\"] : '',\n+                subjectName: item.subjectName,\n+                nmID: item.nmID,\n+                size: size,\n+                orders1m: orders1m,\n+                orders14d: item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0,\n+                salesGraph: item[\"30stat\"], // Данные для графика,\n+                graph: item.graph ,// Данные для сравнения графиков продаж\n+                stock: stock,\n+                stockDays: stockDays,\n+                replenish: '',\n+                vendorCode: item.vendorCode\n             });\n-            return transformedData;\n-        }\n+        });\n+    });\n+    return transformedData;\n+}\n \n-        // Функция для преобразования данных без размеров\n-        function transformDataWithoutSizes(data) {\n-            let transformedData = [];\n-            data.forEach(item => {\n-                let totalStock = 0;\n-                let totalOrders1m = 0;\n-                let totalOrders14d = 0;\n+// Функция для преобразования данных без размеров\n+function transformDataWithoutSizes(data) {\n+    let transformedData = [];\n+    data.forEach(item => {\n+        let totalStock = 0;\n+        let totalOrders1m = 0;\n+        let totalOrders14d = 0;\n+        \n+         console.log('item.graph ',item.graph);\n \n-                console.log('item.graph ', item.graph);\n+        item.allowed_sizes.forEach(size => {\n+            totalStock += item.stocks ? item.stocks[size] || 0 : 0;\n+            totalOrders1m += item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n+            totalOrders14d += item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0;\n+        });\n \n-                item.allowed_sizes.forEach(size => {\n-                    totalStock += item.stocks ? item.stocks[size] || 0 : 0;\n-                    totalOrders1m += item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n-                    totalOrders14d += item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0;\n-                });\n+        let stockDays = totalOrders1m !== 0 ? parseFloat((totalStock / totalOrders1m).toFixed(2)) : 0;\n+let orders1m  = parseFloat(totalOrders1m.toFixed(2))\n+let orders14d  = parseFloat(totalOrders14d.toFixed(2))\n+        let uniqueId = item.nmID;\n+        console.log('uniqueId во второй' , uniqueId);\n+        transformedData.push({\n+            uniqueId: uniqueId, // Добавляем уникальный идентификатор\n+            photo: item.photos ? item.photos[0].c246x328 : '',\n+            subjectName: item.subjectName,\n+            nmID: item.nmID,\n+            size: '-', // Прочерк для размера\n+            orders1m: orders1m,\n+            orders14d: orders14d,\n+            salesGraph: item[\"30stat\"],\n+            compareGraph: item.graph, \n+            stock: totalStock,\n+            stockDays: stockDays, //  добавить логику для расчета\n+            replenish: '',\n+            vendorCode: item.vendorCode\n+        });\n+    });\n+    return transformedData;\n+}\n \n-                let stockDays = totalOrders1m !== 0 ? parseFloat((totalStock / totalOrders1m).toFixed(2)) : 0;\n-                let orders1m = parseFloat(totalOrders1m.toFixed(2))\n-                let orders14d = parseFloat(totalOrders14d.toFixed(2))\n-                let uniqueId = item.nmID;\n-                console.log('uniqueId во второй', uniqueId);\n-                transformedData.push({\n-                    uniqueId: uniqueId, // Добавляем уникальный идентификатор\n-                    photo: item.photos ? item.photos[0].c246x328 : '',\n-                    subjectName: item.subjectName,\n-                    nmID: item.nmID,\n-                    size: '-', // Прочерк для размера\n-                    orders1m: orders1m,\n-                    orders14d: orders14d,\n-                    salesGraph: item[\"30stat\"],\n-                    compareGraph: item.graph,\n-                    stock: totalStock,\n-                    stockDays: stockDays, //  добавить логику для расчета\n-                    replenish: '',\n-                    vendorCode: item.vendorCode\n-                });\n-            });\n-            return transformedData;\n-        }\n+// Функция для загрузки данных и отображения таблицы\n+function fetchData() {\n+    $.getJSON('data.json', function (response) {\n+        const originalData = response.data;\n+        const rowData = transformData(originalData);\n+        gridOptions.api.applyTransaction({ add: rowData });\n+    }).fail(function () {\n+        console.error('Ошибка при загрузке данных');\n+    });\n+}\n \n-        // Функция для загрузки данных и отображения таблицы\n-        function fetchData() {\n-            $.getJSON('data.json', function (response) {\n-                const originalData = response.data;\n-                const rowData = transformData(originalData);\n-                gridOptions.api.applyTransaction({\n-                    add: rowData\n-                });\n-            }).fail(function () {\n-                console.error('Ошибка при загрузке данных');\n-            });\n-        }\n-\n-        // График на 30 дней\n-        function createSalesGraph(statData) {\n-            const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n-            setTimeout(() => {\n-                const ctx = document.getElementById(canvasId).getContext('2d');\n-                new Chart(ctx, {\n-                    type: 'line',\n-                    data: {\n-                        labels: Object.keys(statData),\n-                        datasets: [{\n-                            label: 'Продажи',\n-                            data: Object.values(statData),\n-                            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n-                            borderColor: 'rgba(75, 192, 192, 1)',\n-                            borderWidth: 1,\n-                            pointRadius: 0,\n-                            borderWidth: 1, // Устанавливаем толщину линии\n-                            pointHoverRadius: 5, // Радиус точки при наведении\n-                        }]\n+// График на 30 дней\n+function createSalesGraph(statData) {\n+    const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n+    setTimeout(() => {\n+        const ctx = document.getElementById(canvasId).getContext('2d');\n+        new Chart(ctx, {\n+            type: 'line',\n+            data: {\n+                labels: Object.keys(statData),\n+                datasets: [{\n\\ No newline at end of file\n+                    label: 'Продажи',\n+                    data: Object.values(statData),\n+                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n+                    borderColor: 'rgba(75, 192, 192, 1)',\n+                    borderWidth: 1,\n+                    pointRadius: 0,\n+                    borderWidth: 1, // Устанавливаем толщину линии\n+                    pointHoverRadius: 5, // Радиус точки при наведении\n+                }]\n+            },\n+            options: {\n+                responsive: true,\n+                maintainAspectRatio: false,\n+                scales: {\n+                    x: {\n+                        display: true, // Отображение оси X\n+                        ticks: {\n+                            display: false // Скрываем метки по оси X\n+                        }\n                     },\n-                    options: {\n-                        responsive: true,\n-                        maintainAspectRatio: false,\n-                        scales: {\n-                            x: {\n-                                display: true, // Отображение оси X\n-                                ticks: {\n-                                    display: false // Скрываем метки по оси X\n-                                }\n-                            },\n-                            y: {\n-                                display: true, // Отображение оси Y\n-                                ticks: {\n-                                    display: false // Скрываем метки по оси Y\n-                                }\n+                    y: {\n+                        display: true, // Отображение оси Y\n+                        ticks: {\n+                            display: false // Скрываем метки по оси Y\n+                        }\n+                    }\n+                },\n+                plugins: {\n+                    legend: {\n+                        display: false // Убираем легенду\n+                    },\n+                    tooltip: {\n+                        callbacks: {\n+                            label: function (context) {\n+                                return `Дата: ${context.label}, Количество: ${context.parsed.y}`;\n                             }\n-                        },\n-                        plugins: {\n-                            legend: {\n-                                display: false // Убираем легенду\n-                            },\n-                            tooltip: {\n-                                callbacks: {\n-                                    label: function (context) {\n-                                        return `Дата: ${context.label}, Количество: ${context.parsed.y}`;\n-                                    }\n-                                }\n-                            },\n-                            hover: {\n-                                mode: 'index',\n-                                intersect: false,\n-                            }\n-                        },\n-                        interaction: {\n-                            mode: 'index',\n-                            intersect: false,\n-                        },\n-                        elements: {\n-                            point: {\n-                                radius: 0, // Скрываем точки\n-                                hoverRadius: 5, // Радиус точки при наведении\n-                                hitRadius: 10, // Радиус области взаимодействия точки\n-                            }\n                         }\n+                    },\n+                    hover: {\n+                        mode: 'index',\n+                        intersect: false,\n                     }\n-                });\n-            }, 100);\n-            return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n-        }\n+                },\n+                interaction: {\n+                    mode: 'index',\n+                    intersect: false,\n+                },\n+                elements: {\n+                    point: {\n+                        radius: 0, // Скрываем точки\n+                        hoverRadius: 5, // Радиус точки при наведении\n+                        hitRadius: 10, // Радиус области взаимодействия точки\n+                    }\n+                }\n+            }\n+        });\n+    }, 100);\n+    return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n+}\n \n-        function createCompareGraph(graphData) {\n-            const canvasId = `compare-chart-${Math.random().toString(36).substr(2, 9)}`;\n-            const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]; // индексы этих дней: 0,1,2,3,4,5,6\n-            const currentDate = new Date();\n-            const currentDayIndex = currentDate.getDay(); // нашли индекс текущего дня\n+function createCompareGraph(graphData) {\n+    const canvasId = `compare-chart-${Math.random().toString(36).substr(2, 9)}`;\n+    const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]; // индексы этих дней: 0,1,2,3,4,5,6\n+    const currentDate = new Date();\n+    const currentDayIndex = currentDate.getDay(); // нашли индекс текущего дня\n \n-            // меняем массив дней недели так, чтобы справа был текущий день недели\n-            const labels = [...daysOfWeek.slice(currentDayIndex + 1), ...daysOfWeek.slice(0, currentDayIndex + 1)];\n+    // меняем массив дней недели так, чтобы справа был текущий день недели\n+    const labels = [...daysOfWeek.slice(currentDayIndex + 1), ...daysOfWeek.slice(0, currentDayIndex + 1)];\n \n-            const currentWeekData = new Array(7).fill(0); // Продажи текущей недели\n-            const previousWeekData = new Array(7).fill(0); // Продажи предыдущей \n+    const currentWeekData = new Array(7).fill(0); // Продажи текущей недели\n+    const previousWeekData = new Array(7).fill(0); // Продажи предыдущей \n \n-            // меняем строку даты в объект Date\n-            const parseDate = (dateString) => {\n-                const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n-                return new Date(\n-                `20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n-            };\n+    // меняем строку даты в объект Date\n+    const parseDate = (dateString) => {\n+        const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n+        return new Date(`20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n+    };\n \n-            // Функция для получения индекса дня недели\n-            const getWeekdayIndex = (date) => {\n-                return date.getDay();\n-            };\n+    // Функция для получения индекса дня недели\n+    const getWeekdayIndex = (date) => {\n+        return date.getDay();\n+    };\n \n-            // Заполняем данные продаж для текущей и предыдущей недели\n-            for (const [dateString, count] of Object.entries(graphData)) {\n-                const date = parseDate(dateString);\n-                const dayDiff = Math.floor((currentDate - date) / (1000 * 60 * 60 * 24));\n-                if (dayDiff >= 0 && dayDiff < 7) {\n-                    currentWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n-                } else if (dayDiff >= 7 && dayDiff < 14) {\n-                    previousWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n-                }\n-            }\n+    // Заполняем данные продаж для текущей и предыдущей недели\n+    for (const [dateString, count] of Object.entries(graphData)) {\n+        const date = parseDate(dateString);\n+        const dayDiff = Math.floor((currentDate - date) / (1000 * 60 * 60 * 24));\n+        if (dayDiff >= 0 && dayDiff < 7) {\n+            currentWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n+        } else if (dayDiff >= 7 && dayDiff < 14) {\n+            previousWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n+        }\n+    }\n \n-            setTimeout(() => {\n-                const ctx = document.getElementById(canvasId).getContext('2d');\n-                new Chart(ctx, {\n-                    type: 'bar',\n-                    data: {\n-                        labels: labels,\n-                        datasets: [{\n-                            label: 'Продажи предыдущей недели', // убрал это обозначение\n-                            data: previousWeekData,\n-                            backgroundColor: 'rgba(75, 192, 192, 0.6)',\n-                            borderColor: 'rgba(75, 192, 192, 1)',\n-                            borderWidth: 1\n-                        }, {\n-                            label: 'Продажи текущей недели', // убрал это обозначение\n-                            data: currentWeekData,\n-                            backgroundColor: 'rgba(153, 102, 255, 0.6)',\n-                            borderColor: 'rgba(153, 102, 255, 1)',\n-                            borderWidth: 1\n-                        }]\n+    setTimeout(() => {\n+        const ctx = document.getElementById(canvasId).getContext('2d');\n+        new Chart(ctx, {\n+            type: 'bar',\n+            data: {\n+                labels: labels,\n+                datasets: [{\n+                    label: 'Продажи предыдущей недели', // убрал это обозначение\n+                    data: previousWeekData,\n+                    backgroundColor: 'rgba(75, 192, 192, 0.6)',\n+                    borderColor: 'rgba(75, 192, 192, 1)',\n+                    borderWidth: 1\n+                }, {\n+                    label: 'Продажи текущей недели', // убрал это обозначение\n+                    data: currentWeekData,\n+                    backgroundColor: 'rgba(153, 102, 255, 0.6)',\n+                    borderColor: 'rgba(153, 102, 255, 1)',\n+                    borderWidth: 1\n+                }]\n+            },\n+            options: {\n+                scales: {\n+                    y: {\n+                        display: false // Скрыть ось Y\n                     },\n-                    options: {\n-                        scales: {\n-                            y: {\n-                                display: false // Скрыть ось Y\n-                            },\n-                            x: {\n-                                display: true,\n-                                ticks: {\n-                                    color: 'grey' // Цвет текста на оси X\n+                    x: {\n+                        display: true,\n+                        ticks: {\n+                            color: 'grey' // Цвет текста на оси X\n+                        }\n+                    }\n+                },\n+                plugins: {\n+                    legend: {\n+                        display: false // Скрыть легенду\n+                    },\n+                    tooltip: {\n+                        enabled: true,\n+                        callbacks: {\n+                            label: function (tooltipItem) {\n+                                let label = tooltipItem.dataset.label || '';\n+                                if (label) {\n+                                    label += ': ';\n                                 }\n+                                label += tooltipItem.raw.toFixed(2);\n+                                return label;\n                             }\n-                        },\n-                        plugins: {\n-                            legend: {\n-                                display: false // Скрыть легенду\n-                            },\n-                            tooltip: {\n-                                enabled: true,\n-                                callbacks: {\n-                                    label: function (tooltipItem) {\n-                                        let label = tooltipItem.dataset.label || '';\n-                                        if (label) {\n-                                            label += ': ';\n-                                        }\n-                                        label += tooltipItem.raw.toFixed(2);\n-                                        return label;\n-                                    }\n-                                }\n-                            }\n-                        },\n-                        maintainAspectRatio: false,\n-                        responsive: true\n+                        }\n                     }\n-                });\n-            }, 100);\n+                },\n+                maintainAspectRatio: false,\n+                responsive: true\n+            }\n+        });\n+    }, 100);\n \n-            return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n-        }\n+    return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n+}\n+     \n \n+// Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n+document.querySelector('.deleteModify').addEventListener('click', function () {\n+    if ($(this).text() === \"Показать товар без модификаций\") {   \n+        $(this).text(\"Показать модификации\");   \n+        $.getJSON('data.json', function (response) {\n+        const originalData = response.data;\n+        const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n \n-        // Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n-        document.querySelector('.deleteModify').addEventListener('click', function () {\n-            if ($(this).text() === \"Показать товар без модификаций\") {\n-                $(this).text(\"Показать модификации\");\n-                $.getJSON('data.json', function (response) {\n-                    const originalData = response.data;\n-                    const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n+        // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n+        const nodesToRemove = [];\n+        console.log('nodesToRemove: ',nodesToRemove);\n+        gridOptions.api.forEachNode(node => {\n+            nodesToRemove.push(node);\n+        });\n \n-                    // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n-                    const nodesToRemove = [];\n-                    console.log('nodesToRemove: ', nodesToRemove);\n-                    gridOptions.api.forEachNode(node => {\n-                        nodesToRemove.push(node);\n-                    });\n-\n-                    gridOptions.api.applyTransaction({\n-                        remove: nodesToRemove,\n-                        add: rowDataWithoutSizes\n-                    });\n-                }).fail(function () {\n-                    console.error('Ошибка при загрузке данных');\n-                });\n-\n-            } else if ($(this).text() === \"Показать модификации\") {\n-                $(this).text(\"Показать товар без модификации\");\n-                //  // Загружаем и отображаем модификации\n-                //  $.getJSON('data.json', function (response) {\n-                //     const originalData = response.data;\n-                //     const modifiedData = transformData(originalData);\n-\n-                //     gridOptions.api.applyTransaction({\n-                //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n-                //         add: modifiedData\n-                //     });\n-                // }).fail(function () {\n-                //     console.error('Ошибка при загрузке данных');\n-                // });\n-                location.reload()\n-            }\n-\n+        gridOptions.api.applyTransaction({\n+            remove: nodesToRemove,\n+            add: rowDataWithoutSizes\n         });\n+    }).fail(function () {\n+        console.error('Ошибка при загрузке данных');\n+    });\n+       \n+    } else if ($(this).text() === \"Показать модификации\") {\n+         $(this).text(\"Показать товар без модификации\");      \n+        //  // Загружаем и отображаем модификации\n+        //  $.getJSON('data.json', function (response) {\n+        //     const originalData = response.data;\n+        //     const modifiedData = transformData(originalData);\n \n+        //     gridOptions.api.applyTransaction({\n+        //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n+        //         add: modifiedData\n+        //     });\n+        // }).fail(function () {\n+        //     console.error('Ошибка при загрузке данных');\n+        // });\n+        location.reload()\n+    }\n+    \n+});\n \n \n-        // Добавление события для кнопки сброса всех фильтров\n-        document.querySelector('#resetFilters').addEventListener('click', function () {\n-            gridOptions.api.setFilterModel(null);\n-        });\n \n+// Добавление события для кнопки сброса всех фильтров\n+document.querySelector('#resetFilters').addEventListener('click', function() {\n+        gridOptions.api.setFilterModel(null);\n+    });\n+ \n+ \n+// Обработчик кнопки \"Рассчитать пополнение (шт)\"\n+document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n+    const daysInputElement = document.querySelector('#daysInput');\n+    const daysInput = daysInputElement.value;\n \n-        // Обработчик кнопки \"Рассчитать пополнение (шт)\"\n-        document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n-            const daysInputElement = document.querySelector('#daysInput');\n-            const daysInput = daysInputElement.value;\n+    if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n+        alert('Введите число в диапазоне от 15 до 45');\n+    } \n \n-            if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n-                alert('Введите число в диапазоне от 15 до 45');\n-            }\n+    // Проверяем, что daysInput не пустой и является числом\n+    if (daysInput && !isNaN(daysInput)) {\n+        // Рассчитываем replenish для каждой строки\n+        gridOptions.api.forEachNode(rowNode => {\n+            const orders1m = rowNode.data.orders1m;\n+            const stockDays = rowNode.data.stockDays;\n \n-            // Проверяем, что daysInput не пустой и является числом\n-            if (daysInput && !isNaN(daysInput)) {\n-                // Рассчитываем replenish для каждой строки\n-                gridOptions.api.forEachNode(rowNode => {\n-                    const orders1m = rowNode.data.orders1m;\n-                    const stockDays = rowNode.data.stockDays;\n+            if (orders1m !== 0 && stockDays !== 0) {\n+                let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n \n-                    if (orders1m !== 0 && stockDays !== 0) {\n-                        let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n-\n-                        // Обновляем данные в текущей строке\n-                        rowNode.setDataValue('replenish', replenish);\n-                    }\n-                });\n-\n-                // Очищаем значение инпута после выполнения расчетов\n-                daysInputElement.value = '';\n-            } else {\n-                console.error('Введите корректное значение для количества дней');\n+                // Обновляем данные в текущей строке\n+                rowNode.setDataValue('replenish', replenish);\n             }\n         });\n \n+        // Очищаем значение инпута после выполнения расчетов\n+        daysInputElement.value = '';\n+    } else {\n+        console.error('Введите корректное значение для количества дней');\n+    }\n+});\n \n-        document.addEventListener('DOMContentLoaded', function () {\n-            const gridDiv = document.querySelector('#myGrid');\n-            new agGrid.Grid(gridDiv, gridOptions);\n+    \n+document.addEventListener('DOMContentLoaded', function () {\n+    const gridDiv = document.querySelector('#myGrid');\n+    new agGrid.Grid(gridDiv, gridOptions);\n \n-            fetchData();\n+    fetchData();\n \n+    \n+    \n+});\n \n \n-        });\n     </script>\n </body>\n-\n-</html>\n+</html>\n"
                },
                {
                    "date": 1720112131865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n <!DOCTYPE html>\n <html lang=\"en\">\n+\n <head>\n     <meta charset=\"UTF-8\">\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n     <title>Document</title>\n@@ -13,580 +14,638 @@\n     <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n     <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n     <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n     <style>\n-        img{\n+        img {\n             height: 120px;\n             padding: 2%;\n         }\n+\n         .red-text {\n-    background-color: red;\n-    color: white; /* белый текст на красном фоне */\n-    padding: 2px 5px; /* отступы вокруг текста */\n-    border-radius: 3px; /* скругление углов */\n-}\n+            background-color: red;\n+            color: white;\n+            /* белый текст на красном фоне */\n+            padding: 2px 5px;\n+            /* отступы вокруг текста */\n+            border-radius: 3px;\n+            /* скругление углов */\n+        }\n \n-.orange-text {\n-    background-color: orange;\n-    color: black; /* черный текст на оранжевом фоне */\n-    padding: 2px 5px;\n-    border-radius: 3px;\n-}\n+        .orange-text {\n+            background-color: orange;\n+            color: black;\n+            /* черный текст на оранжевом фоне */\n+            padding: 2px 5px;\n+            border-radius: 3px;\n+        }\n \n-.yellow-text {\n-    background-color: yellow;\n-    color: black;\n-    padding: 2px 5px;\n-    border-radius: 3px;\n-}\n+        .yellow-text {\n+            background-color: yellow;\n+            color: black;\n+            padding: 2px 5px;\n+            border-radius: 3px;\n+        }\n \n-.green-text {\n-    background-color: green;\n-    color: white;\n-    padding: 2px 5px;\n-    border-radius: 3px;\n-}\n-.table-wrapper {\n+        .green-text {\n+            background-color: green;\n+            color: white;\n+            padding: 2px 5px;\n+            border-radius: 3px;\n+        }\n+\n+        .table-wrapper {\n             display: flex;\n             flex-direction: column;\n             height: 100vh;\n             padding: 20px;\n             width: 100vw;\n             align-items: center;\n         }\n+\n         .headerContainer {\n             display: flex;\n             justify-content: space-between;\n             align-items: center;\n             margin-bottom: 15px;\n             width: 80vw;\n         }\n-        .input-group,.btn-wrapper{\n+\n+        .input-group,\n+        .btn-wrapper {\n             height: 50px;\n         }\n-        input, button{\n+\n+        input,\n+        button {\n             height: 100% !important;\n             font-size: small !important;\n         }\n-        .input-group{\n+\n+        .input-group {\n             width: 40vw !important;\n         }\n+\n         .table-inner {\n-          \n+\n             width: 100%;\n         }\n+\n         #myGrid {\n             /* height: calc(100% - 50px); */\n             width: 100%;\n         }\n+\n         #loading {\n             text-align: center;\n             padding: 20px;\n             font-size: 1.5rem;\n         }\n+\n         #resetFilters {\n             margin-bottom: 10px;\n         }\n-\n-\n     </style>\n </head>\n+\n <body>\n     <div class=\"table-wrapper\">\n         <div class=\"headerContainer\">\n             <div class=\"input-group\">\n                 <input type=\"number\" id=\"daysInput\" class=\"form-control\" placeholder=\"Введите количество дней\"\n                     aria-label=\"Введите количество дней от 15 до 45\" aria-describedby=\"basic-addon2\" min=\"15\" max=\"45\">\n                 <div class=\"input-group-append\">\n-                    <button class=\"btn btn-outline-secondary calculateReplenishment\" type=\"button\">Рассчитать пополнение (шт)</button>\n+                    <button class=\"btn btn-outline-secondary calculateReplenishment\" type=\"button\">Рассчитать пополнение\n+                        (шт)</button>\n                 </div>\n             </div>\n-            <div class=\"btn-wrapper\"> <button id=\"resetFilters\" class=\"btn btn-outline-secondary \">Сбросить все фильтры</button> </div>\n-            <div class=\"btn-wrapper\"> <button class=\"btn btn-outline-secondary deleteModify\" type=\"button\">Показать товар без модификаций</button></div>\n-            \n-           \n+            <div class=\"btn-wrapper\"> <button id=\"resetFilters\" class=\"btn btn-outline-secondary \">Сбросить все\n+                    фильтры</button> </div>\n+            <div class=\"btn-wrapper\"> <button class=\"btn btn-outline-secondary deleteModify\" type=\"button\">Показать\n+                    товар без модификаций</button></div>\n+\n+\n         </div>\n-        \n+\n         <div class=\"table-inner container mt-4\">\n             <div id=\"myGrid\" class=\"ag-theme-alpine\" style=\"height: 600px\"></div>\n             <div id=\"loading\" style=\"display: none;\">Загрузка...</div>\n         </div>\n     </div>\n \n     <script>\n-     // Определение столбцов и параметров сетки\n-const columnDefs = [\n-    { headerName: '№', valueGetter: 'node.rowIndex + 1', width: 60, sortable: false, filter: false },\n-    { headerName: 'Фото', field: 'photo', width: 100, cellRenderer: params => `<img src=\"${params.value}\">` },\n-    { headerName: 'Предмет', field: 'subjectName', width: 120 },\n-    { headerName: 'Номенклатура', field: 'nmID', width: 160 },\n-    { headerName: 'Размер', field: 'size', width: 120 },\n-    { headerName: 'Заказы 1м', field: 'orders1m', width: 150 },\n-    { headerName: 'Заказы 14 д', field: 'orders14d', width: 150 },\n-    // { headerName: 'График продаж за месяц', field: 'salesGraph', width: 250, cellRenderer: params => createSalesGraph(params.data.salesGraph) },\n-    // { headerName: 'Сравнение продаж (нед)', field: 'compareGraph', width: 250, cellRenderer: params => createCompareGraph(params.data.graph) },\n-    {\n-        headerName: 'Графики',\n-        field: 'graph',\n-        width: 300,\n-        cellRenderer: params => createToggleableGraph(params)\n-    },\n-    {\n-        headerName: 'Остаток (шт)',\n-        field: 'stock',\n-        width: 120,\n-        cellRenderer: function(params) {\n-            const value = params.value;\n-            let className = '';\n-            if (value >= 0 && value <= 1.99) {\n-                className = 'red-text';\n-            } else if (value >= 2 && value <= 5.99) {\n-                className = 'orange-text';\n-            } else if (value >= 6 && value <= 10.99) {\n-                className = 'yellow-text';\n-            } else if (value >= 11) {\n-                className = 'green-text';\n+        // Определение столбцов и параметров сетки\n+        const columnDefs = [{\n+                headerName: '№',\n+                valueGetter: 'node.rowIndex + 1',\n+                width: 60,\n+                sortable: false,\n+                filter: false\n+            },\n+            {\n+                headerName: 'Фото',\n+                field: 'photo',\n+                width: 100,\n+                cellRenderer: params => `<img src=\"${params.value}\">`\n+            },\n+            {\n+                headerName: 'Предмет',\n+                field: 'subjectName',\n+                width: 120\n+            },\n+            {\n+                headerName: 'Номенклатура',\n+                field: 'nmID',\n+                width: 160\n+            },\n+            {\n+                headerName: 'Размер',\n+                field: 'size',\n+                width: 120\n+            },\n+            {\n+                headerName: 'Заказы 1м',\n+                field: 'orders1m',\n+                width: 150\n+            },\n+            {\n+                headerName: 'Заказы 14 д',\n+                field: 'orders14d',\n+                width: 150\n+            },\n+            // { headerName: 'График продаж за месяц', field: 'salesGraph', width: 250, cellRenderer: params => createSalesGraph(params.data.salesGraph) },\n+            // { headerName: 'Сравнение продаж (нед)', field: 'compareGraph', width: 250, cellRenderer: params => createCompareGraph(params.data.graph) },\n+            {\n+                headerName: 'Графики',\n+                field: 'graph',\n+                width: 300,\n+                cellRenderer: params => createToggleableGraph(params)\n+            },\n+            {\n+                headerName: 'Остаток (шт)',\n+                field: 'stock',\n+                width: 120,\n+                cellRenderer: function (params) {\n+                    const value = params.value;\n+                    let className = '';\n+                    if (value >= 0 && value <= 1.99) {\n+                        className = 'red-text';\n+                    } else if (value >= 2 && value <= 5.99) {\n+                        className = 'orange-text';\n+                    } else if (value >= 6 && value <= 10.99) {\n+                        className = 'yellow-text';\n+                    } else if (value >= 11) {\n+                        className = 'green-text';\n+                    }\n+\n+                    return `<span class=\"${className}\">${value}</span>`;\n+                }\n+            },\n+            {\n+                headerName: 'Остаток (дн)',\n+                field: 'stockDays',\n+                width: 120,\n+                cellRenderer: function (params) {\n+                    const value = params.value;\n+                    let className = '';\n+                    if (value >= 0 && value <= 1.99) {\n+                        className = 'red-text';\n+                    } else if (value >= 2 && value <= 5.99) {\n+                        className = 'orange-text';\n+                    } else if (value >= 6 && value <= 10.99) {\n+                        className = 'yellow-text';\n+                    } else if (value >= 11) {\n+                        className = 'green-text';\n+                    }\n+\n+                    return `<span class=\"${className}\">${value}</span>`;\n+                }\n+            },\n+            {\n+                headerName: 'Пополнить (шт)',\n+                field: 'replenish',\n+                width: 120\n+            },\n+            {\n+                headerName: 'Артикул',\n+                field: 'vendorCode',\n+                width: 150,\n             }\n+        ];\n+        //переключаем графики\n+        function createToggleableGraph(params) {\n+            const container = document.createElement('div');\n+            let currentGraph = 'compareGraph';\n \n-            return `<span class=\"${className}\">${value}</span>`;\n-        }\n-    },\n-    {\n-        headerName: 'Остаток (дн)',\n-        field: 'stockDays',\n-        width: 120,\n-        cellRenderer: function(params) {\n-            const value = params.value;\n-            let className = '';\n-            if (value >= 0 && value <= 1.99) {\n-                className = 'red-text';\n-            } else if (value >= 2 && value <= 5.99) {\n-                className = 'orange-text';\n-            } else if (value >= 6 && value <= 10.99) {\n-                className = 'yellow-text';\n-            } else if (value >= 11) {\n-                className = 'green-text';\n+            function toggleGraph() {\n+                currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n+                const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n+                container.innerHTML = createGraphComponent(graphData);\n             }\n \n-            return `<span class=\"${className}\">${value}</span>`;\n-        }\n-    },\n-    { headerName: 'Пополнить (шт)', field: 'replenish',width: 120 },\n-    { headerName: 'Артикул', field: 'vendorCode', width: 150, }\n-];\n-//переключаем графики\n-function createToggleableGraph(params) {\n-    const container = document.createElement('div');\n-    let currentGraph = 'compareGraph'; \n+            function createGraphComponent(graphData) {\n+                if (currentGraph === 'compareGraph') {\n+                    return createCompareGraph(graphData);\n+                } else {\n+                    return createSalesGraph(graphData);\n+                }\n+            }\n \n-    function toggleGraph() {\n-        currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n-        const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n-        container.innerHTML = createGraphComponent(graphData);\n-    }\n+            container.innerHTML = createGraphComponent(params.data.graph);\n+            container.addEventListener('click', toggleGraph);\n \n-    function createGraphComponent(graphData) {\n-        if (currentGraph === 'compareGraph') {\n-            return createCompareGraph(graphData);\n-        } else {\n-            return createSalesGraph(graphData);\n+            return container;\n         }\n-    }\n \n-    container.innerHTML = createGraphComponent(params.data.graph);\n-    container.addEventListener('click', toggleGraph);\n \n-    return container;\n-}\n \n \n- \n+        const localeText = {\n+            // Русификация фильтров\n+            page: 'страница',\n+            more: 'ещё',\n+            to: 'к',\n+            of: 'из',\n+            next: 'следующий',\n+            last: 'последний',\n+            first: 'первый',\n+            previous: 'предыдущий',\n+            loadingOoo: 'Загрузка...',\n+            applyFilter: 'Применить фильтр...',\n+            equals: 'Равно',\n+            notEqual: 'Не равно',\n+            filterOoo: 'Фильтр...',\n+            contains: 'Содержит',\n+            notContains: 'Не содержит',\n+            startsWith: 'Начинается с',\n+            endsWith: 'Заканчивается на',\n+            andCondition: 'И',\n+            orCondition: 'Или'\n+        };\n \n-const localeText = {\n-    // Русификация фильтров\n-    page: 'страница',\n-    more: 'ещё',\n-    to: 'к',\n-    of: 'из',\n-    next: 'следующий',\n-    last: 'последний',\n-    first: 'первый',\n-    previous: 'предыдущий',\n-    loadingOoo: 'Загрузка...',\n-    applyFilter: 'Применить фильтр...',\n-    equals: 'Равно',\n-    notEqual: 'Не равно',\n-    filterOoo: 'Фильтр...',\n-    contains: 'Содержит',\n-    notContains: 'Не содержит',\n-    startsWith: 'Начинается с',\n-    endsWith: 'Заканчивается на',\n-    andCondition: 'И',\n-    orCondition: 'Или'\n-};\n \n \n+        const gridOptions = {\n+            enableCellTextSelection: true,\n+            columnDefs: columnDefs,\n+            defaultColDef: {\n+                sortable: true,\n+                filter: true,\n+                resizable: true\n+            },\n+            rowData: [],\n+            localeText: localeText,\n+            rowHeight: 120,\n+            getRowId: params => {\n+                const id = params.data.uniqueId;\n+                console.log('Row ID:', id, 'Data:', params);\n+                return id;\n+            }\n+        };\n \n-const gridOptions = {\n-    enableCellTextSelection: true,\n-    columnDefs: columnDefs,\n-    defaultColDef: {\n-        sortable: true,\n-        filter: true,\n-        resizable: true\n-    },\n-    rowData: [],\n-    localeText: localeText,\n-    rowHeight: 120,\n-    getRowId: params => {\n-        const id = params.data.uniqueId;\n-        console.log('Row ID:', id, 'Data:', params);\n-        return id;\n-    }\n-};\n \n+        // Функция для преобразования данных\n+        function transformData(data) {\n+            let transformedData = [];\n+            data.forEach(item => {\n+                item.allowed_sizes.forEach(size => {\n+                    let stock = item.stocks ? item.stocks[size] || 0 : 0;\n+                    let orders1m = item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n+                    let stockDays = orders1m !== 0 ? parseFloat((stock / orders1m).toFixed(2)) : 0;\n \n-// Функция для преобразования данных\n-function transformData(data) {\n-    let transformedData = [];\n-    data.forEach(item => {\n-        item.allowed_sizes.forEach(size => {\n-            let stock = item.stocks ? item.stocks[size] || 0 : 0;\n-            let orders1m = item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n-            let stockDays = orders1m !== 0 ? parseFloat((stock / orders1m).toFixed(2)) : 0;\n-\n-            // Создаем уникальный идентификатор на основе генератора\n-            let uniqueId = `${item.nmID}-${size}`;\n-            console.log('uniqueId в начале' , uniqueId);\n-            // console.log('Transformed uniqueId:', uniqueId);\n-            // console.log('item.graph :', item.graph );\n-            transformedData.push({\n-                uniqueId: uniqueId, // Добавляем уникальный идентификатор\n-                photo: item.photos ? item.photos[0][\"c516x688\"] : '',\n-                subjectName: item.subjectName,\n-                nmID: item.nmID,\n-                size: size,\n-                orders1m: orders1m,\n-                orders14d: item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0,\n-                salesGraph: item[\"30stat\"], // Данные для графика,\n-                graph: item.graph ,// Данные для сравнения графиков продаж\n-                stock: stock,\n-                stockDays: stockDays,\n-                replenish: '',\n-                vendorCode: item.vendorCode\n+                    // Создаем уникальный идентификатор на основе генератора\n+                    let uniqueId = `${item.nmID}-${size}`;\n+                    console.log('uniqueId в начале', uniqueId);\n+                    // console.log('Transformed uniqueId:', uniqueId);\n+                    // console.log('item.graph :', item.graph );\n+                    transformedData.push({\n+                        uniqueId: uniqueId, // Добавляем уникальный идентификатор\n+                        photo: item.photos ? item.photos[0][\"c516x688\"] : '',\n+                        subjectName: item.subjectName,\n+                        nmID: item.nmID,\n+                        size: size,\n+                        orders1m: orders1m,\n+                        orders14d: item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0,\n+                        salesGraph: item[\"30stat\"], // Данные для графика,\n+                        graph: item.graph, // Данные для сравнения графиков продаж\n+                        stock: stock,\n+                        stockDays: stockDays,\n+                        replenish: '',\n+                        vendorCode: item.vendorCode\n+                    });\n+                });\n             });\n-        });\n-    });\n-    return transformedData;\n-}\n+            return transformedData;\n+        }\n \n-// Функция для преобразования данных без размеров\n-function transformDataWithoutSizes(data) {\n-    let transformedData = [];\n-    data.forEach(item => {\n-        let totalStock = 0;\n-        let totalOrders1m = 0;\n-        let totalOrders14d = 0;\n-        \n-         console.log('item.graph ',item.graph);\n+        // Функция для преобразования данных без размеров\n+        function transformDataWithoutSizes(data) {\n+            let transformedData = [];\n+            data.forEach(item => {\n+                let totalStock = 0;\n+                let totalOrders1m = 0;\n+                let totalOrders14d = 0;\n \n-        item.allowed_sizes.forEach(size => {\n-            totalStock += item.stocks ? item.stocks[size] || 0 : 0;\n-            totalOrders1m += item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n-            totalOrders14d += item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0;\n-        });\n+                console.log('item.graph ', item.graph);\n \n-        let stockDays = totalOrders1m !== 0 ? parseFloat((totalStock / totalOrders1m).toFixed(2)) : 0;\n-let orders1m  = parseFloat(totalOrders1m.toFixed(2))\n-let orders14d  = parseFloat(totalOrders14d.toFixed(2))\n-        let uniqueId = item.nmID;\n-        console.log('uniqueId во второй' , uniqueId);\n-        transformedData.push({\n-            uniqueId: uniqueId, // Добавляем уникальный идентификатор\n-            photo: item.photos ? item.photos[0].c246x328 : '',\n-            subjectName: item.subjectName,\n-            nmID: item.nmID,\n-            size: '-', // Прочерк для размера\n-            orders1m: orders1m,\n-            orders14d: orders14d,\n-            salesGraph: item[\"30stat\"],\n-            compareGraph: item.graph, \n-            stock: totalStock,\n-            stockDays: stockDays, //  добавить логику для расчета\n-            replenish: '',\n-            vendorCode: item.vendorCode\n-        });\n-    });\n-    return transformedData;\n-}\n+                item.allowed_sizes.forEach(size => {\n+                    totalStock += item.stocks ? item.stocks[size] || 0 : 0;\n+                    totalOrders1m += item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n+                    totalOrders14d += item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0;\n+                });\n \n-// Функция для загрузки данных и отображения таблицы\n-function fetchData() {\n-    $.getJSON('data.json', function (response) {\n-        const originalData = response.data;\n-        const rowData = transformData(originalData);\n-        gridOptions.api.applyTransaction({ add: rowData });\n-    }).fail(function () {\n-        console.error('Ошибка при загрузке данных');\n-    });\n-}\n+                let stockDays = totalOrders1m !== 0 ? parseFloat((totalStock / totalOrders1m).toFixed(2)) : 0;\n+                let orders1m = parseFloat(totalOrders1m.toFixed(2))\n+                let orders14d = parseFloat(totalOrders14d.toFixed(2))\n+                let uniqueId = item.nmID;\n+                console.log('uniqueId во второй', uniqueId);\n+                transformedData.push({\n+                    uniqueId: uniqueId, // Добавляем уникальный идентификатор\n+                    photo: item.photos ? item.photos[0].c246x328 : '',\n+                    subjectName: item.subjectName,\n+                    nmID: item.nmID,\n+                    size: '-', // Прочерк для размера\n+                    orders1m: orders1m,\n+                    orders14d: orders14d,\n+                    salesGraph: item[\"30stat\"],\n+                    compareGraph: item.graph,\n+                    stock: totalStock,\n+                    stockDays: stockDays, //  добавить логику для расчета\n+                    replenish: '',\n+                    vendorCode: item.vendorCode\n+                });\n+            });\n+            return transformedData;\n+        }\n \n-// График на 30 дней\n-function createSalesGraph(statData) {\n-    const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n-    setTimeout(() => {\n-        const ctx = document.getElementById(canvasId).getContext('2d');\n-        new Chart(ctx, {\n-            type: 'line',\n-            data: {\n-                labels: Object.keys(statData),\n-                datasets: [{\n-                    label: 'Продажи',\n-                    data: Object.values(statData),\n-                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n-                    borderColor: 'rgba(75, 192, 192, 1)',\n-                    borderWidth: 1,\n-                    pointRadius: 0,\n-                    borderWidth: 1, // Устанавливаем толщину линии\n-                    pointHoverRadius: 5, // Радиус точки при наведении\n-                }]\n-            },\n-            options: {\n-                responsive: true,\n-                maintainAspectRatio: false,\n-                scales: {\n-                    x: {\n-                        display: true, // Отображение оси X\n-                        ticks: {\n-                            display: false // Скрываем метки по оси X\n-                        }\n+        // Функция для загрузки данных и отображения таблицы\n+        function fetchData() {\n+            $.getJSON('data.json', function (response) {\n+                const originalData = response.data;\n+                const rowData = transformData(originalData);\n+                gridOptions.api.applyTransaction({\n+                    add: rowData\n+                });\n+            }).fail(function () {\n+                console.error('Ошибка при загрузке данных');\n+            });\n+        }\n+\n+        // График на 30 дней\n+        function createSalesGraph(statData) {\n+            const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n+            setTimeout(() => {\n+                const ctx = document.getElementById(canvasId).getContext('2d');\n+                new Chart(ctx, {\n+                    type: 'line',\n+                    data: {\n+                        labels: Object.keys(statData),\n+                        datasets: [{\n+                            label: 'Продажи',\n+                            data: Object.values(statData),\n+                            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n+                            borderColor: 'rgba(75, 192, 192, 1)',\n+                            borderWidth: 1,\n+                            pointRadius: 0,\n+                            borderWidth: 1, // Устанавливаем толщину линии\n+                            pointHoverRadius: 5, // Радиус точки при наведении\n+                        }]\n                     },\n-                    y: {\n-                        display: true, // Отображение оси Y\n-                        ticks: {\n-                            display: false // Скрываем метки по оси Y\n-                        }\n-                    }\n-                },\n-                plugins: {\n-                    legend: {\n-                        display: false // Убираем легенду\n-                    },\n-                    tooltip: {\n-                        callbacks: {\n-                            label: function (context) {\n-                                return `Дата: ${context.label}, Количество: ${context.parsed.y}`;\n+                    options: {\n+                        responsive: true,\n+                        maintainAspectRatio: false,\n+                        scales: {\n+                            x: {\n+                                display: true, // Отображение оси X\n+                                ticks: {\n+                                    display: false // Скрываем метки по оси X\n+                                }\n+                            },\n+                            y: {\n+                                display: true, // Отображение оси Y\n+                                ticks: {\n+                                    display: false // Скрываем метки по оси Y\n+                                }\n                             }\n+                        },\n+                        plugins: {\n+                            legend: {\n+                                display: false // Убираем легенду\n+                            },\n+                            tooltip: {\n+                                callbacks: {\n+                                    label: function (context) {\n+                                        return `Дата: ${context.label}, Количество: ${context.parsed.y}`;\n+                                    }\n+                                }\n+                            },\n+                            hover: {\n+                                mode: 'index',\n+                                intersect: false,\n+                            }\n+                        },\n+                        interaction: {\n+                            mode: 'index',\n+                            intersect: false,\n+                        },\n+                        elements: {\n+                            point: {\n+                                radius: 0, // Скрываем точки\n+                                hoverRadius: 5, // Радиус точки при наведении\n+                                hitRadius: 10, // Радиус области взаимодействия точки\n+                            }\n                         }\n-                    },\n-                    hover: {\n-                        mode: 'index',\n-                        intersect: false,\n                     }\n-                },\n-                interaction: {\n-                    mode: 'index',\n-                    intersect: false,\n-                },\n-                elements: {\n-                    point: {\n-                        radius: 0, // Скрываем точки\n-                        hoverRadius: 5, // Радиус точки при наведении\n-                        hitRadius: 10, // Радиус области взаимодействия точки\n-                    }\n-                }\n-            }\n-        });\n-    }, 100);\n-    return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n-}\n+                });\n+            }, 100);\n+            return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n+        }\n \n-function createCompareGraph(graphData) {\n-    const canvasId = `compare-chart-${Math.random().toString(36).substr(2, 9)}`;\n-    const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]; // индексы этих дней: 0,1,2,3,4,5,6\n-    const currentDate = new Date();\n-    const currentDayIndex = currentDate.getDay(); // нашли индекс текущего дня\n+        function createCompareGraph(graphData) {\n+            const canvasId = `compare-chart-${Math.random().toString(36).substr(2, 9)}`;\n+            const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]; // индексы этих дней: 0,1,2,3,4,5,6\n+            const currentDate = new Date();\n+            const currentDayIndex = currentDate.getDay(); // нашли индекс текущего дня\n \n-    // меняем массив дней недели так, чтобы справа был текущий день недели\n-    const labels = [...daysOfWeek.slice(currentDayIndex + 1), ...daysOfWeek.slice(0, currentDayIndex + 1)];\n+            // меняем массив дней недели так, чтобы справа был текущий день недели\n+            const labels = [...daysOfWeek.slice(currentDayIndex + 1), ...daysOfWeek.slice(0, currentDayIndex + 1)];\n \n-    const currentWeekData = new Array(7).fill(0); // Продажи текущей недели\n-    const previousWeekData = new Array(7).fill(0); // Продажи предыдущей \n+            const currentWeekData = new Array(7).fill(0); // Продажи текущей недели\n+            const previousWeekData = new Array(7).fill(0); // Продажи предыдущей \n \n-    // меняем строку даты в объект Date\n-    const parseDate = (dateString) => {\n-        const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n-        return new Date(`20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n-    };\n+            // меняем строку даты в объект Date\n+            const parseDate = (dateString) => {\n+                const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n+                return new Date(\n+                `20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n+            };\n \n-    // Функция для получения индекса дня недели\n-    const getWeekdayIndex = (date) => {\n-        return date.getDay();\n-    };\n+            // Функция для получения индекса дня недели\n+            const getWeekdayIndex = (date) => {\n+                return date.getDay();\n+            };\n \n-    // Заполняем данные продаж для текущей и предыдущей недели\n-    for (const [dateString, count] of Object.entries(graphData)) {\n-        const date = parseDate(dateString);\n-        const dayDiff = Math.floor((currentDate - date) / (1000 * 60 * 60 * 24));\n-        if (dayDiff >= 0 && dayDiff < 7) {\n-            currentWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n-        } else if (dayDiff >= 7 && dayDiff < 14) {\n-            previousWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n-        }\n-    }\n+            // Заполняем данные продаж для текущей и предыдущей недели\n+            for (const [dateString, count] of Object.entries(graphData)) {\n+                const date = parseDate(dateString);\n+                const dayDiff = Math.floor((currentDate - date) / (1000 * 60 * 60 * 24));\n+                if (dayDiff >= 0 && dayDiff < 7) {\n+                    currentWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n+                } else if (dayDiff >= 7 && dayDiff < 14) {\n+                    previousWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n+                }\n+            }\n \n-    setTimeout(() => {\n-        const ctx = document.getElementById(canvasId).getContext('2d');\n-        new Chart(ctx, {\n-            type: 'bar',\n-            data: {\n-                labels: labels,\n-                datasets: [{\n-                    label: 'Продажи предыдущей недели', // убрал это обозначение\n-                    data: previousWeekData,\n-                    backgroundColor: 'rgba(75, 192, 192, 0.6)',\n-                    borderColor: 'rgba(75, 192, 192, 1)',\n-                    borderWidth: 1\n-                }, {\n-                    label: 'Продажи текущей недели', // убрал это обозначение\n-                    data: currentWeekData,\n-                    backgroundColor: 'rgba(153, 102, 255, 0.6)',\n-                    borderColor: 'rgba(153, 102, 255, 1)',\n-                    borderWidth: 1\n-                }]\n-            },\n-            options: {\n-                scales: {\n-                    y: {\n-                        display: false // Скрыть ось Y\n+            setTimeout(() => {\n+                const ctx = document.getElementById(canvasId).getContext('2d');\n+                new Chart(ctx, {\n+                    type: 'bar',\n+                    data: {\n+                        labels: labels,\n+                        datasets: [{\n+                            label: 'Продажи предыдущей недели', // убрал это обозначение\n+                            data: previousWeekData,\n+                            backgroundColor: 'rgba(75, 192, 192, 0.6)',\n+                            borderColor: 'rgba(75, 192, 192, 1)',\n+                            borderWidth: 1\n+                        }, {\n+                            label: 'Продажи текущей недели', // убрал это обозначение\n+                            data: currentWeekData,\n+                            backgroundColor: 'rgba(153, 102, 255, 0.6)',\n+                            borderColor: 'rgba(153, 102, 255, 1)',\n+                            borderWidth: 1\n+                        }]\n                     },\n-                    x: {\n-                        display: true,\n-                        ticks: {\n-                            color: 'grey' // Цвет текста на оси X\n-                        }\n-                    }\n-                },\n-                plugins: {\n-                    legend: {\n-                        display: false // Скрыть легенду\n-                    },\n-                    tooltip: {\n-                        enabled: true,\n-                        callbacks: {\n-                            label: function (tooltipItem) {\n-                                let label = tooltipItem.dataset.label || '';\n-                                if (label) {\n-                                    label += ': ';\n+                    options: {\n+                        scales: {\n+                            y: {\n+                                display: false // Скрыть ось Y\n+                            },\n+                            x: {\n+                                display: true,\n+                                ticks: {\n+                                    color: 'grey' // Цвет текста на оси X\n                                 }\n-                                label += tooltipItem.raw.toFixed(2);\n-                                return label;\n                             }\n-                        }\n+                        },\n+                        plugins: {\n+                            legend: {\n+                                display: false // Скрыть легенду\n+                            },\n+                            tooltip: {\n+                                enabled: true,\n+                                callbacks: {\n+                                    label: function (tooltipItem) {\n+                                        let label = tooltipItem.dataset.label || '';\n+                                        if (label) {\n+                                            label += ': ';\n+                                        }\n+                                        label += tooltipItem.raw.toFixed(2);\n+                                        return label;\n+                                    }\n+                                }\n+                            }\n+                        },\n+                        maintainAspectRatio: false,\n+                        responsive: true\n                     }\n-                },\n-                maintainAspectRatio: false,\n-                responsive: true\n+                });\n+            }, 100);\n+\n+            return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n+        }\n+\n+\n+        // Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n+        document.querySelector('.deleteModify').addEventListener('click', function () {\n+            if ($(this).text() === \"Показать товар без модификаций\") {\n+                $(this).text(\"Показать модификации\");\n+                $.getJSON('data.json', function (response) {\n+                    const originalData = response.data;\n+                    const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n+\n+                    // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n+                    const nodesToRemove = [];\n+                    console.log('nodesToRemove: ', nodesToRemove);\n+                    gridOptions.api.forEachNode(node => {\n+                        nodesToRemove.push(node);\n+                    });\n+\n+                    gridOptions.api.applyTransaction({\n+                        remove: nodesToRemove,\n+                        add: rowDataWithoutSizes\n+                    });\n+                }).fail(function () {\n+                    console.error('Ошибка при загрузке данных');\n+                });\n+\n+            } else if ($(this).text() === \"Показать модификации\") {\n+                $(this).text(\"Показать товар без модификации\");\n+                //  // Загружаем и отображаем модификации\n+                //  $.getJSON('data.json', function (response) {\n+                //     const originalData = response.data;\n+                //     const modifiedData = transformData(originalData);\n+\n+                //     gridOptions.api.applyTransaction({\n+                //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n+                //         add: modifiedData\n+                //     });\n+                // }).fail(function () {\n+                //     console.error('Ошибка при загрузке данных');\n+                // });\n+                location.reload()\n             }\n+\n         });\n-    }, 100);\n \n-    return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n-}\n-     \n \n-// Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n-document.querySelector('.deleteModify').addEventListener('click', function () {\n-    if ($(this).text() === \"Показать товар без модификаций\") {   \n-        $(this).text(\"Показать модификации\");   \n-        $.getJSON('data.json', function (response) {\n-        const originalData = response.data;\n-        const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n \n-        // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n-        const nodesToRemove = [];\n-        console.log('nodesToRemove: ',nodesToRemove);\n-        gridOptions.api.forEachNode(node => {\n-            nodesToRemove.push(node);\n+        // Добавление события для кнопки сброса всех фильтров\n+        document.querySelector('#resetFilters').addEventListener('click', function () {\n+            gridOptions.api.setFilterModel(null);\n         });\n \n-        gridOptions.api.applyTransaction({\n-            remove: nodesToRemove,\n-            add: rowDataWithoutSizes\n-        });\n-    }).fail(function () {\n-        console.error('Ошибка при загрузке данных');\n-    });\n-       \n-    } else if ($(this).text() === \"Показать модификации\") {\n-         $(this).text(\"Показать товар без модификации\");      \n-        //  // Загружаем и отображаем модификации\n-        //  $.getJSON('data.json', function (response) {\n-        //     const originalData = response.data;\n-        //     const modifiedData = transformData(originalData);\n \n-        //     gridOptions.api.applyTransaction({\n-        //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n-        //         add: modifiedData\n-        //     });\n-        // }).fail(function () {\n-        //     console.error('Ошибка при загрузке данных');\n-        // });\n-        location.reload()\n-    }\n-    \n-});\n+        // Обработчик кнопки \"Рассчитать пополнение (шт)\"\n+        document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n+            const daysInputElement = document.querySelector('#daysInput');\n+            const daysInput = daysInputElement.value;\n \n+            if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n+                alert('Введите число в диапазоне от 15 до 45');\n+            }\n \n+            // Проверяем, что daysInput не пустой и является числом\n+            if (daysInput && !isNaN(daysInput)) {\n+                // Рассчитываем replenish для каждой строки\n+                gridOptions.api.forEachNode(rowNode => {\n+                    const orders1m = rowNode.data.orders1m;\n+                    const stockDays = rowNode.data.stockDays;\n \n-// Добавление события для кнопки сброса всех фильтров\n-document.querySelector('#resetFilters').addEventListener('click', function() {\n-        gridOptions.api.setFilterModel(null);\n-    });\n- \n- \n-// Обработчик кнопки \"Рассчитать пополнение (шт)\"\n-document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n-    const daysInputElement = document.querySelector('#daysInput');\n-    const daysInput = daysInputElement.value;\n+                    if (orders1m !== 0 && stockDays !== 0) {\n+                        let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n \n-    if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n-        alert('Введите число в диапазоне от 15 до 45');\n-    } \n+                        // Обновляем данные в текущей строке\n+                        rowNode.setDataValue('replenish', replenish);\n+                    }\n+                });\n \n-    // Проверяем, что daysInput не пустой и является числом\n-    if (daysInput && !isNaN(daysInput)) {\n-        // Рассчитываем replenish для каждой строки\n-        gridOptions.api.forEachNode(rowNode => {\n-            const orders1m = rowNode.data.orders1m;\n-            const stockDays = rowNode.data.stockDays;\n-\n-            if (orders1m !== 0 && stockDays !== 0) {\n-                let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n-\n-                // Обновляем данные в текущей строке\n-                rowNode.setDataValue('replenish', replenish);\n+                // Очищаем значение инпута после выполнения расчетов\n+                daysInputElement.value = '';\n+            } else {\n+                console.error('Введите корректное значение для количества дней');\n             }\n         });\n \n-        // Очищаем значение инпута после выполнения расчетов\n-        daysInputElement.value = '';\n-    } else {\n-        console.error('Введите корректное значение для количества дней');\n-    }\n-});\n \n-    \n-document.addEventListener('DOMContentLoaded', function () {\n-    const gridDiv = document.querySelector('#myGrid');\n-    new agGrid.Grid(gridDiv, gridOptions);\n+        document.addEventListener('DOMContentLoaded', function () {\n+            const gridDiv = document.querySelector('#myGrid');\n+            new agGrid.Grid(gridDiv, gridOptions);\n \n-    fetchData();\n+            fetchData();\n \n-    \n-    \n-});\n \n \n+        });\n     </script>\n </body>\n+\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720112141411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n <!DOCTYPE html>\n <html lang=\"en\">\n-\n <head>\n     <meta charset=\"UTF-8\">\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n     <title>Document</title>\n@@ -14,638 +13,580 @@\n     <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n     <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n     <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n     <style>\n-        img {\n+        img{\n             height: 120px;\n             padding: 2%;\n         }\n-\n         .red-text {\n-            background-color: red;\n-            color: white;\n-            /* белый текст на красном фоне */\n-            padding: 2px 5px;\n-            /* отступы вокруг текста */\n-            border-radius: 3px;\n-            /* скругление углов */\n-        }\n+    background-color: red;\n+    color: white; /* белый текст на красном фоне */\n+    padding: 2px 5px; /* отступы вокруг текста */\n+    border-radius: 3px; /* скругление углов */\n+}\n \n-        .orange-text {\n-            background-color: orange;\n-            color: black;\n-            /* черный текст на оранжевом фоне */\n-            padding: 2px 5px;\n-            border-radius: 3px;\n-        }\n+.orange-text {\n+    background-color: orange;\n+    color: black; /* черный текст на оранжевом фоне */\n+    padding: 2px 5px;\n+    border-radius: 3px;\n+}\n \n-        .yellow-text {\n-            background-color: yellow;\n-            color: black;\n-            padding: 2px 5px;\n-            border-radius: 3px;\n-        }\n+.yellow-text {\n+    background-color: yellow;\n+    color: black;\n+    padding: 2px 5px;\n+    border-radius: 3px;\n+}\n \n-        .green-text {\n-            background-color: green;\n-            color: white;\n-            padding: 2px 5px;\n-            border-radius: 3px;\n-        }\n-\n-        .table-wrapper {\n+.green-text {\n+    background-color: green;\n+    color: white;\n+    padding: 2px 5px;\n+    border-radius: 3px;\n+}\n+.table-wrapper {\n             display: flex;\n             flex-direction: column;\n             height: 100vh;\n             padding: 20px;\n             width: 100vw;\n             align-items: center;\n         }\n-\n         .headerContainer {\n             display: flex;\n             justify-content: space-between;\n             align-items: center;\n             margin-bottom: 15px;\n             width: 80vw;\n         }\n-\n-        .input-group,\n-        .btn-wrapper {\n+        .input-group,.btn-wrapper{\n             height: 50px;\n         }\n-\n-        input,\n-        button {\n+        input, button{\n             height: 100% !important;\n             font-size: small !important;\n         }\n-\n-        .input-group {\n+        .input-group{\n             width: 40vw !important;\n         }\n-\n         .table-inner {\n-\n+          \n             width: 100%;\n         }\n-\n         #myGrid {\n             /* height: calc(100% - 50px); */\n             width: 100%;\n         }\n-\n         #loading {\n             text-align: center;\n             padding: 20px;\n             font-size: 1.5rem;\n         }\n-\n         #resetFilters {\n             margin-bottom: 10px;\n         }\n+\n+\n     </style>\n </head>\n-\n <body>\n     <div class=\"table-wrapper\">\n         <div class=\"headerContainer\">\n             <div class=\"input-group\">\n                 <input type=\"number\" id=\"daysInput\" class=\"form-control\" placeholder=\"Введите количество дней\"\n                     aria-label=\"Введите количество дней от 15 до 45\" aria-describedby=\"basic-addon2\" min=\"15\" max=\"45\">\n                 <div class=\"input-group-append\">\n-                    <button class=\"btn btn-outline-secondary calculateReplenishment\" type=\"button\">Рассчитать пополнение\n-                        (шт)</button>\n+                    <button class=\"btn btn-outline-secondary calculateReplenishment\" type=\"button\">Рассчитать пополнение (шт)</button>\n                 </div>\n             </div>\n-            <div class=\"btn-wrapper\"> <button id=\"resetFilters\" class=\"btn btn-outline-secondary \">Сбросить все\n-                    фильтры</button> </div>\n-            <div class=\"btn-wrapper\"> <button class=\"btn btn-outline-secondary deleteModify\" type=\"button\">Показать\n-                    товар без модификаций</button></div>\n-\n-\n+            <div class=\"btn-wrapper\"> <button id=\"resetFilters\" class=\"btn btn-outline-secondary \">Сбросить все фильтры</button> </div>\n+            <div class=\"btn-wrapper\"> <button class=\"btn btn-outline-secondary deleteModify\" type=\"button\">Показать товар без модификаций</button></div>\n+            \n+           \n         </div>\n-\n+        \n         <div class=\"table-inner container mt-4\">\n             <div id=\"myGrid\" class=\"ag-theme-alpine\" style=\"height: 600px\"></div>\n             <div id=\"loading\" style=\"display: none;\">Загрузка...</div>\n         </div>\n     </div>\n \n     <script>\n-        // Определение столбцов и параметров сетки\n-        const columnDefs = [{\n-                headerName: '№',\n-                valueGetter: 'node.rowIndex + 1',\n-                width: 60,\n-                sortable: false,\n-                filter: false\n-            },\n-            {\n-                headerName: 'Фото',\n-                field: 'photo',\n-                width: 100,\n-                cellRenderer: params => `<img src=\"${params.value}\">`\n-            },\n-            {\n-                headerName: 'Предмет',\n-                field: 'subjectName',\n-                width: 120\n-            },\n-            {\n-                headerName: 'Номенклатура',\n-                field: 'nmID',\n-                width: 160\n-            },\n-            {\n-                headerName: 'Размер',\n-                field: 'size',\n-                width: 120\n-            },\n-            {\n-                headerName: 'Заказы 1м',\n-                field: 'orders1m',\n-                width: 150\n-            },\n-            {\n-                headerName: 'Заказы 14 д',\n-                field: 'orders14d',\n-                width: 150\n-            },\n-            // { headerName: 'График продаж за месяц', field: 'salesGraph', width: 250, cellRenderer: params => createSalesGraph(params.data.salesGraph) },\n-            // { headerName: 'Сравнение продаж (нед)', field: 'compareGraph', width: 250, cellRenderer: params => createCompareGraph(params.data.graph) },\n-            {\n-                headerName: 'Графики',\n-                field: 'graph',\n-                width: 300,\n-                cellRenderer: params => createToggleableGraph(params)\n-            },\n-            {\n-                headerName: 'Остаток (шт)',\n-                field: 'stock',\n-                width: 120,\n-                cellRenderer: function (params) {\n-                    const value = params.value;\n-                    let className = '';\n-                    if (value >= 0 && value <= 1.99) {\n-                        className = 'red-text';\n-                    } else if (value >= 2 && value <= 5.99) {\n-                        className = 'orange-text';\n-                    } else if (value >= 6 && value <= 10.99) {\n-                        className = 'yellow-text';\n-                    } else if (value >= 11) {\n-                        className = 'green-text';\n-                    }\n-\n-                    return `<span class=\"${className}\">${value}</span>`;\n-                }\n-            },\n-            {\n-                headerName: 'Остаток (дн)',\n-                field: 'stockDays',\n-                width: 120,\n-                cellRenderer: function (params) {\n-                    const value = params.value;\n-                    let className = '';\n-                    if (value >= 0 && value <= 1.99) {\n-                        className = 'red-text';\n-                    } else if (value >= 2 && value <= 5.99) {\n-                        className = 'orange-text';\n-                    } else if (value >= 6 && value <= 10.99) {\n-                        className = 'yellow-text';\n-                    } else if (value >= 11) {\n-                        className = 'green-text';\n-                    }\n-\n-                    return `<span class=\"${className}\">${value}</span>`;\n-                }\n-            },\n-            {\n-                headerName: 'Пополнить (шт)',\n-                field: 'replenish',\n-                width: 120\n-            },\n-            {\n-                headerName: 'Артикул',\n-                field: 'vendorCode',\n-                width: 150,\n+     // Определение столбцов и параметров сетки\n+const columnDefs = [\n+    { headerName: '№', valueGetter: 'node.rowIndex + 1', width: 60, sortable: false, filter: false },\n+    { headerName: 'Фото', field: 'photo', width: 100, cellRenderer: params => `<img src=\"${params.value}\">` },\n+    { headerName: 'Предмет', field: 'subjectName', width: 120 },\n+    { headerName: 'Номенклатура', field: 'nmID', width: 160 },\n+    { headerName: 'Размер', field: 'size', width: 120 },\n+    { headerName: 'Заказы 1м', field: 'orders1m', width: 150 },\n+    { headerName: 'Заказы 14 д', field: 'orders14d', width: 150 },\n+    // { headerName: 'График продаж за месяц', field: 'salesGraph', width: 250, cellRenderer: params => createSalesGraph(params.data.salesGraph) },\n+    // { headerName: 'Сравнение продаж (нед)', field: 'compareGraph', width: 250, cellRenderer: params => createCompareGraph(params.data.graph) },\n+    {\n+        headerName: 'Графики',\n+        field: 'graph',\n+        width: 300,\n+        cellRenderer: params => createToggleableGraph(params)\n+    },\n+    {\n+        headerName: 'Остаток (шт)',\n+        field: 'stock',\n+        width: 120,\n+        cellRenderer: function(params) {\n+            const value = params.value;\n+            let className = '';\n+            if (value >= 0 && value <= 1.99) {\n+                className = 'red-text';\n+            } else if (value >= 2 && value <= 5.99) {\n+                className = 'orange-text';\n+            } else if (value >= 6 && value <= 10.99) {\n+                className = 'yellow-text';\n+            } else if (value >= 11) {\n+                className = 'green-text';\n             }\n-        ];\n-        //переключаем графики\n-        function createToggleableGraph(params) {\n-            const container = document.createElement('div');\n-            let currentGraph = 'compareGraph';\n \n-            function toggleGraph() {\n-                currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n-                const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n-                container.innerHTML = createGraphComponent(graphData);\n+            return `<span class=\"${className}\">${value}</span>`;\n+        }\n+    },\n+    {\n+        headerName: 'Остаток (дн)',\n+        field: 'stockDays',\n+        width: 120,\n+        cellRenderer: function(params) {\n+            const value = params.value;\n+            let className = '';\n+            if (value >= 0 && value <= 1.99) {\n+                className = 'red-text';\n+            } else if (value >= 2 && value <= 5.99) {\n+                className = 'orange-text';\n+            } else if (value >= 6 && value <= 10.99) {\n+                className = 'yellow-text';\n+            } else if (value >= 11) {\n+                className = 'green-text';\n             }\n \n-            function createGraphComponent(graphData) {\n-                if (currentGraph === 'compareGraph') {\n-                    return createCompareGraph(graphData);\n-                } else {\n-                    return createSalesGraph(graphData);\n-                }\n-            }\n+            return `<span class=\"${className}\">${value}</span>`;\n+        }\n+    },\n+    { headerName: 'Пополнить (шт)', field: 'replenish',width: 120 },\n+    { headerName: 'Артикул', field: 'vendorCode', width: 150, }\n+];\n+//переключаем графики\n+function createToggleableGraph(params) {\n+    const container = document.createElement('div');\n+    let currentGraph = 'compareGraph'; \n \n-            container.innerHTML = createGraphComponent(params.data.graph);\n-            container.addEventListener('click', toggleGraph);\n+    function toggleGraph() {\n+        currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n+        const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n+        container.innerHTML = createGraphComponent(graphData);\n+    }\n \n-            return container;\n+    function createGraphComponent(graphData) {\n+        if (currentGraph === 'compareGraph') {\n+            return createCompareGraph(graphData);\n+        } else {\n+            return createSalesGraph(graphData);\n         }\n+    }\n \n+    container.innerHTML = createGraphComponent(params.data.graph);\n+    container.addEventListener('click', toggleGraph);\n \n+    return container;\n+}\n \n \n-        const localeText = {\n-            // Русификация фильтров\n-            page: 'страница',\n-            more: 'ещё',\n-            to: 'к',\n-            of: 'из',\n-            next: 'следующий',\n-            last: 'последний',\n-            first: 'первый',\n-            previous: 'предыдущий',\n-            loadingOoo: 'Загрузка...',\n-            applyFilter: 'Применить фильтр...',\n-            equals: 'Равно',\n-            notEqual: 'Не равно',\n-            filterOoo: 'Фильтр...',\n-            contains: 'Содержит',\n-            notContains: 'Не содержит',\n-            startsWith: 'Начинается с',\n-            endsWith: 'Заканчивается на',\n-            andCondition: 'И',\n-            orCondition: 'Или'\n-        };\n+ \n \n+const localeText = {\n+    // Русификация фильтров\n+    page: 'страница',\n+    more: 'ещё',\n+    to: 'к',\n+    of: 'из',\n+    next: 'следующий',\n+    last: 'последний',\n+    first: 'первый',\n+    previous: 'предыдущий',\n+    loadingOoo: 'Загрузка...',\n+    applyFilter: 'Применить фильтр...',\n+    equals: 'Равно',\n+    notEqual: 'Не равно',\n+    filterOoo: 'Фильтр...',\n+    contains: 'Содержит',\n+    notContains: 'Не содержит',\n+    startsWith: 'Начинается с',\n+    endsWith: 'Заканчивается на',\n+    andCondition: 'И',\n+    orCondition: 'Или'\n+};\n \n \n-        const gridOptions = {\n-            enableCellTextSelection: true,\n-            columnDefs: columnDefs,\n-            defaultColDef: {\n-                sortable: true,\n-                filter: true,\n-                resizable: true\n-            },\n-            rowData: [],\n-            localeText: localeText,\n-            rowHeight: 120,\n-            getRowId: params => {\n-                const id = params.data.uniqueId;\n-                console.log('Row ID:', id, 'Data:', params);\n-                return id;\n-            }\n-        };\n \n+const gridOptions = {\n+    enableCellTextSelection: true,\n+    columnDefs: columnDefs,\n+    defaultColDef: {\n+        sortable: true,\n+        filter: true,\n+        resizable: true\n+    },\n+    rowData: [],\n+    localeText: localeText,\n+    rowHeight: 120,\n+    getRowId: params => {\n+        const id = params.data.uniqueId;\n+        console.log('Row ID:', id, 'Data:', params);\n+        return id;\n+    }\n+};\n \n-        // Функция для преобразования данных\n-        function transformData(data) {\n-            let transformedData = [];\n-            data.forEach(item => {\n-                item.allowed_sizes.forEach(size => {\n-                    let stock = item.stocks ? item.stocks[size] || 0 : 0;\n-                    let orders1m = item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n-                    let stockDays = orders1m !== 0 ? parseFloat((stock / orders1m).toFixed(2)) : 0;\n \n-                    // Создаем уникальный идентификатор на основе генератора\n-                    let uniqueId = `${item.nmID}-${size}`;\n-                    console.log('uniqueId в начале', uniqueId);\n-                    // console.log('Transformed uniqueId:', uniqueId);\n-                    // console.log('item.graph :', item.graph );\n-                    transformedData.push({\n-                        uniqueId: uniqueId, // Добавляем уникальный идентификатор\n-                        photo: item.photos ? item.photos[0][\"c516x688\"] : '',\n-                        subjectName: item.subjectName,\n-                        nmID: item.nmID,\n-                        size: size,\n-                        orders1m: orders1m,\n-                        orders14d: item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0,\n-                        salesGraph: item[\"30stat\"], // Данные для графика,\n-                        graph: item.graph, // Данные для сравнения графиков продаж\n-                        stock: stock,\n-                        stockDays: stockDays,\n-                        replenish: '',\n-                        vendorCode: item.vendorCode\n-                    });\n-                });\n+// Функция для преобразования данных\n+function transformData(data) {\n+    let transformedData = [];\n+    data.forEach(item => {\n+        item.allowed_sizes.forEach(size => {\n+            let stock = item.stocks ? item.stocks[size] || 0 : 0;\n+            let orders1m = item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n+            let stockDays = orders1m !== 0 ? parseFloat((stock / orders1m).toFixed(2)) : 0;\n+\n+            // Создаем уникальный идентификатор на основе генератора\n+            let uniqueId = `${item.nmID}-${size}`;\n+            console.log('uniqueId в начале' , uniqueId);\n+            // console.log('Transformed uniqueId:', uniqueId);\n+            // console.log('item.graph :', item.graph );\n+            transformedData.push({\n+                uniqueId: uniqueId, // Добавляем уникальный идентификатор\n+                photo: item.photos ? item.photos[0][\"c516x688\"] : '',\n+                subjectName: item.subjectName,\n+                nmID: item.nmID,\n+                size: size,\n+                orders1m: orders1m,\n+                orders14d: item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0,\n+                salesGraph: item[\"30stat\"], // Данные для графика,\n+                graph: item.graph ,// Данные для сравнения графиков продаж\n+                stock: stock,\n+                stockDays: stockDays,\n+                replenish: '',\n+                vendorCode: item.vendorCode\n             });\n-            return transformedData;\n-        }\n+        });\n+    });\n+    return transformedData;\n+}\n \n-        // Функция для преобразования данных без размеров\n-        function transformDataWithoutSizes(data) {\n-            let transformedData = [];\n-            data.forEach(item => {\n-                let totalStock = 0;\n-                let totalOrders1m = 0;\n-                let totalOrders14d = 0;\n+// Функция для преобразования данных без размеров\n+function transformDataWithoutSizes(data) {\n+    let transformedData = [];\n+    data.forEach(item => {\n+        let totalStock = 0;\n+        let totalOrders1m = 0;\n+        let totalOrders14d = 0;\n+        \n+         console.log('item.graph ',item.graph);\n \n-                console.log('item.graph ', item.graph);\n+        item.allowed_sizes.forEach(size => {\n+            totalStock += item.stocks ? item.stocks[size] || 0 : 0;\n+            totalOrders1m += item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n+            totalOrders14d += item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0;\n+        });\n \n-                item.allowed_sizes.forEach(size => {\n-                    totalStock += item.stocks ? item.stocks[size] || 0 : 0;\n-                    totalOrders1m += item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n-                    totalOrders14d += item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0;\n-                });\n+        let stockDays = totalOrders1m !== 0 ? parseFloat((totalStock / totalOrders1m).toFixed(2)) : 0;\n+let orders1m  = parseFloat(totalOrders1m.toFixed(2))\n+let orders14d  = parseFloat(totalOrders14d.toFixed(2))\n+        let uniqueId = item.nmID;\n+        console.log('uniqueId во второй' , uniqueId);\n+        transformedData.push({\n+            uniqueId: uniqueId, // Добавляем уникальный идентификатор\n+            photo: item.photos ? item.photos[0].c246x328 : '',\n+            subjectName: item.subjectName,\n+            nmID: item.nmID,\n+            size: '-', // Прочерк для размера\n+            orders1m: orders1m,\n+            orders14d: orders14d,\n+            salesGraph: item[\"30stat\"],\n+            compareGraph: item.graph, \n+            stock: totalStock,\n+            stockDays: stockDays, //  добавить логику для расчета\n+            replenish: '',\n+            vendorCode: item.vendorCode\n+        });\n+    });\n+    return transformedData;\n+}\n \n-                let stockDays = totalOrders1m !== 0 ? parseFloat((totalStock / totalOrders1m).toFixed(2)) : 0;\n-                let orders1m = parseFloat(totalOrders1m.toFixed(2))\n-                let orders14d = parseFloat(totalOrders14d.toFixed(2))\n-                let uniqueId = item.nmID;\n-                console.log('uniqueId во второй', uniqueId);\n-                transformedData.push({\n-                    uniqueId: uniqueId, // Добавляем уникальный идентификатор\n-                    photo: item.photos ? item.photos[0].c246x328 : '',\n-                    subjectName: item.subjectName,\n-                    nmID: item.nmID,\n-                    size: '-', // Прочерк для размера\n-                    orders1m: orders1m,\n-                    orders14d: orders14d,\n-                    salesGraph: item[\"30stat\"],\n-                    compareGraph: item.graph,\n-                    stock: totalStock,\n-                    stockDays: stockDays, //  добавить логику для расчета\n-                    replenish: '',\n-                    vendorCode: item.vendorCode\n-                });\n-            });\n-            return transformedData;\n-        }\n+// Функция для загрузки данных и отображения таблицы\n+function fetchData() {\n+    $.getJSON('data.json', function (response) {\n+        const originalData = response.data;\n+        const rowData = transformData(originalData);\n+        gridOptions.api.applyTransaction({ add: rowData });\n+    }).fail(function () {\n+        console.error('Ошибка при загрузке данных');\n+    });\n+}\n \n-        // Функция для загрузки данных и отображения таблицы\n-        function fetchData() {\n-            $.getJSON('data.json', function (response) {\n-                const originalData = response.data;\n-                const rowData = transformData(originalData);\n-                gridOptions.api.applyTransaction({\n-                    add: rowData\n-                });\n-            }).fail(function () {\n-                console.error('Ошибка при загрузке данных');\n-            });\n-        }\n-\n-        // График на 30 дней\n-        function createSalesGraph(statData) {\n-            const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n-            setTimeout(() => {\n-                const ctx = document.getElementById(canvasId).getContext('2d');\n-                new Chart(ctx, {\n-                    type: 'line',\n-                    data: {\n-                        labels: Object.keys(statData),\n-                        datasets: [{\n-                            label: 'Продажи',\n-                            data: Object.values(statData),\n-                            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n-                            borderColor: 'rgba(75, 192, 192, 1)',\n-                            borderWidth: 1,\n-                            pointRadius: 0,\n-                            borderWidth: 1, // Устанавливаем толщину линии\n-                            pointHoverRadius: 5, // Радиус точки при наведении\n-                        }]\n+// График на 30 дней\n+function createSalesGraph(statData) {\n+    const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n+    setTimeout(() => {\n+        const ctx = document.getElementById(canvasId).getContext('2d');\n+        new Chart(ctx, {\n+            type: 'line',\n+            data: {\n+                labels: Object.keys(statData),\n+                datasets: [{\n\\ No newline at end of file\n+                    label: 'Продажи',\n+                    data: Object.values(statData),\n+                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n+                    borderColor: 'rgba(75, 192, 192, 1)',\n+                    borderWidth: 1,\n+                    pointRadius: 0,\n+                    borderWidth: 1, // Устанавливаем толщину линии\n+                    pointHoverRadius: 5, // Радиус точки при наведении\n+                }]\n+            },\n+            options: {\n+                responsive: true,\n+                maintainAspectRatio: false,\n+                scales: {\n+                    x: {\n+                        display: true, // Отображение оси X\n+                        ticks: {\n+                            display: false // Скрываем метки по оси X\n+                        }\n                     },\n-                    options: {\n-                        responsive: true,\n-                        maintainAspectRatio: false,\n-                        scales: {\n-                            x: {\n-                                display: true, // Отображение оси X\n-                                ticks: {\n-                                    display: false // Скрываем метки по оси X\n-                                }\n-                            },\n-                            y: {\n-                                display: true, // Отображение оси Y\n-                                ticks: {\n-                                    display: false // Скрываем метки по оси Y\n-                                }\n+                    y: {\n+                        display: true, // Отображение оси Y\n+                        ticks: {\n+                            display: false // Скрываем метки по оси Y\n+                        }\n+                    }\n+                },\n+                plugins: {\n+                    legend: {\n+                        display: false // Убираем легенду\n+                    },\n+                    tooltip: {\n+                        callbacks: {\n+                            label: function (context) {\n+                                return `Дата: ${context.label}, Количество: ${context.parsed.y}`;\n                             }\n-                        },\n-                        plugins: {\n-                            legend: {\n-                                display: false // Убираем легенду\n-                            },\n-                            tooltip: {\n-                                callbacks: {\n-                                    label: function (context) {\n-                                        return `Дата: ${context.label}, Количество: ${context.parsed.y}`;\n-                                    }\n-                                }\n-                            },\n-                            hover: {\n-                                mode: 'index',\n-                                intersect: false,\n-                            }\n-                        },\n-                        interaction: {\n-                            mode: 'index',\n-                            intersect: false,\n-                        },\n-                        elements: {\n-                            point: {\n-                                radius: 0, // Скрываем точки\n-                                hoverRadius: 5, // Радиус точки при наведении\n-                                hitRadius: 10, // Радиус области взаимодействия точки\n-                            }\n                         }\n+                    },\n+                    hover: {\n+                        mode: 'index',\n+                        intersect: false,\n                     }\n-                });\n-            }, 100);\n-            return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n-        }\n+                },\n+                interaction: {\n+                    mode: 'index',\n+                    intersect: false,\n+                },\n+                elements: {\n+                    point: {\n+                        radius: 0, // Скрываем точки\n+                        hoverRadius: 5, // Радиус точки при наведении\n+                        hitRadius: 10, // Радиус области взаимодействия точки\n+                    }\n+                }\n+            }\n+        });\n+    }, 100);\n+    return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n+}\n \n-        function createCompareGraph(graphData) {\n-            const canvasId = `compare-chart-${Math.random().toString(36).substr(2, 9)}`;\n-            const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]; // индексы этих дней: 0,1,2,3,4,5,6\n-            const currentDate = new Date();\n-            const currentDayIndex = currentDate.getDay(); // нашли индекс текущего дня\n+function createCompareGraph(graphData) {\n+    const canvasId = `compare-chart-${Math.random().toString(36).substr(2, 9)}`;\n+    const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]; // индексы этих дней: 0,1,2,3,4,5,6\n+    const currentDate = new Date();\n+    const currentDayIndex = currentDate.getDay(); // нашли индекс текущего дня\n \n-            // меняем массив дней недели так, чтобы справа был текущий день недели\n-            const labels = [...daysOfWeek.slice(currentDayIndex + 1), ...daysOfWeek.slice(0, currentDayIndex + 1)];\n+    // меняем массив дней недели так, чтобы справа был текущий день недели\n+    const labels = [...daysOfWeek.slice(currentDayIndex + 1), ...daysOfWeek.slice(0, currentDayIndex + 1)];\n \n-            const currentWeekData = new Array(7).fill(0); // Продажи текущей недели\n-            const previousWeekData = new Array(7).fill(0); // Продажи предыдущей \n+    const currentWeekData = new Array(7).fill(0); // Продажи текущей недели\n+    const previousWeekData = new Array(7).fill(0); // Продажи предыдущей \n \n-            // меняем строку даты в объект Date\n-            const parseDate = (dateString) => {\n-                const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n-                return new Date(\n-                `20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n-            };\n+    // меняем строку даты в объект Date\n+    const parseDate = (dateString) => {\n+        const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n+        return new Date(`20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n+    };\n \n-            // Функция для получения индекса дня недели\n-            const getWeekdayIndex = (date) => {\n-                return date.getDay();\n-            };\n+    // Функция для получения индекса дня недели\n+    const getWeekdayIndex = (date) => {\n+        return date.getDay();\n+    };\n \n-            // Заполняем данные продаж для текущей и предыдущей недели\n-            for (const [dateString, count] of Object.entries(graphData)) {\n-                const date = parseDate(dateString);\n-                const dayDiff = Math.floor((currentDate - date) / (1000 * 60 * 60 * 24));\n-                if (dayDiff >= 0 && dayDiff < 7) {\n-                    currentWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n-                } else if (dayDiff >= 7 && dayDiff < 14) {\n-                    previousWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n-                }\n-            }\n+    // Заполняем данные продаж для текущей и предыдущей недели\n+    for (const [dateString, count] of Object.entries(graphData)) {\n+        const date = parseDate(dateString);\n+        const dayDiff = Math.floor((currentDate - date) / (1000 * 60 * 60 * 24));\n+        if (dayDiff >= 0 && dayDiff < 7) {\n+            currentWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n+        } else if (dayDiff >= 7 && dayDiff < 14) {\n+            previousWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n+        }\n+    }\n \n-            setTimeout(() => {\n-                const ctx = document.getElementById(canvasId).getContext('2d');\n-                new Chart(ctx, {\n-                    type: 'bar',\n-                    data: {\n-                        labels: labels,\n-                        datasets: [{\n-                            label: 'Продажи предыдущей недели', // убрал это обозначение\n-                            data: previousWeekData,\n-                            backgroundColor: 'rgba(75, 192, 192, 0.6)',\n-                            borderColor: 'rgba(75, 192, 192, 1)',\n-                            borderWidth: 1\n-                        }, {\n-                            label: 'Продажи текущей недели', // убрал это обозначение\n-                            data: currentWeekData,\n-                            backgroundColor: 'rgba(153, 102, 255, 0.6)',\n-                            borderColor: 'rgba(153, 102, 255, 1)',\n-                            borderWidth: 1\n-                        }]\n+    setTimeout(() => {\n+        const ctx = document.getElementById(canvasId).getContext('2d');\n+        new Chart(ctx, {\n+            type: 'bar',\n+            data: {\n+                labels: labels,\n+                datasets: [{\n+                    label: 'Продажи предыдущей недели', // убрал это обозначение\n+                    data: previousWeekData,\n+                    backgroundColor: 'rgba(75, 192, 192, 0.6)',\n+                    borderColor: 'rgba(75, 192, 192, 1)',\n+                    borderWidth: 1\n+                }, {\n+                    label: 'Продажи текущей недели', // убрал это обозначение\n+                    data: currentWeekData,\n+                    backgroundColor: 'rgba(153, 102, 255, 0.6)',\n+                    borderColor: 'rgba(153, 102, 255, 1)',\n+                    borderWidth: 1\n+                }]\n+            },\n+            options: {\n+                scales: {\n+                    y: {\n+                        display: false // Скрыть ось Y\n                     },\n-                    options: {\n-                        scales: {\n-                            y: {\n-                                display: false // Скрыть ось Y\n-                            },\n-                            x: {\n-                                display: true,\n-                                ticks: {\n-                                    color: 'grey' // Цвет текста на оси X\n+                    x: {\n+                        display: true,\n+                        ticks: {\n+                            color: 'grey' // Цвет текста на оси X\n+                        }\n+                    }\n+                },\n+                plugins: {\n+                    legend: {\n+                        display: false // Скрыть легенду\n+                    },\n+                    tooltip: {\n+                        enabled: true,\n+                        callbacks: {\n+                            label: function (tooltipItem) {\n+                                let label = tooltipItem.dataset.label || '';\n+                                if (label) {\n+                                    label += ': ';\n                                 }\n+                                label += tooltipItem.raw.toFixed(2);\n+                                return label;\n                             }\n-                        },\n-                        plugins: {\n-                            legend: {\n-                                display: false // Скрыть легенду\n-                            },\n-                            tooltip: {\n-                                enabled: true,\n-                                callbacks: {\n-                                    label: function (tooltipItem) {\n-                                        let label = tooltipItem.dataset.label || '';\n-                                        if (label) {\n-                                            label += ': ';\n-                                        }\n-                                        label += tooltipItem.raw.toFixed(2);\n-                                        return label;\n-                                    }\n-                                }\n-                            }\n-                        },\n-                        maintainAspectRatio: false,\n-                        responsive: true\n+                        }\n                     }\n-                });\n-            }, 100);\n+                },\n+                maintainAspectRatio: false,\n+                responsive: true\n+            }\n+        });\n+    }, 100);\n \n-            return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n-        }\n+    return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n+}\n+     \n \n+// Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n+document.querySelector('.deleteModify').addEventListener('click', function () {\n+    if ($(this).text() === \"Показать товар без модификаций\") {   \n+        $(this).text(\"Показать модификации\");   \n+        $.getJSON('data.json', function (response) {\n+        const originalData = response.data;\n+        const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n \n-        // Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n-        document.querySelector('.deleteModify').addEventListener('click', function () {\n-            if ($(this).text() === \"Показать товар без модификаций\") {\n-                $(this).text(\"Показать модификации\");\n-                $.getJSON('data.json', function (response) {\n-                    const originalData = response.data;\n-                    const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n+        // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n+        const nodesToRemove = [];\n+        console.log('nodesToRemove: ',nodesToRemove);\n+        gridOptions.api.forEachNode(node => {\n+            nodesToRemove.push(node);\n+        });\n \n-                    // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n-                    const nodesToRemove = [];\n-                    console.log('nodesToRemove: ', nodesToRemove);\n-                    gridOptions.api.forEachNode(node => {\n-                        nodesToRemove.push(node);\n-                    });\n-\n-                    gridOptions.api.applyTransaction({\n-                        remove: nodesToRemove,\n-                        add: rowDataWithoutSizes\n-                    });\n-                }).fail(function () {\n-                    console.error('Ошибка при загрузке данных');\n-                });\n-\n-            } else if ($(this).text() === \"Показать модификации\") {\n-                $(this).text(\"Показать товар без модификации\");\n-                //  // Загружаем и отображаем модификации\n-                //  $.getJSON('data.json', function (response) {\n-                //     const originalData = response.data;\n-                //     const modifiedData = transformData(originalData);\n-\n-                //     gridOptions.api.applyTransaction({\n-                //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n-                //         add: modifiedData\n-                //     });\n-                // }).fail(function () {\n-                //     console.error('Ошибка при загрузке данных');\n-                // });\n-                location.reload()\n-            }\n-\n+        gridOptions.api.applyTransaction({\n+            remove: nodesToRemove,\n+            add: rowDataWithoutSizes\n         });\n+    }).fail(function () {\n+        console.error('Ошибка при загрузке данных');\n+    });\n+       \n+    } else if ($(this).text() === \"Показать модификации\") {\n+         $(this).text(\"Показать товар без модификации\");      \n+        //  // Загружаем и отображаем модификации\n+        //  $.getJSON('data.json', function (response) {\n+        //     const originalData = response.data;\n+        //     const modifiedData = transformData(originalData);\n \n+        //     gridOptions.api.applyTransaction({\n+        //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n+        //         add: modifiedData\n+        //     });\n+        // }).fail(function () {\n+        //     console.error('Ошибка при загрузке данных');\n+        // });\n+        location.reload()\n+    }\n+    \n+});\n \n \n-        // Добавление события для кнопки сброса всех фильтров\n-        document.querySelector('#resetFilters').addEventListener('click', function () {\n-            gridOptions.api.setFilterModel(null);\n-        });\n \n+// Добавление события для кнопки сброса всех фильтров\n+document.querySelector('#resetFilters').addEventListener('click', function() {\n+        gridOptions.api.setFilterModel(null);\n+    });\n+ \n+ \n+// Обработчик кнопки \"Рассчитать пополнение (шт)\"\n+document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n+    const daysInputElement = document.querySelector('#daysInput');\n+    const daysInput = daysInputElement.value;\n \n-        // Обработчик кнопки \"Рассчитать пополнение (шт)\"\n-        document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n-            const daysInputElement = document.querySelector('#daysInput');\n-            const daysInput = daysInputElement.value;\n+    if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n+        alert('Введите число в диапазоне от 15 до 45');\n+    } \n \n-            if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n-                alert('Введите число в диапазоне от 15 до 45');\n-            }\n+    // Проверяем, что daysInput не пустой и является числом\n+    if (daysInput && !isNaN(daysInput)) {\n+        // Рассчитываем replenish для каждой строки\n+        gridOptions.api.forEachNode(rowNode => {\n+            const orders1m = rowNode.data.orders1m;\n+            const stockDays = rowNode.data.stockDays;\n \n-            // Проверяем, что daysInput не пустой и является числом\n-            if (daysInput && !isNaN(daysInput)) {\n-                // Рассчитываем replenish для каждой строки\n-                gridOptions.api.forEachNode(rowNode => {\n-                    const orders1m = rowNode.data.orders1m;\n-                    const stockDays = rowNode.data.stockDays;\n+            if (orders1m !== 0 && stockDays !== 0) {\n+                let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n \n-                    if (orders1m !== 0 && stockDays !== 0) {\n-                        let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n-\n-                        // Обновляем данные в текущей строке\n-                        rowNode.setDataValue('replenish', replenish);\n-                    }\n-                });\n-\n-                // Очищаем значение инпута после выполнения расчетов\n-                daysInputElement.value = '';\n-            } else {\n-                console.error('Введите корректное значение для количества дней');\n+                // Обновляем данные в текущей строке\n+                rowNode.setDataValue('replenish', replenish);\n             }\n         });\n \n+        // Очищаем значение инпута после выполнения расчетов\n+        daysInputElement.value = '';\n+    } else {\n+        console.error('Введите корректное значение для количества дней');\n+    }\n+});\n \n-        document.addEventListener('DOMContentLoaded', function () {\n-            const gridDiv = document.querySelector('#myGrid');\n-            new agGrid.Grid(gridDiv, gridOptions);\n+    \n+document.addEventListener('DOMContentLoaded', function () {\n+    const gridDiv = document.querySelector('#myGrid');\n+    new agGrid.Grid(gridDiv, gridOptions);\n \n-            fetchData();\n+    fetchData();\n \n+    \n+    \n+});\n \n \n-        });\n     </script>\n </body>\n-\n-</html>\n+</html>\n"
                },
                {
                    "date": 1720112151426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n <!DOCTYPE html>\n <html lang=\"en\">\n+\n <head>\n     <meta charset=\"UTF-8\">\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n     <title>Document</title>\n@@ -13,580 +14,638 @@\n     <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n     <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n     <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n     <style>\n-        img{\n+        img {\n             height: 120px;\n             padding: 2%;\n         }\n+\n         .red-text {\n-    background-color: red;\n-    color: white; /* белый текст на красном фоне */\n-    padding: 2px 5px; /* отступы вокруг текста */\n-    border-radius: 3px; /* скругление углов */\n-}\n+            background-color: red;\n+            color: white;\n+            /* белый текст на красном фоне */\n+            padding: 2px 5px;\n+            /* отступы вокруг текста */\n+            border-radius: 3px;\n+            /* скругление углов */\n+        }\n \n-.orange-text {\n-    background-color: orange;\n-    color: black; /* черный текст на оранжевом фоне */\n-    padding: 2px 5px;\n-    border-radius: 3px;\n-}\n+        .orange-text {\n+            background-color: orange;\n+            color: black;\n+            /* черный текст на оранжевом фоне */\n+            padding: 2px 5px;\n+            border-radius: 3px;\n+        }\n \n-.yellow-text {\n-    background-color: yellow;\n-    color: black;\n-    padding: 2px 5px;\n-    border-radius: 3px;\n-}\n+        .yellow-text {\n+            background-color: yellow;\n+            color: black;\n+            padding: 2px 5px;\n+            border-radius: 3px;\n+        }\n \n-.green-text {\n-    background-color: green;\n-    color: white;\n-    padding: 2px 5px;\n-    border-radius: 3px;\n-}\n-.table-wrapper {\n+        .green-text {\n+            background-color: green;\n+            color: white;\n+            padding: 2px 5px;\n+            border-radius: 3px;\n+        }\n+\n+        .table-wrapper {\n             display: flex;\n             flex-direction: column;\n             height: 100vh;\n             padding: 20px;\n             width: 100vw;\n             align-items: center;\n         }\n+\n         .headerContainer {\n             display: flex;\n             justify-content: space-between;\n             align-items: center;\n             margin-bottom: 15px;\n             width: 80vw;\n         }\n-        .input-group,.btn-wrapper{\n+\n+        .input-group,\n+        .btn-wrapper {\n             height: 50px;\n         }\n-        input, button{\n+\n+        input,\n+        button {\n             height: 100% !important;\n             font-size: small !important;\n         }\n-        .input-group{\n+\n+        .input-group {\n             width: 40vw !important;\n         }\n+\n         .table-inner {\n-          \n+\n             width: 100%;\n         }\n+\n         #myGrid {\n             /* height: calc(100% - 50px); */\n             width: 100%;\n         }\n+\n         #loading {\n             text-align: center;\n             padding: 20px;\n             font-size: 1.5rem;\n         }\n+\n         #resetFilters {\n             margin-bottom: 10px;\n         }\n-\n-\n     </style>\n </head>\n+\n <body>\n     <div class=\"table-wrapper\">\n         <div class=\"headerContainer\">\n             <div class=\"input-group\">\n                 <input type=\"number\" id=\"daysInput\" class=\"form-control\" placeholder=\"Введите количество дней\"\n                     aria-label=\"Введите количество дней от 15 до 45\" aria-describedby=\"basic-addon2\" min=\"15\" max=\"45\">\n                 <div class=\"input-group-append\">\n-                    <button class=\"btn btn-outline-secondary calculateReplenishment\" type=\"button\">Рассчитать пополнение (шт)</button>\n+                    <button class=\"btn btn-outline-secondary calculateReplenishment\" type=\"button\">Рассчитать пополнение\n+                        (шт)</button>\n                 </div>\n             </div>\n-            <div class=\"btn-wrapper\"> <button id=\"resetFilters\" class=\"btn btn-outline-secondary \">Сбросить все фильтры</button> </div>\n-            <div class=\"btn-wrapper\"> <button class=\"btn btn-outline-secondary deleteModify\" type=\"button\">Показать товар без модификаций</button></div>\n-            \n-           \n+            <div class=\"btn-wrapper\"> <button id=\"resetFilters\" class=\"btn btn-outline-secondary \">Сбросить все\n+                    фильтры</button> </div>\n+            <div class=\"btn-wrapper\"> <button class=\"btn btn-outline-secondary deleteModify\" type=\"button\">Показать\n+                    товар без модификаций</button></div>\n+\n+\n         </div>\n-        \n+\n         <div class=\"table-inner container mt-4\">\n             <div id=\"myGrid\" class=\"ag-theme-alpine\" style=\"height: 600px\"></div>\n             <div id=\"loading\" style=\"display: none;\">Загрузка...</div>\n         </div>\n     </div>\n \n     <script>\n-     // Определение столбцов и параметров сетки\n-const columnDefs = [\n-    { headerName: '№', valueGetter: 'node.rowIndex + 1', width: 60, sortable: false, filter: false },\n-    { headerName: 'Фото', field: 'photo', width: 100, cellRenderer: params => `<img src=\"${params.value}\">` },\n-    { headerName: 'Предмет', field: 'subjectName', width: 120 },\n-    { headerName: 'Номенклатура', field: 'nmID', width: 160 },\n-    { headerName: 'Размер', field: 'size', width: 120 },\n-    { headerName: 'Заказы 1м', field: 'orders1m', width: 150 },\n-    { headerName: 'Заказы 14 д', field: 'orders14d', width: 150 },\n-    // { headerName: 'График продаж за месяц', field: 'salesGraph', width: 250, cellRenderer: params => createSalesGraph(params.data.salesGraph) },\n-    // { headerName: 'Сравнение продаж (нед)', field: 'compareGraph', width: 250, cellRenderer: params => createCompareGraph(params.data.graph) },\n-    {\n-        headerName: 'Графики',\n-        field: 'graph',\n-        width: 300,\n-        cellRenderer: params => createToggleableGraph(params)\n-    },\n-    {\n-        headerName: 'Остаток (шт)',\n-        field: 'stock',\n-        width: 120,\n-        cellRenderer: function(params) {\n-            const value = params.value;\n-            let className = '';\n-            if (value >= 0 && value <= 1.99) {\n-                className = 'red-text';\n-            } else if (value >= 2 && value <= 5.99) {\n-                className = 'orange-text';\n-            } else if (value >= 6 && value <= 10.99) {\n-                className = 'yellow-text';\n-            } else if (value >= 11) {\n-                className = 'green-text';\n+        // Определение столбцов и параметров сетки\n+        const columnDefs = [{\n+                headerName: '№',\n+                valueGetter: 'node.rowIndex + 1',\n+                width: 60,\n+                sortable: false,\n+                filter: false\n+            },\n+            {\n+                headerName: 'Фото',\n+                field: 'photo',\n+                width: 100,\n+                cellRenderer: params => `<img src=\"${params.value}\">`\n+            },\n+            {\n+                headerName: 'Предмет',\n+                field: 'subjectName',\n+                width: 120\n+            },\n+            {\n+                headerName: 'Номенклатура',\n+                field: 'nmID',\n+                width: 160\n+            },\n+            {\n+                headerName: 'Размер',\n+                field: 'size',\n+                width: 120\n+            },\n+            {\n+                headerName: 'Заказы 1м',\n+                field: 'orders1m',\n+                width: 150\n+            },\n+            {\n+                headerName: 'Заказы 14 д',\n+                field: 'orders14d',\n+                width: 150\n+            },\n+            // { headerName: 'График продаж за месяц', field: 'salesGraph', width: 250, cellRenderer: params => createSalesGraph(params.data.salesGraph) },\n+            // { headerName: 'Сравнение продаж (нед)', field: 'compareGraph', width: 250, cellRenderer: params => createCompareGraph(params.data.graph) },\n+            {\n+                headerName: 'Графики',\n+                field: 'graph',\n+                width: 300,\n+                cellRenderer: params => createToggleableGraph(params)\n+            },\n+            {\n+                headerName: 'Остаток (шт)',\n+                field: 'stock',\n+                width: 120,\n+                cellRenderer: function (params) {\n+                    const value = params.value;\n+                    let className = '';\n+                    if (value >= 0 && value <= 1.99) {\n+                        className = 'red-text';\n+                    } else if (value >= 2 && value <= 5.99) {\n+                        className = 'orange-text';\n+                    } else if (value >= 6 && value <= 10.99) {\n+                        className = 'yellow-text';\n+                    } else if (value >= 11) {\n+                        className = 'green-text';\n+                    }\n+\n+                    return `<span class=\"${className}\">${value}</span>`;\n+                }\n+            },\n+            {\n+                headerName: 'Остаток (дн)',\n+                field: 'stockDays',\n+                width: 120,\n+                cellRenderer: function (params) {\n+                    const value = params.value;\n+                    let className = '';\n+                    if (value >= 0 && value <= 1.99) {\n+                        className = 'red-text';\n+                    } else if (value >= 2 && value <= 5.99) {\n+                        className = 'orange-text';\n+                    } else if (value >= 6 && value <= 10.99) {\n+                        className = 'yellow-text';\n+                    } else if (value >= 11) {\n+                        className = 'green-text';\n+                    }\n+\n+                    return `<span class=\"${className}\">${value}</span>`;\n+                }\n+            },\n+            {\n+                headerName: 'Пополнить (шт)',\n+                field: 'replenish',\n+                width: 120\n+            },\n+            {\n+                headerName: 'Артикул',\n+                field: 'vendorCode',\n+                width: 150,\n             }\n+        ];\n+        //переключаем графики\n+        function createToggleableGraph(params) {\n+            const container = document.createElement('div');\n+            let currentGraph = 'compareGraph';\n \n-            return `<span class=\"${className}\">${value}</span>`;\n-        }\n-    },\n-    {\n-        headerName: 'Остаток (дн)',\n-        field: 'stockDays',\n-        width: 120,\n-        cellRenderer: function(params) {\n-            const value = params.value;\n-            let className = '';\n-            if (value >= 0 && value <= 1.99) {\n-                className = 'red-text';\n-            } else if (value >= 2 && value <= 5.99) {\n-                className = 'orange-text';\n-            } else if (value >= 6 && value <= 10.99) {\n-                className = 'yellow-text';\n-            } else if (value >= 11) {\n-                className = 'green-text';\n+            function toggleGraph() {\n+                currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n+                const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n+                container.innerHTML = createGraphComponent(graphData);\n             }\n \n-            return `<span class=\"${className}\">${value}</span>`;\n-        }\n-    },\n-    { headerName: 'Пополнить (шт)', field: 'replenish',width: 120 },\n-    { headerName: 'Артикул', field: 'vendorCode', width: 150, }\n-];\n-//переключаем графики\n-function createToggleableGraph(params) {\n-    const container = document.createElement('div');\n-    let currentGraph = 'compareGraph'; \n+            function createGraphComponent(graphData) {\n+                if (currentGraph === 'compareGraph') {\n+                    return createCompareGraph(graphData);\n+                } else {\n+                    return createSalesGraph(graphData);\n+                }\n+            }\n \n-    function toggleGraph() {\n-        currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n-        const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n-        container.innerHTML = createGraphComponent(graphData);\n-    }\n+            container.innerHTML = createGraphComponent(params.data.graph);\n+            container.addEventListener('click', toggleGraph);\n \n-    function createGraphComponent(graphData) {\n-        if (currentGraph === 'compareGraph') {\n-            return createCompareGraph(graphData);\n-        } else {\n-            return createSalesGraph(graphData);\n+            return container;\n         }\n-    }\n \n-    container.innerHTML = createGraphComponent(params.data.graph);\n-    container.addEventListener('click', toggleGraph);\n \n-    return container;\n-}\n \n \n- \n+        const localeText = {\n+            // Русификация фильтров\n+            page: 'страница',\n+            more: 'ещё',\n+            to: 'к',\n+            of: 'из',\n+            next: 'следующий',\n+            last: 'последний',\n+            first: 'первый',\n+            previous: 'предыдущий',\n+            loadingOoo: 'Загрузка...',\n+            applyFilter: 'Применить фильтр...',\n+            equals: 'Равно',\n+            notEqual: 'Не равно',\n+            filterOoo: 'Фильтр...',\n+            contains: 'Содержит',\n+            notContains: 'Не содержит',\n+            startsWith: 'Начинается с',\n+            endsWith: 'Заканчивается на',\n+            andCondition: 'И',\n+            orCondition: 'Или'\n+        };\n \n-const localeText = {\n-    // Русификация фильтров\n-    page: 'страница',\n-    more: 'ещё',\n-    to: 'к',\n-    of: 'из',\n-    next: 'следующий',\n-    last: 'последний',\n-    first: 'первый',\n-    previous: 'предыдущий',\n-    loadingOoo: 'Загрузка...',\n-    applyFilter: 'Применить фильтр...',\n-    equals: 'Равно',\n-    notEqual: 'Не равно',\n-    filterOoo: 'Фильтр...',\n-    contains: 'Содержит',\n-    notContains: 'Не содержит',\n-    startsWith: 'Начинается с',\n-    endsWith: 'Заканчивается на',\n-    andCondition: 'И',\n-    orCondition: 'Или'\n-};\n \n \n+        const gridOptions = {\n+            enableCellTextSelection: true,\n+            columnDefs: columnDefs,\n+            defaultColDef: {\n+                sortable: true,\n+                filter: true,\n+                resizable: true\n+            },\n+            rowData: [],\n+            localeText: localeText,\n+            rowHeight: 120,\n+            getRowId: params => {\n+                const id = params.data.uniqueId;\n+                console.log('Row ID:', id, 'Data:', params);\n+                return id;\n+            }\n+        };\n \n-const gridOptions = {\n-    enableCellTextSelection: true,\n-    columnDefs: columnDefs,\n-    defaultColDef: {\n-        sortable: true,\n-        filter: true,\n-        resizable: true\n-    },\n-    rowData: [],\n-    localeText: localeText,\n-    rowHeight: 120,\n-    getRowId: params => {\n-        const id = params.data.uniqueId;\n-        console.log('Row ID:', id, 'Data:', params);\n-        return id;\n-    }\n-};\n \n+        // Функция для преобразования данных\n+        function transformData(data) {\n+            let transformedData = [];\n+            data.forEach(item => {\n+                item.allowed_sizes.forEach(size => {\n+                    let stock = item.stocks ? item.stocks[size] || 0 : 0;\n+                    let orders1m = item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n+                    let stockDays = orders1m !== 0 ? parseFloat((stock / orders1m).toFixed(2)) : 0;\n \n-// Функция для преобразования данных\n-function transformData(data) {\n-    let transformedData = [];\n-    data.forEach(item => {\n-        item.allowed_sizes.forEach(size => {\n-            let stock = item.stocks ? item.stocks[size] || 0 : 0;\n-            let orders1m = item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n-            let stockDays = orders1m !== 0 ? parseFloat((stock / orders1m).toFixed(2)) : 0;\n-\n-            // Создаем уникальный идентификатор на основе генератора\n-            let uniqueId = `${item.nmID}-${size}`;\n-            console.log('uniqueId в начале' , uniqueId);\n-            // console.log('Transformed uniqueId:', uniqueId);\n-            // console.log('item.graph :', item.graph );\n-            transformedData.push({\n-                uniqueId: uniqueId, // Добавляем уникальный идентификатор\n-                photo: item.photos ? item.photos[0][\"c516x688\"] : '',\n-                subjectName: item.subjectName,\n-                nmID: item.nmID,\n-                size: size,\n-                orders1m: orders1m,\n-                orders14d: item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0,\n-                salesGraph: item[\"30stat\"], // Данные для графика,\n-                graph: item.graph ,// Данные для сравнения графиков продаж\n-                stock: stock,\n-                stockDays: stockDays,\n-                replenish: '',\n-                vendorCode: item.vendorCode\n+                    // Создаем уникальный идентификатор на основе генератора\n+                    let uniqueId = `${item.nmID}-${size}`;\n+                    console.log('uniqueId в начале', uniqueId);\n+                    // console.log('Transformed uniqueId:', uniqueId);\n+                    // console.log('item.graph :', item.graph );\n+                    transformedData.push({\n+                        uniqueId: uniqueId, // Добавляем уникальный идентификатор\n+                        photo: item.photos ? item.photos[0][\"c516x688\"] : '',\n+                        subjectName: item.subjectName,\n+                        nmID: item.nmID,\n+                        size: size,\n+                        orders1m: orders1m,\n+                        orders14d: item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0,\n+                        salesGraph: item[\"30stat\"], // Данные для графика,\n+                        graph: item.graph, // Данные для сравнения графиков продаж\n+                        stock: stock,\n+                        stockDays: stockDays,\n+                        replenish: '',\n+                        vendorCode: item.vendorCode\n+                    });\n+                });\n             });\n-        });\n-    });\n-    return transformedData;\n-}\n+            return transformedData;\n+        }\n \n-// Функция для преобразования данных без размеров\n-function transformDataWithoutSizes(data) {\n-    let transformedData = [];\n-    data.forEach(item => {\n-        let totalStock = 0;\n-        let totalOrders1m = 0;\n-        let totalOrders14d = 0;\n-        \n-         console.log('item.graph ',item.graph);\n+        // Функция для преобразования данных без размеров\n+        function transformDataWithoutSizes(data) {\n+            let transformedData = [];\n+            data.forEach(item => {\n+                let totalStock = 0;\n+                let totalOrders1m = 0;\n+                let totalOrders14d = 0;\n \n-        item.allowed_sizes.forEach(size => {\n-            totalStock += item.stocks ? item.stocks[size] || 0 : 0;\n-            totalOrders1m += item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n-            totalOrders14d += item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0;\n-        });\n+                console.log('item.graph ', item.graph);\n \n-        let stockDays = totalOrders1m !== 0 ? parseFloat((totalStock / totalOrders1m).toFixed(2)) : 0;\n-let orders1m  = parseFloat(totalOrders1m.toFixed(2))\n-let orders14d  = parseFloat(totalOrders14d.toFixed(2))\n-        let uniqueId = item.nmID;\n-        console.log('uniqueId во второй' , uniqueId);\n-        transformedData.push({\n-            uniqueId: uniqueId, // Добавляем уникальный идентификатор\n-            photo: item.photos ? item.photos[0].c246x328 : '',\n-            subjectName: item.subjectName,\n-            nmID: item.nmID,\n-            size: '-', // Прочерк для размера\n-            orders1m: orders1m,\n-            orders14d: orders14d,\n-            salesGraph: item[\"30stat\"],\n-            compareGraph: item.graph, \n-            stock: totalStock,\n-            stockDays: stockDays, //  добавить логику для расчета\n-            replenish: '',\n-            vendorCode: item.vendorCode\n-        });\n-    });\n-    return transformedData;\n-}\n+                item.allowed_sizes.forEach(size => {\n+                    totalStock += item.stocks ? item.stocks[size] || 0 : 0;\n+                    totalOrders1m += item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n+                    totalOrders14d += item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0;\n+                });\n \n-// Функция для загрузки данных и отображения таблицы\n-function fetchData() {\n-    $.getJSON('data.json', function (response) {\n-        const originalData = response.data;\n-        const rowData = transformData(originalData);\n-        gridOptions.api.applyTransaction({ add: rowData });\n-    }).fail(function () {\n-        console.error('Ошибка при загрузке данных');\n-    });\n-}\n+                let stockDays = totalOrders1m !== 0 ? parseFloat((totalStock / totalOrders1m).toFixed(2)) : 0;\n+                let orders1m = parseFloat(totalOrders1m.toFixed(2))\n+                let orders14d = parseFloat(totalOrders14d.toFixed(2))\n+                let uniqueId = item.nmID;\n+                console.log('uniqueId во второй', uniqueId);\n+                transformedData.push({\n+                    uniqueId: uniqueId, // Добавляем уникальный идентификатор\n+                    photo: item.photos ? item.photos[0].c246x328 : '',\n+                    subjectName: item.subjectName,\n+                    nmID: item.nmID,\n+                    size: '-', // Прочерк для размера\n+                    orders1m: orders1m,\n+                    orders14d: orders14d,\n+                    salesGraph: item[\"30stat\"],\n+                    compareGraph: item.graph,\n+                    stock: totalStock,\n+                    stockDays: stockDays, //  добавить логику для расчета\n+                    replenish: '',\n+                    vendorCode: item.vendorCode\n+                });\n+            });\n+            return transformedData;\n+        }\n \n-// График на 30 дней\n-function createSalesGraph(statData) {\n-    const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n-    setTimeout(() => {\n-        const ctx = document.getElementById(canvasId).getContext('2d');\n-        new Chart(ctx, {\n-            type: 'line',\n-            data: {\n-                labels: Object.keys(statData),\n-                datasets: [{\n-                    label: 'Продажи',\n-                    data: Object.values(statData),\n-                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n-                    borderColor: 'rgba(75, 192, 192, 1)',\n-                    borderWidth: 1,\n-                    pointRadius: 0,\n-                    borderWidth: 1, // Устанавливаем толщину линии\n-                    pointHoverRadius: 5, // Радиус точки при наведении\n-                }]\n-            },\n-            options: {\n-                responsive: true,\n-                maintainAspectRatio: false,\n-                scales: {\n-                    x: {\n-                        display: true, // Отображение оси X\n-                        ticks: {\n-                            display: false // Скрываем метки по оси X\n-                        }\n+        // Функция для загрузки данных и отображения таблицы\n+        function fetchData() {\n+            $.getJSON('data.json', function (response) {\n+                const originalData = response.data;\n+                const rowData = transformData(originalData);\n+                gridOptions.api.applyTransaction({\n+                    add: rowData\n+                });\n+            }).fail(function () {\n+                console.error('Ошибка при загрузке данных');\n+            });\n+        }\n+\n+        // График на 30 дней\n+        function createSalesGraph(statData) {\n+            const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n+            setTimeout(() => {\n+                const ctx = document.getElementById(canvasId).getContext('2d');\n+                new Chart(ctx, {\n+                    type: 'line',\n+                    data: {\n+                        labels: Object.keys(statData),\n+                        datasets: [{\n+                            label: 'Продажи',\n+                            data: Object.values(statData),\n+                            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n+                            borderColor: 'rgba(75, 192, 192, 1)',\n+                            borderWidth: 1,\n+                            pointRadius: 0,\n+                            borderWidth: 1, // Устанавливаем толщину линии\n+                            pointHoverRadius: 5, // Радиус точки при наведении\n+                        }]\n                     },\n-                    y: {\n-                        display: true, // Отображение оси Y\n-                        ticks: {\n-                            display: false // Скрываем метки по оси Y\n-                        }\n-                    }\n-                },\n-                plugins: {\n-                    legend: {\n-                        display: false // Убираем легенду\n-                    },\n-                    tooltip: {\n-                        callbacks: {\n-                            label: function (context) {\n-                                return `Дата: ${context.label}, Количество: ${context.parsed.y}`;\n+                    options: {\n+                        responsive: true,\n+                        maintainAspectRatio: false,\n+                        scales: {\n+                            x: {\n+                                display: true, // Отображение оси X\n+                                ticks: {\n+                                    display: false // Скрываем метки по оси X\n+                                }\n+                            },\n+                            y: {\n+                                display: true, // Отображение оси Y\n+                                ticks: {\n+                                    display: false // Скрываем метки по оси Y\n+                                }\n                             }\n+                        },\n+                        plugins: {\n+                            legend: {\n+                                display: false // Убираем легенду\n+                            },\n+                            tooltip: {\n+                                callbacks: {\n+                                    label: function (context) {\n+                                        return `Дата: ${context.label}, Количество: ${context.parsed.y}`;\n+                                    }\n+                                }\n+                            },\n+                            hover: {\n+                                mode: 'index',\n+                                intersect: false,\n+                            }\n+                        },\n+                        interaction: {\n+                            mode: 'index',\n+                            intersect: false,\n+                        },\n+                        elements: {\n+                            point: {\n+                                radius: 0, // Скрываем точки\n+                                hoverRadius: 5, // Радиус точки при наведении\n+                                hitRadius: 10, // Радиус области взаимодействия точки\n+                            }\n                         }\n-                    },\n-                    hover: {\n-                        mode: 'index',\n-                        intersect: false,\n                     }\n-                },\n-                interaction: {\n-                    mode: 'index',\n-                    intersect: false,\n-                },\n-                elements: {\n-                    point: {\n-                        radius: 0, // Скрываем точки\n-                        hoverRadius: 5, // Радиус точки при наведении\n-                        hitRadius: 10, // Радиус области взаимодействия точки\n-                    }\n-                }\n-            }\n-        });\n-    }, 100);\n-    return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n-}\n+                });\n+            }, 100);\n+            return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n+        }\n \n-function createCompareGraph(graphData) {\n-    const canvasId = `compare-chart-${Math.random().toString(36).substr(2, 9)}`;\n-    const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]; // индексы этих дней: 0,1,2,3,4,5,6\n-    const currentDate = new Date();\n-    const currentDayIndex = currentDate.getDay(); // нашли индекс текущего дня\n+        function createCompareGraph(graphData) {\n+            const canvasId = `compare-chart-${Math.random().toString(36).substr(2, 9)}`;\n+            const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]; // индексы этих дней: 0,1,2,3,4,5,6\n+            const currentDate = new Date();\n+            const currentDayIndex = currentDate.getDay(); // нашли индекс текущего дня\n \n-    // меняем массив дней недели так, чтобы справа был текущий день недели\n-    const labels = [...daysOfWeek.slice(currentDayIndex + 1), ...daysOfWeek.slice(0, currentDayIndex + 1)];\n+            // меняем массив дней недели так, чтобы справа был текущий день недели\n+            const labels = [...daysOfWeek.slice(currentDayIndex + 1), ...daysOfWeek.slice(0, currentDayIndex + 1)];\n \n-    const currentWeekData = new Array(7).fill(0); // Продажи текущей недели\n-    const previousWeekData = new Array(7).fill(0); // Продажи предыдущей \n+            const currentWeekData = new Array(7).fill(0); // Продажи текущей недели\n+            const previousWeekData = new Array(7).fill(0); // Продажи предыдущей \n \n-    // меняем строку даты в объект Date\n-    const parseDate = (dateString) => {\n-        const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n-        return new Date(`20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n-    };\n+            // меняем строку даты в объект Date\n+            const parseDate = (dateString) => {\n+                const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n+                return new Date(\n+                `20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n+            };\n \n-    // Функция для получения индекса дня недели\n-    const getWeekdayIndex = (date) => {\n-        return date.getDay();\n-    };\n+            // Функция для получения индекса дня недели\n+            const getWeekdayIndex = (date) => {\n+                return date.getDay();\n+            };\n \n-    // Заполняем данные продаж для текущей и предыдущей недели\n-    for (const [dateString, count] of Object.entries(graphData)) {\n-        const date = parseDate(dateString);\n-        const dayDiff = Math.floor((currentDate - date) / (1000 * 60 * 60 * 24));\n-        if (dayDiff >= 0 && dayDiff < 7) {\n-            currentWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n-        } else if (dayDiff >= 7 && dayDiff < 14) {\n-            previousWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n-        }\n-    }\n+            // Заполняем данные продаж для текущей и предыдущей недели\n+            for (const [dateString, count] of Object.entries(graphData)) {\n+                const date = parseDate(dateString);\n+                const dayDiff = Math.floor((currentDate - date) / (1000 * 60 * 60 * 24));\n+                if (dayDiff >= 0 && dayDiff < 7) {\n+                    currentWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n+                } else if (dayDiff >= 7 && dayDiff < 14) {\n+                    previousWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n+                }\n+            }\n \n-    setTimeout(() => {\n-        const ctx = document.getElementById(canvasId).getContext('2d');\n-        new Chart(ctx, {\n-            type: 'bar',\n-            data: {\n-                labels: labels,\n-                datasets: [{\n-                    label: 'Продажи предыдущей недели', // убрал это обозначение\n-                    data: previousWeekData,\n-                    backgroundColor: 'rgba(75, 192, 192, 0.6)',\n-                    borderColor: 'rgba(75, 192, 192, 1)',\n-                    borderWidth: 1\n-                }, {\n-                    label: 'Продажи текущей недели', // убрал это обозначение\n-                    data: currentWeekData,\n-                    backgroundColor: 'rgba(153, 102, 255, 0.6)',\n-                    borderColor: 'rgba(153, 102, 255, 1)',\n-                    borderWidth: 1\n-                }]\n-            },\n-            options: {\n-                scales: {\n-                    y: {\n-                        display: false // Скрыть ось Y\n+            setTimeout(() => {\n+                const ctx = document.getElementById(canvasId).getContext('2d');\n+                new Chart(ctx, {\n+                    type: 'bar',\n+                    data: {\n+                        labels: labels,\n+                        datasets: [{\n+                            label: 'Продажи предыдущей недели', // убрал это обозначение\n+                            data: previousWeekData,\n+                            backgroundColor: 'rgba(75, 192, 192, 0.6)',\n+                            borderColor: 'rgba(75, 192, 192, 1)',\n+                            borderWidth: 1\n+                        }, {\n+                            label: 'Продажи текущей недели', // убрал это обозначение\n+                            data: currentWeekData,\n+                            backgroundColor: 'rgba(153, 102, 255, 0.6)',\n+                            borderColor: 'rgba(153, 102, 255, 1)',\n+                            borderWidth: 1\n+                        }]\n                     },\n-                    x: {\n-                        display: true,\n-                        ticks: {\n-                            color: 'grey' // Цвет текста на оси X\n-                        }\n-                    }\n-                },\n-                plugins: {\n-                    legend: {\n-                        display: false // Скрыть легенду\n-                    },\n-                    tooltip: {\n-                        enabled: true,\n-                        callbacks: {\n-                            label: function (tooltipItem) {\n-                                let label = tooltipItem.dataset.label || '';\n-                                if (label) {\n-                                    label += ': ';\n+                    options: {\n+                        scales: {\n+                            y: {\n+                                display: false // Скрыть ось Y\n+                            },\n+                            x: {\n+                                display: true,\n+                                ticks: {\n+                                    color: 'grey' // Цвет текста на оси X\n                                 }\n-                                label += tooltipItem.raw.toFixed(2);\n-                                return label;\n                             }\n-                        }\n+                        },\n+                        plugins: {\n+                            legend: {\n+                                display: false // Скрыть легенду\n+                            },\n+                            tooltip: {\n+                                enabled: true,\n+                                callbacks: {\n+                                    label: function (tooltipItem) {\n+                                        let label = tooltipItem.dataset.label || '';\n+                                        if (label) {\n+                                            label += ': ';\n+                                        }\n+                                        label += tooltipItem.raw.toFixed(2);\n+                                        return label;\n+                                    }\n+                                }\n+                            }\n+                        },\n+                        maintainAspectRatio: false,\n+                        responsive: true\n                     }\n-                },\n-                maintainAspectRatio: false,\n-                responsive: true\n+                });\n+            }, 100);\n+\n+            return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n+        }\n+\n+\n+        // Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n+        document.querySelector('.deleteModify').addEventListener('click', function () {\n+            if ($(this).text() === \"Показать товар без модификаций\") {\n+                $(this).text(\"Показать модификации\");\n+                $.getJSON('data.json', function (response) {\n+                    const originalData = response.data;\n+                    const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n+\n+                    // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n+                    const nodesToRemove = [];\n+                    console.log('nodesToRemove: ', nodesToRemove);\n+                    gridOptions.api.forEachNode(node => {\n+                        nodesToRemove.push(node);\n+                    });\n+\n+                    gridOptions.api.applyTransaction({\n+                        remove: nodesToRemove,\n+                        add: rowDataWithoutSizes\n+                    });\n+                }).fail(function () {\n+                    console.error('Ошибка при загрузке данных');\n+                });\n+\n+            } else if ($(this).text() === \"Показать модификации\") {\n+                $(this).text(\"Показать товар без модификации\");\n+                //  // Загружаем и отображаем модификации\n+                //  $.getJSON('data.json', function (response) {\n+                //     const originalData = response.data;\n+                //     const modifiedData = transformData(originalData);\n+\n+                //     gridOptions.api.applyTransaction({\n+                //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n+                //         add: modifiedData\n+                //     });\n+                // }).fail(function () {\n+                //     console.error('Ошибка при загрузке данных');\n+                // });\n+                location.reload()\n             }\n+\n         });\n-    }, 100);\n \n-    return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n-}\n-     \n \n-// Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n-document.querySelector('.deleteModify').addEventListener('click', function () {\n-    if ($(this).text() === \"Показать товар без модификаций\") {   \n-        $(this).text(\"Показать модификации\");   \n-        $.getJSON('data.json', function (response) {\n-        const originalData = response.data;\n-        const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n \n-        // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n-        const nodesToRemove = [];\n-        console.log('nodesToRemove: ',nodesToRemove);\n-        gridOptions.api.forEachNode(node => {\n-            nodesToRemove.push(node);\n+        // Добавление события для кнопки сброса всех фильтров\n+        document.querySelector('#resetFilters').addEventListener('click', function () {\n+            gridOptions.api.setFilterModel(null);\n         });\n \n-        gridOptions.api.applyTransaction({\n-            remove: nodesToRemove,\n-            add: rowDataWithoutSizes\n-        });\n-    }).fail(function () {\n-        console.error('Ошибка при загрузке данных');\n-    });\n-       \n-    } else if ($(this).text() === \"Показать модификации\") {\n-         $(this).text(\"Показать товар без модификации\");      \n-        //  // Загружаем и отображаем модификации\n-        //  $.getJSON('data.json', function (response) {\n-        //     const originalData = response.data;\n-        //     const modifiedData = transformData(originalData);\n \n-        //     gridOptions.api.applyTransaction({\n-        //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n-        //         add: modifiedData\n-        //     });\n-        // }).fail(function () {\n-        //     console.error('Ошибка при загрузке данных');\n-        // });\n-        location.reload()\n-    }\n-    \n-});\n+        // Обработчик кнопки \"Рассчитать пополнение (шт)\"\n+        document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n+            const daysInputElement = document.querySelector('#daysInput');\n+            const daysInput = daysInputElement.value;\n \n+            if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n+                alert('Введите число в диапазоне от 15 до 45');\n+            }\n \n+            // Проверяем, что daysInput не пустой и является числом\n+            if (daysInput && !isNaN(daysInput)) {\n+                // Рассчитываем replenish для каждой строки\n+                gridOptions.api.forEachNode(rowNode => {\n+                    const orders1m = rowNode.data.orders1m;\n+                    const stockDays = rowNode.data.stockDays;\n \n-// Добавление события для кнопки сброса всех фильтров\n-document.querySelector('#resetFilters').addEventListener('click', function() {\n-        gridOptions.api.setFilterModel(null);\n-    });\n- \n- \n-// Обработчик кнопки \"Рассчитать пополнение (шт)\"\n-document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n-    const daysInputElement = document.querySelector('#daysInput');\n-    const daysInput = daysInputElement.value;\n+                    if (orders1m !== 0 && stockDays !== 0) {\n+                        let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n \n-    if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n-        alert('Введите число в диапазоне от 15 до 45');\n-    } \n+                        // Обновляем данные в текущей строке\n+                        rowNode.setDataValue('replenish', replenish);\n+                    }\n+                });\n \n-    // Проверяем, что daysInput не пустой и является числом\n-    if (daysInput && !isNaN(daysInput)) {\n-        // Рассчитываем replenish для каждой строки\n-        gridOptions.api.forEachNode(rowNode => {\n-            const orders1m = rowNode.data.orders1m;\n-            const stockDays = rowNode.data.stockDays;\n-\n-            if (orders1m !== 0 && stockDays !== 0) {\n-                let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n-\n-                // Обновляем данные в текущей строке\n-                rowNode.setDataValue('replenish', replenish);\n+                // Очищаем значение инпута после выполнения расчетов\n+                daysInputElement.value = '';\n+            } else {\n+                console.error('Введите корректное значение для количества дней');\n             }\n         });\n \n-        // Очищаем значение инпута после выполнения расчетов\n-        daysInputElement.value = '';\n-    } else {\n-        console.error('Введите корректное значение для количества дней');\n-    }\n-});\n \n-    \n-document.addEventListener('DOMContentLoaded', function () {\n-    const gridDiv = document.querySelector('#myGrid');\n-    new agGrid.Grid(gridDiv, gridOptions);\n+        document.addEventListener('DOMContentLoaded', function () {\n+            const gridDiv = document.querySelector('#myGrid');\n+            new agGrid.Grid(gridDiv, gridOptions);\n \n-    fetchData();\n+            fetchData();\n \n-    \n-    \n-});\n \n \n+        });\n     </script>\n </body>\n+\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720112157499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,36 +229,11 @@\n                 field: 'vendorCode',\n                 width: 150,\n             }\n         ];\n-        //переключаем графики\n-        function createToggleableGraph(params) {\n-            const container = document.createElement('div');\n-            let currentGraph = 'compareGraph';\n+       \n \n-            function toggleGraph() {\n-                currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n-                const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n-                container.innerHTML = createGraphComponent(graphData);\n-            }\n \n-            function createGraphComponent(graphData) {\n-                if (currentGraph === 'compareGraph') {\n-                    return createCompareGraph(graphData);\n-                } else {\n-                    return createSalesGraph(graphData);\n-                }\n-            }\n-\n-            container.innerHTML = createGraphComponent(params.data.graph);\n-            container.addEventListener('click', toggleGraph);\n-\n-            return container;\n-        }\n-\n-\n-\n-\n         const localeText = {\n             // Русификация фильтров\n             page: 'страница',\n             more: 'ещё',\n"
                },
                {
                    "date": 1720112187665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n <!DOCTYPE html>\n <html lang=\"en\">\n-\n <head>\n     <meta charset=\"UTF-8\">\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n     <title>Document</title>\n@@ -14,613 +13,571 @@\n     <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n     <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n     <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n     <style>\n-        img {\n+        img{\n             height: 120px;\n             padding: 2%;\n         }\n-\n         .red-text {\n-            background-color: red;\n-            color: white;\n-            /* белый текст на красном фоне */\n-            padding: 2px 5px;\n-            /* отступы вокруг текста */\n-            border-radius: 3px;\n-            /* скругление углов */\n-        }\n+    background-color: red;\n+    color: white; /* белый текст на красном фоне */\n+    padding: 2px 5px; /* отступы вокруг текста */\n+    border-radius: 3px; /* скругление углов */\n+}\n \n-        .orange-text {\n-            background-color: orange;\n-            color: black;\n-            /* черный текст на оранжевом фоне */\n-            padding: 2px 5px;\n-            border-radius: 3px;\n-        }\n+.orange-text {\n+    background-color: orange;\n+    color: black; /* черный текст на оранжевом фоне */\n+    padding: 2px 5px;\n+    border-radius: 3px;\n+}\n \n-        .yellow-text {\n-            background-color: yellow;\n-            color: black;\n-            padding: 2px 5px;\n-            border-radius: 3px;\n-        }\n+.yellow-text {\n+    background-color: yellow;\n+    color: black;\n+    padding: 2px 5px;\n+    border-radius: 3px;\n+}\n \n-        .green-text {\n-            background-color: green;\n-            color: white;\n-            padding: 2px 5px;\n-            border-radius: 3px;\n-        }\n-\n-        .table-wrapper {\n+.green-text {\n+    background-color: green;\n+    color: white;\n+    padding: 2px 5px;\n+    border-radius: 3px;\n+}\n+.table-wrapper {\n             display: flex;\n             flex-direction: column;\n             height: 100vh;\n             padding: 20px;\n             width: 100vw;\n             align-items: center;\n         }\n-\n         .headerContainer {\n             display: flex;\n             justify-content: space-between;\n             align-items: center;\n             margin-bottom: 15px;\n             width: 80vw;\n         }\n-\n-        .input-group,\n-        .btn-wrapper {\n+        .input-group,.btn-wrapper{\n             height: 50px;\n         }\n-\n-        input,\n-        button {\n+        input, button{\n             height: 100% !important;\n             font-size: small !important;\n         }\n-\n-        .input-group {\n+        .input-group{\n             width: 40vw !important;\n         }\n-\n         .table-inner {\n-\n+          \n             width: 100%;\n         }\n-\n         #myGrid {\n             /* height: calc(100% - 50px); */\n             width: 100%;\n         }\n-\n         #loading {\n             text-align: center;\n             padding: 20px;\n             font-size: 1.5rem;\n         }\n-\n         #resetFilters {\n             margin-bottom: 10px;\n         }\n+\n+\n     </style>\n </head>\n-\n <body>\n     <div class=\"table-wrapper\">\n         <div class=\"headerContainer\">\n             <div class=\"input-group\">\n                 <input type=\"number\" id=\"daysInput\" class=\"form-control\" placeholder=\"Введите количество дней\"\n                     aria-label=\"Введите количество дней от 15 до 45\" aria-describedby=\"basic-addon2\" min=\"15\" max=\"45\">\n                 <div class=\"input-group-append\">\n-                    <button class=\"btn btn-outline-secondary calculateReplenishment\" type=\"button\">Рассчитать пополнение\n-                        (шт)</button>\n+                    <button class=\"btn btn-outline-secondary calculateReplenishment\" type=\"button\">Рассчитать пополнение (шт)</button>\n                 </div>\n             </div>\n-            <div class=\"btn-wrapper\"> <button id=\"resetFilters\" class=\"btn btn-outline-secondary \">Сбросить все\n-                    фильтры</button> </div>\n-            <div class=\"btn-wrapper\"> <button class=\"btn btn-outline-secondary deleteModify\" type=\"button\">Показать\n-                    товар без модификаций</button></div>\n-\n-\n+            <div class=\"btn-wrapper\"> <button id=\"resetFilters\" class=\"btn btn-outline-secondary \">Сбросить все фильтры</button> </div>\n+            <div class=\"btn-wrapper\"> <button class=\"btn btn-outline-secondary deleteModify\" type=\"button\">Показать товар без модификаций</button></div>\n+            \n+           \n         </div>\n-\n+        \n         <div class=\"table-inner container mt-4\">\n             <div id=\"myGrid\" class=\"ag-theme-alpine\" style=\"height: 600px\"></div>\n             <div id=\"loading\" style=\"display: none;\">Загрузка...</div>\n         </div>\n     </div>\n \n     <script>\n-        // Определение столбцов и параметров сетки\n-        const columnDefs = [{\n-                headerName: '№',\n-                valueGetter: 'node.rowIndex + 1',\n-                width: 60,\n-                sortable: false,\n-                filter: false\n-            },\n-            {\n-                headerName: 'Фото',\n-                field: 'photo',\n-                width: 100,\n-                cellRenderer: params => `<img src=\"${params.value}\">`\n-            },\n-            {\n-                headerName: 'Предмет',\n-                field: 'subjectName',\n-                width: 120\n-            },\n-            {\n-                headerName: 'Номенклатура',\n-                field: 'nmID',\n-                width: 160\n-            },\n-            {\n-                headerName: 'Размер',\n-                field: 'size',\n-                width: 120\n-            },\n-            {\n-                headerName: 'Заказы 1м',\n-                field: 'orders1m',\n-                width: 150\n-            },\n-            {\n-                headerName: 'Заказы 14 д',\n-                field: 'orders14d',\n-                width: 150\n-            },\n-            // { headerName: 'График продаж за месяц', field: 'salesGraph', width: 250, cellRenderer: params => createSalesGraph(params.data.salesGraph) },\n-            // { headerName: 'Сравнение продаж (нед)', field: 'compareGraph', width: 250, cellRenderer: params => createCompareGraph(params.data.graph) },\n-            {\n-                headerName: 'Графики',\n-                field: 'graph',\n-                width: 300,\n-                cellRenderer: params => createToggleableGraph(params)\n-            },\n-            {\n-                headerName: 'Остаток (шт)',\n-                field: 'stock',\n-                width: 120,\n-                cellRenderer: function (params) {\n-                    const value = params.value;\n-                    let className = '';\n-                    if (value >= 0 && value <= 1.99) {\n-                        className = 'red-text';\n-                    } else if (value >= 2 && value <= 5.99) {\n-                        className = 'orange-text';\n-                    } else if (value >= 6 && value <= 10.99) {\n-                        className = 'yellow-text';\n-                    } else if (value >= 11) {\n-                        className = 'green-text';\n-                    }\n+     // Определение столбцов и параметров сетки\n+const columnDefs = [\n+    { headerName: '№', valueGetter: 'node.rowIndex + 1', width: 60, sortable: false, filter: false },\n+    { headerName: 'Фото', field: 'photo', width: 100, cellRenderer: params => `<img src=\"${params.value}\">` },\n+    { headerName: 'Предмет', field: 'subjectName', width: 120 },\n+    { headerName: 'Номенклатура', field: 'nmID', width: 160 },\n+    { headerName: 'Размер', field: 'size', width: 120 },\n+    { headerName: 'Заказы 1м', field: 'orders1m', width: 150 },\n+    { headerName: 'Заказы 14 д', field: 'orders14d', width: 150 },\n+    // { headerName: 'График продаж за месяц', field: 'salesGraph', width: 250, cellRenderer: params => createSalesGraph(params.data.salesGraph) },\n+    // { headerName: 'Сравнение продаж (нед)', field: 'compareGraph', width: 250, cellRenderer: params => createCompareGraph(params.data.graph) },\n+    {\n+        headerName: 'Графики',\n+        field: 'graph',\n+        width: 300,\n+        cellRenderer: params => createToggleableGraph(params)\n+    },\n+    {\n+        headerName: 'Остаток (шт)',\n+        field: 'stock',\n+        width: 120,\n+        cellRenderer: function(params) {\n+            const value = params.value;\n+            let className = '';\n+            if (value >= 0 && value <= 1.99) {\n+                className = 'red-text';\n+            } else if (value >= 2 && value <= 5.99) {\n+                className = 'orange-text';\n+            } else if (value >= 6 && value <= 10.99) {\n+                className = 'yellow-text';\n+            } else if (value >= 11) {\n+                className = 'green-text';\n+            }\n \n-                    return `<span class=\"${className}\">${value}</span>`;\n-                }\n-            },\n-            {\n-                headerName: 'Остаток (дн)',\n-                field: 'stockDays',\n-                width: 120,\n-                cellRenderer: function (params) {\n-                    const value = params.value;\n-                    let className = '';\n-                    if (value >= 0 && value <= 1.99) {\n-                        className = 'red-text';\n-                    } else if (value >= 2 && value <= 5.99) {\n-                        className = 'orange-text';\n-                    } else if (value >= 6 && value <= 10.99) {\n-                        className = 'yellow-text';\n-                    } else if (value >= 11) {\n-                        className = 'green-text';\n-                    }\n-\n-                    return `<span class=\"${className}\">${value}</span>`;\n-                }\n-            },\n-            {\n-                headerName: 'Пополнить (шт)',\n-                field: 'replenish',\n-                width: 120\n-            },\n-            {\n-                headerName: 'Артикул',\n-                field: 'vendorCode',\n-                width: 150,\n+            return `<span class=\"${className}\">${value}</span>`;\n+        }\n+    },\n+    {\n+        headerName: 'Остаток (дн)',\n+        field: 'stockDays',\n+        width: 120,\n+        cellRenderer: function(params) {\n+            const value = params.value;\n+            let className = '';\n+            if (value >= 0 && value <= 1.99) {\n+                className = 'red-text';\n+            } else if (value >= 2 && value <= 5.99) {\n+                className = 'orange-text';\n+            } else if (value >= 6 && value <= 10.99) {\n+                className = 'yellow-text';\n+            } else if (value >= 11) {\n+                className = 'green-text';\n             }\n-        ];\n-       \n \n+            return `<span class=\"${className}\">${value}</span>`;\n+        }\n+    },\n+    { headerName: 'Пополнить (шт)', field: 'replenish',width: 120 },\n+    { headerName: 'Артикул', field: 'vendorCode', width: 150, }\n+];\n+//переключаем графики\n+function createToggleableGraph(params) {\n+    const container = document.createElement('div');\n+    let currentGraph = 'compareGraph'; \n \n-        const localeText = {\n-            // Русификация фильтров\n-            page: 'страница',\n-            more: 'ещё',\n-            to: 'к',\n-            of: 'из',\n-            next: 'следующий',\n-            last: 'последний',\n-            first: 'первый',\n-            previous: 'предыдущий',\n-            loadingOoo: 'Загрузка...',\n-            applyFilter: 'Применить фильтр...',\n-            equals: 'Равно',\n-            notEqual: 'Не равно',\n-            filterOoo: 'Фильтр...',\n-            contains: 'Содержит',\n-            notContains: 'Не содержит',\n-            startsWith: 'Начинается с',\n-            endsWith: 'Заканчивается на',\n-            andCondition: 'И',\n-            orCondition: 'Или'\n-        };\n+    function toggleGraph() {\n+        currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n+        const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n+        container.innerHTML = createGraphComponent(graphData);\n+    }\n \n+    function createGraphComponent(graphData) {\n+        if (currentGraph === 'compareGraph') {\n+            return createCompareGraph(graphData);\n+        } else {\n+            return createSalesGraph(graphData);\n+        }\n+    }\n \n+    container.innerHTML = createGraphComponent(params.data.graph);\n+    container.addEventListener('click', toggleGraph);\n \n-        const gridOptions = {\n-            enableCellTextSelection: true,\n-            columnDefs: columnDefs,\n-            defaultColDef: {\n-                sortable: true,\n-                filter: true,\n-                resizable: true\n-            },\n-            rowData: [],\n-            localeText: localeText,\n-            rowHeight: 120,\n-            getRowId: params => {\n-                const id = params.data.uniqueId;\n-                console.log('Row ID:', id, 'Data:', params);\n-                return id;\n-            }\n-        };\n+    return container;\n+}\n \n \n-        // Функция для преобразования данных\n-        function transformData(data) {\n-            let transformedData = [];\n-            data.forEach(item => {\n-                item.allowed_sizes.forEach(size => {\n-                    let stock = item.stocks ? item.stocks[size] || 0 : 0;\n-                    let orders1m = item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n-                    let stockDays = orders1m !== 0 ? parseFloat((stock / orders1m).toFixed(2)) : 0;\n+ \n \n-                    // Создаем уникальный идентификатор на основе генератора\n-                    let uniqueId = `${item.nmID}-${size}`;\n-                    console.log('uniqueId в начале', uniqueId);\n-                    // console.log('Transformed uniqueId:', uniqueId);\n-                    // console.log('item.graph :', item.graph );\n-                    transformedData.push({\n-                        uniqueId: uniqueId, // Добавляем уникальный идентификатор\n-                        photo: item.photos ? item.photos[0][\"c516x688\"] : '',\n-                        subjectName: item.subjectName,\n-                        nmID: item.nmID,\n-                        size: size,\n-                        orders1m: orders1m,\n-                        orders14d: item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0,\n-                        salesGraph: item[\"30stat\"], // Данные для графика,\n-                        graph: item.graph, // Данные для сравнения графиков продаж\n-                        stock: stock,\n-                        stockDays: stockDays,\n-                        replenish: '',\n-                        vendorCode: item.vendorCode\n-                    });\n-                });\n-            });\n-            return transformedData;\n-        }\n+const localeText = {\n+    // Русификация фильтров\n+    page: 'страница',\n+    more: 'ещё',\n+    to: 'к',\n+    of: 'из',\n+    next: 'следующий',\n+    last: 'последний',\n+    first: 'первый',\n+    previous: 'предыдущий',\n+    loadingOoo: 'Загрузка...',\n+    applyFilter: 'Применить фильтр...',\n+    equals: 'Равно',\n+    notEqual: 'Не равно',\n+    filterOoo: 'Фильтр...',\n+    contains: 'Содержит',\n+    notContains: 'Не содержит',\n+    startsWith: 'Начинается с',\n+    endsWith: 'Заканчивается на',\n+    andCondition: 'И',\n+    orCondition: 'Или'\n+};\n \n-        // Функция для преобразования данных без размеров\n-        function transformDataWithoutSizes(data) {\n-            let transformedData = [];\n-            data.forEach(item => {\n-                let totalStock = 0;\n-                let totalOrders1m = 0;\n-                let totalOrders14d = 0;\n \n-                console.log('item.graph ', item.graph);\n \n-                item.allowed_sizes.forEach(size => {\n-                    totalStock += item.stocks ? item.stocks[size] || 0 : 0;\n-                    totalOrders1m += item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n-                    totalOrders14d += item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0;\n-                });\n+const gridOptions = {\n+    enableCellTextSelection: true,\n+    columnDefs: columnDefs,\n+    defaultColDef: {\n+        sortable: true,\n+        filter: true,\n+        resizable: true\n+    },\n+    rowData: [],\n+    localeText: localeText,\n+    rowHeight: 120,\n+    getRowId: params => {\n+        const id = params.data.uniqueId;\n+        console.log('Row ID:', id, 'Data:', params);\n+        return id;\n+    }\n+};\n \n-                let stockDays = totalOrders1m !== 0 ? parseFloat((totalStock / totalOrders1m).toFixed(2)) : 0;\n-                let orders1m = parseFloat(totalOrders1m.toFixed(2))\n-                let orders14d = parseFloat(totalOrders14d.toFixed(2))\n-                let uniqueId = item.nmID;\n-                console.log('uniqueId во второй', uniqueId);\n-                transformedData.push({\n-                    uniqueId: uniqueId, // Добавляем уникальный идентификатор\n-                    photo: item.photos ? item.photos[0].c246x328 : '',\n-                    subjectName: item.subjectName,\n-                    nmID: item.nmID,\n-                    size: '-', // Прочерк для размера\n-                    orders1m: orders1m,\n-                    orders14d: orders14d,\n-                    salesGraph: item[\"30stat\"],\n-                    compareGraph: item.graph,\n-                    stock: totalStock,\n-                    stockDays: stockDays, //  добавить логику для расчета\n-                    replenish: '',\n-                    vendorCode: item.vendorCode\n-                });\n-            });\n-            return transformedData;\n-        }\n \n-        // Функция для загрузки данных и отображения таблицы\n-        function fetchData() {\n-            $.getJSON('data.json', function (response) {\n-                const originalData = response.data;\n-                const rowData = transformData(originalData);\n-                gridOptions.api.applyTransaction({\n-                    add: rowData\n-                });\n-            }).fail(function () {\n-                console.error('Ошибка при загрузке данных');\n+// Функция для преобразования данных\n+function transformData(data) {\n+    let transformedData = [];\n+    data.forEach(item => {\n+        item.allowed_sizes.forEach(size => {\n+            let stock = item.stocks ? item.stocks[size] || 0 : 0;\n+            let orders1m = item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n+            let stockDays = orders1m !== 0 ? parseFloat((stock / orders1m).toFixed(2)) : 0;\n+\n+            // Создаем уникальный идентификатор на основе генератора\n+            let uniqueId = `${item.nmID}-${size}`;\n+            console.log('uniqueId в начале' , uniqueId);\n+            // console.log('Transformed uniqueId:', uniqueId);\n+            // console.log('item.graph :', item.graph );\n+            transformedData.push({\n+                uniqueId: uniqueId, // Добавляем уникальный идентификатор\n+                photo: item.photos ? item.photos[0][\"c516x688\"] : '',\n+                subjectName: item.subjectName,\n+                nmID: item.nmID,\n+                size: size,\n+                orders1m: orders1m,\n+                orders14d: item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0,\n+                salesGraph: item[\"30stat\"], // Данные для графика,\n+                graph: item.graph ,// Данные для сравнения графиков продаж\n+                stock: stock,\n+                stockDays: stockDays,\n+                replenish: '',\n+                vendorCode: item.vendorCode\n             });\n-        }\n+        });\n+    });\n+    return transformedData;\n+}\n \n-        // График на 30 дней\n-        function createSalesGraph(statData) {\n-            const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n-            setTimeout(() => {\n-                const ctx = document.getElementById(canvasId).getContext('2d');\n-                new Chart(ctx, {\n-                    type: 'line',\n-                    data: {\n-                        labels: Object.keys(statData),\n-                        datasets: [{\n-                            label: 'Продажи',\n-                            data: Object.values(statData),\n-                            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n-                            borderColor: 'rgba(75, 192, 192, 1)',\n-                            borderWidth: 1,\n-                            pointRadius: 0,\n-                            borderWidth: 1, // Устанавливаем толщину линии\n-                            pointHoverRadius: 5, // Радиус точки при наведении\n-                        }]\n+// Функция для преобразования данных без размеров\n+function transformDataWithoutSizes(data) {\n+    let transformedData = [];\n+    data.forEach(item => {\n+        let totalStock = 0;\n+        let totalOrders1m = 0;\n+        let totalOrders14d = 0;\n+        \n+         console.log('item.graph ',item.graph);\n+\n+        item.allowed_sizes.forEach(size => {\n+            totalStock += item.stocks ? item.stocks[size] || 0 : 0;\n+            totalOrders1m += item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n+            totalOrders14d += item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0;\n+        });\n+\n+        let stockDays = totalOrders1m !== 0 ? parseFloat((totalStock / totalOrders1m).toFixed(2)) : 0;\n+let orders1m  = parseFloat(totalOrders1m.toFixed(2))\n+let orders14d  = parseFloat(totalOrders14d.toFixed(2))\n+        let uniqueId = item.nmID;\n+        console.log('uniqueId во второй' , uniqueId);\n+        transformedData.push({\n+            uniqueId: uniqueId, // Добавляем уникальный идентификатор\n+            photo: item.photos ? item.photos[0].c246x328 : '',\n+            subjectName: item.subjectName,\n+            nmID: item.nmID,\n+            size: '-', // Прочерк для размера\n+            orders1m: orders1m,\n+            orders14d: orders14d,\n+            salesGraph: item[\"30stat\"],\n+            compareGraph: item.graph, \n+            stock: totalStock,\n+            stockDays: stockDays, //  добавить логику для расчета\n+            replenish: '',\n+            vendorCode: item.vendorCode\n+        });\n+    });\n+    return transformedData;\n+}\n+\n+\n+\n+// График на 30 дней\n+function createSalesGraph(statData) {\n+    const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n+    setTimeout(() => {\n+        const ctx = document.getElementById(canvasId).getContext('2d');\n+        new Chart(ctx, {\n+            type: 'line',\n+            data: {\n+                labels: Object.keys(statData),\n+                datasets: [{\n+                    label: 'Продажи',\n+                    data: Object.values(statData),\n+                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n\\ No newline at end of file\n+                    borderColor: 'rgba(75, 192, 192, 1)',\n+                    borderWidth: 1,\n+                    pointRadius: 0,\n+                    borderWidth: 1, // Устанавливаем толщину линии\n+                    pointHoverRadius: 5, // Радиус точки при наведении\n+                }]\n+            },\n+            options: {\n+                responsive: true,\n+                maintainAspectRatio: false,\n+                scales: {\n+                    x: {\n+                        display: true, // Отображение оси X\n+                        ticks: {\n+                            display: false // Скрываем метки по оси X\n+                        }\n                     },\n-                    options: {\n-                        responsive: true,\n-                        maintainAspectRatio: false,\n-                        scales: {\n-                            x: {\n-                                display: true, // Отображение оси X\n-                                ticks: {\n-                                    display: false // Скрываем метки по оси X\n-                                }\n-                            },\n-                            y: {\n-                                display: true, // Отображение оси Y\n-                                ticks: {\n-                                    display: false // Скрываем метки по оси Y\n-                                }\n+                    y: {\n+                        display: true, // Отображение оси Y\n+                        ticks: {\n+                            display: false // Скрываем метки по оси Y\n+                        }\n+                    }\n+                },\n+                plugins: {\n+                    legend: {\n+                        display: false // Убираем легенду\n+                    },\n+                    tooltip: {\n+                        callbacks: {\n+                            label: function (context) {\n+                                return `Дата: ${context.label}, Количество: ${context.parsed.y}`;\n                             }\n-                        },\n-                        plugins: {\n-                            legend: {\n-                                display: false // Убираем легенду\n-                            },\n-                            tooltip: {\n-                                callbacks: {\n-                                    label: function (context) {\n-                                        return `Дата: ${context.label}, Количество: ${context.parsed.y}`;\n-                                    }\n-                                }\n-                            },\n-                            hover: {\n-                                mode: 'index',\n-                                intersect: false,\n-                            }\n-                        },\n-                        interaction: {\n-                            mode: 'index',\n-                            intersect: false,\n-                        },\n-                        elements: {\n-                            point: {\n-                                radius: 0, // Скрываем точки\n-                                hoverRadius: 5, // Радиус точки при наведении\n-                                hitRadius: 10, // Радиус области взаимодействия точки\n-                            }\n                         }\n+                    },\n+                    hover: {\n+                        mode: 'index',\n+                        intersect: false,\n                     }\n-                });\n-            }, 100);\n-            return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n-        }\n+                },\n+                interaction: {\n+                    mode: 'index',\n+                    intersect: false,\n+                },\n+                elements: {\n+                    point: {\n+                        radius: 0, // Скрываем точки\n+                        hoverRadius: 5, // Радиус точки при наведении\n+                        hitRadius: 10, // Радиус области взаимодействия точки\n+                    }\n+                }\n+            }\n+        });\n+    }, 100);\n+    return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n+}\n \n-        function createCompareGraph(graphData) {\n-            const canvasId = `compare-chart-${Math.random().toString(36).substr(2, 9)}`;\n-            const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]; // индексы этих дней: 0,1,2,3,4,5,6\n-            const currentDate = new Date();\n-            const currentDayIndex = currentDate.getDay(); // нашли индекс текущего дня\n+function createCompareGraph(graphData) {\n+    const canvasId = `compare-chart-${Math.random().toString(36).substr(2, 9)}`;\n+    const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]; // индексы этих дней: 0,1,2,3,4,5,6\n+    const currentDate = new Date();\n+    const currentDayIndex = currentDate.getDay(); // нашли индекс текущего дня\n \n-            // меняем массив дней недели так, чтобы справа был текущий день недели\n-            const labels = [...daysOfWeek.slice(currentDayIndex + 1), ...daysOfWeek.slice(0, currentDayIndex + 1)];\n+    // меняем массив дней недели так, чтобы справа был текущий день недели\n+    const labels = [...daysOfWeek.slice(currentDayIndex + 1), ...daysOfWeek.slice(0, currentDayIndex + 1)];\n \n-            const currentWeekData = new Array(7).fill(0); // Продажи текущей недели\n-            const previousWeekData = new Array(7).fill(0); // Продажи предыдущей \n+    const currentWeekData = new Array(7).fill(0); // Продажи текущей недели\n+    const previousWeekData = new Array(7).fill(0); // Продажи предыдущей \n \n-            // меняем строку даты в объект Date\n-            const parseDate = (dateString) => {\n-                const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n-                return new Date(\n-                `20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n-            };\n+    // меняем строку даты в объект Date\n+    const parseDate = (dateString) => {\n+        const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n+        return new Date(`20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n+    };\n \n-            // Функция для получения индекса дня недели\n-            const getWeekdayIndex = (date) => {\n-                return date.getDay();\n-            };\n+    // Функция для получения индекса дня недели\n+    const getWeekdayIndex = (date) => {\n+        return date.getDay();\n+    };\n \n-            // Заполняем данные продаж для текущей и предыдущей недели\n-            for (const [dateString, count] of Object.entries(graphData)) {\n-                const date = parseDate(dateString);\n-                const dayDiff = Math.floor((currentDate - date) / (1000 * 60 * 60 * 24));\n-                if (dayDiff >= 0 && dayDiff < 7) {\n-                    currentWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n-                } else if (dayDiff >= 7 && dayDiff < 14) {\n-                    previousWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n-                }\n-            }\n+    // Заполняем данные продаж для текущей и предыдущей недели\n+    for (const [dateString, count] of Object.entries(graphData)) {\n+        const date = parseDate(dateString);\n+        const dayDiff = Math.floor((currentDate - date) / (1000 * 60 * 60 * 24));\n+        if (dayDiff >= 0 && dayDiff < 7) {\n+            currentWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n+        } else if (dayDiff >= 7 && dayDiff < 14) {\n+            previousWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n+        }\n+    }\n \n-            setTimeout(() => {\n-                const ctx = document.getElementById(canvasId).getContext('2d');\n-                new Chart(ctx, {\n-                    type: 'bar',\n-                    data: {\n-                        labels: labels,\n-                        datasets: [{\n-                            label: 'Продажи предыдущей недели', // убрал это обозначение\n-                            data: previousWeekData,\n-                            backgroundColor: 'rgba(75, 192, 192, 0.6)',\n-                            borderColor: 'rgba(75, 192, 192, 1)',\n-                            borderWidth: 1\n-                        }, {\n-                            label: 'Продажи текущей недели', // убрал это обозначение\n-                            data: currentWeekData,\n-                            backgroundColor: 'rgba(153, 102, 255, 0.6)',\n-                            borderColor: 'rgba(153, 102, 255, 1)',\n-                            borderWidth: 1\n-                        }]\n+    setTimeout(() => {\n+        const ctx = document.getElementById(canvasId).getContext('2d');\n+        new Chart(ctx, {\n+            type: 'bar',\n+            data: {\n+                labels: labels,\n+                datasets: [{\n+                    label: 'Продажи предыдущей недели', // убрал это обозначение\n+                    data: previousWeekData,\n+                    backgroundColor: 'rgba(75, 192, 192, 0.6)',\n+                    borderColor: 'rgba(75, 192, 192, 1)',\n+                    borderWidth: 1\n+                }, {\n+                    label: 'Продажи текущей недели', // убрал это обозначение\n+                    data: currentWeekData,\n+                    backgroundColor: 'rgba(153, 102, 255, 0.6)',\n+                    borderColor: 'rgba(153, 102, 255, 1)',\n+                    borderWidth: 1\n+                }]\n+            },\n+            options: {\n+                scales: {\n+                    y: {\n+                        display: false // Скрыть ось Y\n                     },\n-                    options: {\n-                        scales: {\n-                            y: {\n-                                display: false // Скрыть ось Y\n-                            },\n-                            x: {\n-                                display: true,\n-                                ticks: {\n-                                    color: 'grey' // Цвет текста на оси X\n+                    x: {\n+                        display: true,\n+                        ticks: {\n+                            color: 'grey' // Цвет текста на оси X\n+                        }\n+                    }\n+                },\n+                plugins: {\n+                    legend: {\n+                        display: false // Скрыть легенду\n+                    },\n+                    tooltip: {\n+                        enabled: true,\n+                        callbacks: {\n+                            label: function (tooltipItem) {\n+                                let label = tooltipItem.dataset.label || '';\n+                                if (label) {\n+                                    label += ': ';\n                                 }\n+                                label += tooltipItem.raw.toFixed(2);\n+                                return label;\n                             }\n-                        },\n-                        plugins: {\n-                            legend: {\n-                                display: false // Скрыть легенду\n-                            },\n-                            tooltip: {\n-                                enabled: true,\n-                                callbacks: {\n-                                    label: function (tooltipItem) {\n-                                        let label = tooltipItem.dataset.label || '';\n-                                        if (label) {\n-                                            label += ': ';\n-                                        }\n-                                        label += tooltipItem.raw.toFixed(2);\n-                                        return label;\n-                                    }\n-                                }\n-                            }\n-                        },\n-                        maintainAspectRatio: false,\n-                        responsive: true\n+                        }\n                     }\n-                });\n-            }, 100);\n+                },\n+                maintainAspectRatio: false,\n+                responsive: true\n+            }\n+        });\n+    }, 100);\n \n-            return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n-        }\n+    return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n+}\n+     \n \n+// Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n+document.querySelector('.deleteModify').addEventListener('click', function () {\n+    if ($(this).text() === \"Показать товар без модификаций\") {   \n+        $(this).text(\"Показать модификации\");   \n+        $.getJSON('data.json', function (response) {\n+        const originalData = response.data;\n+        const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n \n-        // Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n-        document.querySelector('.deleteModify').addEventListener('click', function () {\n-            if ($(this).text() === \"Показать товар без модификаций\") {\n-                $(this).text(\"Показать модификации\");\n-                $.getJSON('data.json', function (response) {\n-                    const originalData = response.data;\n-                    const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n+        // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n+        const nodesToRemove = [];\n+        console.log('nodesToRemove: ',nodesToRemove);\n+        gridOptions.api.forEachNode(node => {\n+            nodesToRemove.push(node);\n+        });\n \n-                    // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n-                    const nodesToRemove = [];\n-                    console.log('nodesToRemove: ', nodesToRemove);\n-                    gridOptions.api.forEachNode(node => {\n-                        nodesToRemove.push(node);\n-                    });\n-\n-                    gridOptions.api.applyTransaction({\n-                        remove: nodesToRemove,\n-                        add: rowDataWithoutSizes\n-                    });\n-                }).fail(function () {\n-                    console.error('Ошибка при загрузке данных');\n-                });\n-\n-            } else if ($(this).text() === \"Показать модификации\") {\n-                $(this).text(\"Показать товар без модификации\");\n-                //  // Загружаем и отображаем модификации\n-                //  $.getJSON('data.json', function (response) {\n-                //     const originalData = response.data;\n-                //     const modifiedData = transformData(originalData);\n-\n-                //     gridOptions.api.applyTransaction({\n-                //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n-                //         add: modifiedData\n-                //     });\n-                // }).fail(function () {\n-                //     console.error('Ошибка при загрузке данных');\n-                // });\n-                location.reload()\n-            }\n-\n+        gridOptions.api.applyTransaction({\n+            remove: nodesToRemove,\n+            add: rowDataWithoutSizes\n         });\n+    }).fail(function () {\n+        console.error('Ошибка при загрузке данных');\n+    });\n+       \n+    } else if ($(this).text() === \"Показать модификации\") {\n+         $(this).text(\"Показать товар без модификации\");      \n+        //  // Загружаем и отображаем модификации\n+        //  $.getJSON('data.json', function (response) {\n+        //     const originalData = response.data;\n+        //     const modifiedData = transformData(originalData);\n \n+        //     gridOptions.api.applyTransaction({\n+        //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n+        //         add: modifiedData\n+        //     });\n+        // }).fail(function () {\n+        //     console.error('Ошибка при загрузке данных');\n+        // });\n+        location.reload()\n+    }\n+    \n+});\n \n \n-        // Добавление события для кнопки сброса всех фильтров\n-        document.querySelector('#resetFilters').addEventListener('click', function () {\n-            gridOptions.api.setFilterModel(null);\n-        });\n \n+// Добавление события для кнопки сброса всех фильтров\n+document.querySelector('#resetFilters').addEventListener('click', function() {\n+        gridOptions.api.setFilterModel(null);\n+    });\n+ \n+ \n+// Обработчик кнопки \"Рассчитать пополнение (шт)\"\n+document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n+    const daysInputElement = document.querySelector('#daysInput');\n+    const daysInput = daysInputElement.value;\n \n-        // Обработчик кнопки \"Рассчитать пополнение (шт)\"\n-        document.querySelector('.calculateReplenishment').addEventListener('click', function () {\n-            const daysInputElement = document.querySelector('#daysInput');\n-            const daysInput = daysInputElement.value;\n+    if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n+        alert('Введите число в диапазоне от 15 до 45');\n+    } \n \n-            if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n-                alert('Введите число в диапазоне от 15 до 45');\n-            }\n+    // Проверяем, что daysInput не пустой и является числом\n+    if (daysInput && !isNaN(daysInput)) {\n+        // Рассчитываем replenish для каждой строки\n+        gridOptions.api.forEachNode(rowNode => {\n+            const orders1m = rowNode.data.orders1m;\n+            const stockDays = rowNode.data.stockDays;\n \n-            // Проверяем, что daysInput не пустой и является числом\n-            if (daysInput && !isNaN(daysInput)) {\n-                // Рассчитываем replenish для каждой строки\n-                gridOptions.api.forEachNode(rowNode => {\n-                    const orders1m = rowNode.data.orders1m;\n-                    const stockDays = rowNode.data.stockDays;\n+            if (orders1m !== 0 && stockDays !== 0) {\n+                let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n \n-                    if (orders1m !== 0 && stockDays !== 0) {\n-                        let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n-\n-                        // Обновляем данные в текущей строке\n-                        rowNode.setDataValue('replenish', replenish);\n-                    }\n-                });\n-\n-                // Очищаем значение инпута после выполнения расчетов\n-                daysInputElement.value = '';\n-            } else {\n-                console.error('Введите корректное значение для количества дней');\n+                // Обновляем данные в текущей строке\n+                rowNode.setDataValue('replenish', replenish);\n             }\n         });\n \n+        // Очищаем значение инпута после выполнения расчетов\n+        daysInputElement.value = '';\n+    } else {\n+        console.error('Введите корректное значение для количества дней');\n+    }\n+});\n \n-        document.addEventListener('DOMContentLoaded', function () {\n-            const gridDiv = document.querySelector('#myGrid');\n-            new agGrid.Grid(gridDiv, gridOptions);\n+    \n+document.addEventListener('DOMContentLoaded', function () {\n+    const gridDiv = document.querySelector('#myGrid');\n+    new agGrid.Grid(gridDiv, gridOptions);\n \n-            fetchData();\n+    fetchData();\n \n+    \n+    \n+});\n \n \n-        });\n     </script>\n </body>\n-\n-</html>\n+</html>\n"
                },
                {
                    "date": 1720112193643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,8 +243,18 @@\n         return id;\n     }\n };\n \n+// Функция для загрузки данных и отображения таблицы\n+function fetchData() {\n+    $.getJSON('data.json', function (response) {\n+        const originalData = response.data;\n+        const rowData = transformData(originalData);\n+        gridOptions.api.applyTransaction({ add: rowData });\n+    }).fail(function () {\n+        console.error('Ошибка при загрузке данных');\n+    });\n+}\n \n // Функция для преобразования данных\n function transformData(data) {\n     let transformedData = [];\n@@ -579,5 +589,5 @@\n \n \n     </script>\n </body>\n-</html>\n\\ No newline at end of file\n+</html>\n"
                },
                {
                    "date": 1720112296387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,8 +254,25 @@\n         console.error('Ошибка при загрузке данных');\n     });\n }\n \n+function fetchData() {\n+    $.ajax({\n+        url: '/api/get_stat_table',\n+        method: 'GET',\n+        dataType: 'json',\n+        success: function (response) {\n+            const originalData = response.data;\n+            const rowData = transformData(originalData);\n+            gridOptions.api.applyTransaction({ add: rowData });\n+        },\n+        error: function () {\n+            console.error('Ошибка при загрузке данных');\n+        }\n+    });\n+}\n+\n+\n // Функция для преобразования данных\n function transformData(data) {\n     let transformedData = [];\n     data.forEach(item => {\n"
                },
                {
                    "date": 1720112487296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,23 +254,23 @@\n         console.error('Ошибка при загрузке данных');\n     });\n }\n \n-function fetchData() {\n-    $.ajax({\n-        url: '/api/get_stat_table',\n-        method: 'GET',\n-        dataType: 'json',\n-        success: function (response) {\n-            const originalData = response.data;\n-            const rowData = transformData(originalData);\n-            gridOptions.api.applyTransaction({ add: rowData });\n-        },\n-        error: function () {\n-            console.error('Ошибка при загрузке данных');\n-        }\n-    });\n-}\n+// function fetchData() {\n+//     $.ajax({\n+//         url: '/api/get_stat_table',\n+//         method: 'GET',\n+//         dataType: 'json',\n+//         success: function (response) {\n+//             const originalData = response.data;\n+//             const rowData = transformData(originalData);\n+//             gridOptions.api.applyTransaction({ add: rowData });\n+//         },\n+//         error: function () {\n+//             console.error('Ошибка при загрузке данных');\n+//         }\n+//     });\n+// }\n \n \n // Функция для преобразования данных\n function transformData(data) {\n@@ -513,45 +513,32 @@\n      \n \n // Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n document.querySelector('.deleteModify').addEventListener('click', function () {\n-    if ($(this).text() === \"Показать товар без модификаций\") {   \n-        $(this).text(\"Показать модификации\");   \n+    if ($(this).text() === \"Показать товар без модификаций\") {\n+        $(this).text(\"Показать модификации\");\n         $.getJSON('data.json', function (response) {\n-        const originalData = response.data;\n-        const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n+            const originalData = response.data;\n+            const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n \n-        // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n-        const nodesToRemove = [];\n-        console.log('nodesToRemove: ',nodesToRemove);\n-        gridOptions.api.forEachNode(node => {\n-            nodesToRemove.push(node);\n+            // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n+            const nodesToRemove = gridOptions.api.getAllNodes(); // Получаем все узлы для удаления\n+            console.log('nodesToRemove: ', nodesToRemove);\n+\n+            gridOptions.api.applyTransaction({\n+                remove: nodesToRemove.map(node => node.data),\n+                add: rowDataWithoutSizes\n+            });\n+        }).fail(function () {\n+            console.error('Ошибка при загрузке данных');\n         });\n \n-        gridOptions.api.applyTransaction({\n-            remove: nodesToRemove,\n-            add: rowDataWithoutSizes\n-        });\n-    }).fail(function () {\n-        console.error('Ошибка при загрузке данных');\n-    });\n-       \n     } else if ($(this).text() === \"Показать модификации\") {\n-         $(this).text(\"Показать товар без модификации\");      \n-        //  // Загружаем и отображаем модификации\n-        //  $.getJSON('data.json', function (response) {\n-        //     const originalData = response.data;\n-        //     const modifiedData = transformData(originalData);\n-\n-        //     gridOptions.api.applyTransaction({\n-        //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n-        //         add: modifiedData\n-        //     });\n-        // }).fail(function () {\n-        //     console.error('Ошибка при загрузке данных');\n-        // });\n-        location.reload()\n+        $(this).text(\"Показать товар без модификации\");\n+        // Загружаем и отображаем модификации\n+        location.reload(); // Обновляем страницу для возврата к исходным данным\n     }\n+});\n     \n });\n \n \n"
                },
                {
                    "date": 1720112563749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -513,32 +513,45 @@\n      \n \n // Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n document.querySelector('.deleteModify').addEventListener('click', function () {\n-    if ($(this).text() === \"Показать товар без модификаций\") {\n-        $(this).text(\"Показать модификации\");\n+    if ($(this).text() === \"Показать товар без модификаций\") {   \n+        $(this).text(\"Показать модификации\");   \n         $.getJSON('data.json', function (response) {\n-            const originalData = response.data;\n-            const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n+        const originalData = response.data;\n+        const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n \n-            // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n-            const nodesToRemove = gridOptions.api.getAllNodes(); // Получаем все узлы для удаления\n-            console.log('nodesToRemove: ', nodesToRemove);\n+        // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n+        const nodesToRemove = [];\n+        console.log('nodesToRemove: ',nodesToRemove);\n+        gridOptions.api.forEachNode(node => {\n+            nodesToRemove.push(node);\n+        });\n \n-            gridOptions.api.applyTransaction({\n-                remove: nodesToRemove.map(node => node.data),\n-                add: rowDataWithoutSizes\n-            });\n-        }).fail(function () {\n-            console.error('Ошибка при загрузке данных');\n+        gridOptions.api.applyTransaction({\n+            remove: nodesToRemove,\n+            add: rowDataWithoutSizes\n         });\n+    }).fail(function () {\n+        console.error('Ошибка при загрузке данных');\n+    });\n+       \n+    } else if ($(this).text() === \"Показать модификации\") {\n+         $(this).text(\"Показать товар без модификации\");      \n+        //  // Загружаем и отображаем модификации\n+        //  $.getJSON('data.json', function (response) {\n+        //     const originalData = response.data;\n+        //     const modifiedData = transformData(originalData);\n \n-    } else if ($(this).text() === \"Показать модификации\") {\n-        $(this).text(\"Показать товар без модификации\");\n-        // Загружаем и отображаем модификации\n-        location.reload(); // Обновляем страницу для возврата к исходным данным\n+        //     gridOptions.api.applyTransaction({\n+        //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n+        //         add: modifiedData\n+        //     });\n+        // }).fail(function () {\n+        //     console.error('Ошибка при загрузке данных');\n+        // });\n+        location.reload()\n     }\n-});\n     \n });\n \n \n"
                },
                {
                    "date": 1720112739871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -513,46 +513,33 @@\n      \n \n // Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n document.querySelector('.deleteModify').addEventListener('click', function () {\n-    if ($(this).text() === \"Показать товар без модификаций\") {   \n-        $(this).text(\"Показать модификации\");   \n+    if ($(this).text() === \"Показать товар без модификаций\") {\n+        $(this).text(\"Показать модификации\");\n         $.getJSON('data.json', function (response) {\n-        const originalData = response.data;\n-        const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n+            const originalData = response.data;\n+            const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n \n-        // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n-        const nodesToRemove = [];\n-        console.log('nodesToRemove: ',nodesToRemove);\n-        gridOptions.api.forEachNode(node => {\n-            nodesToRemove.push(node);\n+            // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n+            const nodesToRemove = [];\n+            gridOptions.api.forEachNode(node => {\n+                nodesToRemove.push(node.data);\n+            });\n+\n+            gridOptions.api.applyTransaction({\n+                remove: nodesToRemove,\n+                add: rowDataWithoutSizes\n+            });\n+        }).fail(function () {\n+            console.error('Ошибка при загрузке данных');\n         });\n \n-        gridOptions.api.applyTransaction({\n-            remove: nodesToRemove,\n-            add: rowDataWithoutSizes\n-        });\n-    }).fail(function () {\n-        console.error('Ошибка при загрузке данных');\n-    });\n-       \n     } else if ($(this).text() === \"Показать модификации\") {\n-         $(this).text(\"Показать товар без модификации\");      \n-        //  // Загружаем и отображаем модификации\n-        //  $.getJSON('data.json', function (response) {\n-        //     const originalData = response.data;\n-        //     const modifiedData = transformData(originalData);\n-\n-        //     gridOptions.api.applyTransaction({\n-        //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n-        //         add: modifiedData\n-        //     });\n-        // }).fail(function () {\n-        //     console.error('Ошибка при загрузке данных');\n-        // });\n-        location.reload()\n+        $(this).text(\"Показать товар без модификации\");\n+        // Загружаем и отображаем модификации\n+        location.reload(); // Обновляем страницу для возврата к исходным данным\n     }\n-    \n });\n \n \n \n"
                },
                {
                    "date": 1720112908566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -346,9 +346,8 @@\n     return transformedData;\n }\n \n \n-\n // График на 30 дней\n function createSalesGraph(statData) {\n     const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n     setTimeout(() => {\n"
                },
                {
                    "date": 1720112963134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -512,33 +512,46 @@\n      \n \n // Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\n document.querySelector('.deleteModify').addEventListener('click', function () {\n-    if ($(this).text() === \"Показать товар без модификаций\") {\n-        $(this).text(\"Показать модификации\");\n+    if ($(this).text() === \"Показать товар без модификаций\") {   \n+        $(this).text(\"Показать модификации\");   \n         $.getJSON('data.json', function (response) {\n-            const originalData = response.data;\n-            const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n+        const originalData = response.data;\n+        const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n \n-            // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n-            const nodesToRemove = [];\n-            gridOptions.api.forEachNode(node => {\n-                nodesToRemove.push(node.data);\n-            });\n+        // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n+        const nodesToRemove = [];\n+        console.log('nodesToRemove: ',nodesToRemove);\n+        gridOptions.api.forEachNode(node => {\n+            nodesToRemove.push(node);\n+        });\n \n-            gridOptions.api.applyTransaction({\n-                remove: nodesToRemove,\n-                add: rowDataWithoutSizes\n-            });\n-        }).fail(function () {\n-            console.error('Ошибка при загрузке данных');\n+        gridOptions.api.applyTransaction({\n+            remove: nodesToRemove,\n+            add: rowDataWithoutSizes\n         });\n+    }).fail(function () {\n+        console.error('Ошибка при загрузке данных');\n+    });\n+       \n+    } else if ($(this).text() === \"Показать модификации\") {\n+         $(this).text(\"Показать товар без модификации\");      \n+        //  // Загружаем и отображаем модификации\n+        //  $.getJSON('data.json', function (response) {\n+        //     const originalData = response.data;\n+        //     const modifiedData = transformData(originalData);\n \n-    } else if ($(this).text() === \"Показать модификации\") {\n-        $(this).text(\"Показать товар без модификации\");\n-        // Загружаем и отображаем модификации\n-        location.reload(); // Обновляем страницу для возврата к исходным данным\n+        //     gridOptions.api.applyTransaction({\n+        //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n+        //         add: modifiedData\n+        //     });\n+        // }).fail(function () {\n+        //     console.error('Ошибка при загрузке данных');\n+        // });\n+        location.reload()\n     }\n+    \n });\n \n \n \n"
                }
            ],
            "date": 1720111523148,
            "name": "Commit-0",
            "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@ag-grid-community/styles/ag-grid.css\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@ag-grid-community/styles/ag-theme-alpine.css\">\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css\" rel=\"stylesheet\">\n    <script src=\"https://cdn.jsdelivr.net/npm/jquery@3.6.0/jquery.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@ag-grid-community/core/dist/ag-grid-community.noStyle.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js\"></script>\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n    <style>\n        img{\n            height: 120px;\n            padding: 2%;\n        }\n        .red-text {\n    background-color: red;\n    color: white; /* белый текст на красном фоне */\n    padding: 2px 5px; /* отступы вокруг текста */\n    border-radius: 3px; /* скругление углов */\n}\n\n.orange-text {\n    background-color: orange;\n    color: black; /* черный текст на оранжевом фоне */\n    padding: 2px 5px;\n    border-radius: 3px;\n}\n\n.yellow-text {\n    background-color: yellow;\n    color: black;\n    padding: 2px 5px;\n    border-radius: 3px;\n}\n\n.green-text {\n    background-color: green;\n    color: white;\n    padding: 2px 5px;\n    border-radius: 3px;\n}\n.table-wrapper {\n            display: flex;\n            flex-direction: column;\n            height: 100vh;\n            padding: 20px;\n            width: 100vw;\n            align-items: center;\n        }\n        .headerContainer {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 15px;\n            width: 80vw;\n        }\n        .input-group,.btn-wrapper{\n            height: 50px;\n        }\n        input, button{\n            height: 100% !important;\n            font-size: small !important;\n        }\n        .input-group{\n            width: 40vw !important;\n        }\n        .table-inner {\n          \n            width: 100%;\n        }\n        #myGrid {\n            /* height: calc(100% - 50px); */\n            width: 100%;\n        }\n        #loading {\n            text-align: center;\n            padding: 20px;\n            font-size: 1.5rem;\n        }\n        #resetFilters {\n            margin-bottom: 10px;\n        }\n\n\n    </style>\n</head>\n<body>\n    <div class=\"table-wrapper\">\n        <div class=\"headerContainer\">\n            <div class=\"input-group\">\n                <input type=\"number\" id=\"daysInput\" class=\"form-control\" placeholder=\"Введите количество дней\"\n                    aria-label=\"Введите количество дней от 15 до 45\" aria-describedby=\"basic-addon2\" min=\"15\" max=\"45\">\n                <div class=\"input-group-append\">\n                    <button class=\"btn btn-outline-secondary calculateReplenishment\" type=\"button\">Рассчитать пополнение (шт)</button>\n                </div>\n            </div>\n            <div class=\"btn-wrapper\"> <button id=\"resetFilters\" class=\"btn btn-outline-secondary \">Сбросить все фильтры</button> </div>\n            <div class=\"btn-wrapper\"> <button class=\"btn btn-outline-secondary deleteModify\" type=\"button\">Показать товар без модификаций</button></div>\n            \n           \n        </div>\n        \n        <div class=\"table-inner container mt-4\">\n            <div id=\"myGrid\" class=\"ag-theme-alpine\" style=\"height: 600px\"></div>\n            <div id=\"loading\" style=\"display: none;\">Загрузка...</div>\n        </div>\n    </div>\n\n    <script>\n     // Определение столбцов и параметров сетки\nconst columnDefs = [\n    { headerName: '№', valueGetter: 'node.rowIndex + 1', width: 60, sortable: false, filter: false },\n    { headerName: 'Фото', field: 'photo', width: 100, cellRenderer: params => `<img src=\"${params.value}\">` },\n    { headerName: 'Предмет', field: 'subjectName', width: 120 },\n    { headerName: 'Номенклатура', field: 'nmID', width: 160 },\n    { headerName: 'Размер', field: 'size', width: 120 },\n    { headerName: 'Заказы 1м', field: 'orders1m', width: 150 },\n    { headerName: 'Заказы 14 д', field: 'orders14d', width: 150 },\n    // { headerName: 'График продаж за месяц', field: 'salesGraph', width: 250, cellRenderer: params => createSalesGraph(params.data.salesGraph) },\n    // { headerName: 'Сравнение продаж (нед)', field: 'compareGraph', width: 250, cellRenderer: params => createCompareGraph(params.data.graph) },\n    {\n        headerName: 'Графики',\n        field: 'graph',\n        width: 300,\n        cellRenderer: params => createToggleableGraph(params)\n    },\n    {\n        headerName: 'Остаток (шт)',\n        field: 'stock',\n        width: 120,\n        cellRenderer: function(params) {\n            const value = params.value;\n            let className = '';\n            if (value >= 0 && value <= 1.99) {\n                className = 'red-text';\n            } else if (value >= 2 && value <= 5.99) {\n                className = 'orange-text';\n            } else if (value >= 6 && value <= 10.99) {\n                className = 'yellow-text';\n            } else if (value >= 11) {\n                className = 'green-text';\n            }\n\n            return `<span class=\"${className}\">${value}</span>`;\n        }\n    },\n    {\n        headerName: 'Остаток (дн)',\n        field: 'stockDays',\n        width: 120,\n        cellRenderer: function(params) {\n            const value = params.value;\n            let className = '';\n            if (value >= 0 && value <= 1.99) {\n                className = 'red-text';\n            } else if (value >= 2 && value <= 5.99) {\n                className = 'orange-text';\n            } else if (value >= 6 && value <= 10.99) {\n                className = 'yellow-text';\n            } else if (value >= 11) {\n                className = 'green-text';\n            }\n\n            return `<span class=\"${className}\">${value}</span>`;\n        }\n    },\n    { headerName: 'Пополнить (шт)', field: 'replenish',width: 120 },\n    { headerName: 'Артикул', field: 'vendorCode', width: 150, }\n];\n//переключаем графики\nfunction createToggleableGraph(params) {\n    const container = document.createElement('div');\n    let currentGraph = 'compareGraph'; \n\n    function toggleGraph() {\n        currentGraph = currentGraph === 'compareGraph' ? 'salesGraph' : 'compareGraph';\n        const graphData = currentGraph === 'compareGraph' ? params.data.graph : params.data.salesGraph;\n        container.innerHTML = createGraphComponent(graphData);\n    }\n\n    function createGraphComponent(graphData) {\n        if (currentGraph === 'compareGraph') {\n            return createCompareGraph(graphData);\n        } else {\n            return createSalesGraph(graphData);\n        }\n    }\n\n    container.innerHTML = createGraphComponent(params.data.graph);\n    container.addEventListener('click', toggleGraph);\n\n    return container;\n}\n\n\n \n\nconst localeText = {\n    // Русификация фильтров\n    page: 'страница',\n    more: 'ещё',\n    to: 'к',\n    of: 'из',\n    next: 'следующий',\n    last: 'последний',\n    first: 'первый',\n    previous: 'предыдущий',\n    loadingOoo: 'Загрузка...',\n    applyFilter: 'Применить фильтр...',\n    equals: 'Равно',\n    notEqual: 'Не равно',\n    filterOoo: 'Фильтр...',\n    contains: 'Содержит',\n    notContains: 'Не содержит',\n    startsWith: 'Начинается с',\n    endsWith: 'Заканчивается на',\n    andCondition: 'И',\n    orCondition: 'Или'\n};\n\n\n\nconst gridOptions = {\n    enableCellTextSelection: true,\n    columnDefs: columnDefs,\n    defaultColDef: {\n        sortable: true,\n        filter: true,\n        resizable: true\n    },\n    rowData: [],\n    localeText: localeText,\n    rowHeight: 120,\n    getRowId: params => {\n        const id = params.data.uniqueId;\n        console.log('Row ID:', id, 'Data:', params);\n        return id;\n    }\n};\n\n\n// Функция для преобразования данных\nfunction transformData(data) {\n    let transformedData = [];\n    data.forEach(item => {\n        item.allowed_sizes.forEach(size => {\n            let stock = item.stocks ? item.stocks[size] || 0 : 0;\n            let orders1m = item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n            let stockDays = orders1m !== 0 ? parseFloat((stock / orders1m).toFixed(2)) : 0;\n\n            // Создаем уникальный идентификатор на основе генератора\n            let uniqueId = `${item.nmID}-${size}`;\n            console.log('uniqueId в начале' , uniqueId);\n            // console.log('Transformed uniqueId:', uniqueId);\n            // console.log('item.graph :', item.graph );\n            transformedData.push({\n                uniqueId: uniqueId, // Добавляем уникальный идентификатор\n                photo: item.photos ? item.photos[0][\"c516x688\"] : '',\n                subjectName: item.subjectName,\n                nmID: item.nmID,\n                size: size,\n                orders1m: orders1m,\n                orders14d: item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0,\n                salesGraph: item[\"30stat\"], // Данные для графика,\n                graph: item.graph ,// Данные для сравнения графиков продаж\n                stock: stock,\n                stockDays: stockDays,\n                replenish: '',\n                vendorCode: item.vendorCode\n            });\n        });\n    });\n    return transformedData;\n}\n\n// Функция для преобразования данных без размеров\nfunction transformDataWithoutSizes(data) {\n    let transformedData = [];\n    data.forEach(item => {\n        let totalStock = 0;\n        let totalOrders1m = 0;\n        let totalOrders14d = 0;\n        \n         console.log('item.graph ',item.graph);\n\n        item.allowed_sizes.forEach(size => {\n            totalStock += item.stocks ? item.stocks[size] || 0 : 0;\n            totalOrders1m += item[\"30midle_sales\"] ? item[\"30midle_sales\"][size] || 0 : 0;\n            totalOrders14d += item[\"14midle_sales\"] ? item[\"14midle_sales\"][size] || 0 : 0;\n        });\n\n        let stockDays = totalOrders1m !== 0 ? parseFloat((totalStock / totalOrders1m).toFixed(2)) : 0;\nlet orders1m  = parseFloat(totalOrders1m.toFixed(2))\nlet orders14d  = parseFloat(totalOrders14d.toFixed(2))\n        let uniqueId = item.nmID;\n        console.log('uniqueId во второй' , uniqueId);\n        transformedData.push({\n            uniqueId: uniqueId, // Добавляем уникальный идентификатор\n            photo: item.photos ? item.photos[0].c246x328 : '',\n            subjectName: item.subjectName,\n            nmID: item.nmID,\n            size: '-', // Прочерк для размера\n            orders1m: orders1m,\n            orders14d: orders14d,\n            salesGraph: item[\"30stat\"],\n            compareGraph: item.graph, \n            stock: totalStock,\n            stockDays: stockDays, //  добавить логику для расчета\n            replenish: '',\n            vendorCode: item.vendorCode\n        });\n    });\n    return transformedData;\n}\n\n// Функция для загрузки данных и отображения таблицы\nfunction fetchData() {\n    $.getJSON('data.json', function (response) {\n        const originalData = response.data;\n        const rowData = transformData(originalData);\n        gridOptions.api.applyTransaction({ add: rowData });\n    }).fail(function () {\n        console.error('Ошибка при загрузке данных');\n    });\n}\n\n// График на 30 дней\nfunction createSalesGraph(statData) {\n    const canvasId = `chart-${Math.random().toString(36).substr(2, 9)}`;\n    setTimeout(() => {\n        const ctx = document.getElementById(canvasId).getContext('2d');\n        new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: Object.keys(statData),\n                datasets: [{\n                    label: 'Продажи',\n                    data: Object.values(statData),\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1,\n                    pointRadius: 0,\n                    borderWidth: 1, // Устанавливаем толщину линии\n                    pointHoverRadius: 5, // Радиус точки при наведении\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    x: {\n                        display: true, // Отображение оси X\n                        ticks: {\n                            display: false // Скрываем метки по оси X\n                        }\n                    },\n                    y: {\n                        display: true, // Отображение оси Y\n                        ticks: {\n                            display: false // Скрываем метки по оси Y\n                        }\n                    }\n                },\n                plugins: {\n                    legend: {\n                        display: false // Убираем легенду\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function (context) {\n                                return `Дата: ${context.label}, Количество: ${context.parsed.y}`;\n                            }\n                        }\n                    },\n                    hover: {\n                        mode: 'index',\n                        intersect: false,\n                    }\n                },\n                interaction: {\n                    mode: 'index',\n                    intersect: false,\n                },\n                elements: {\n                    point: {\n                        radius: 0, // Скрываем точки\n                        hoverRadius: 5, // Радиус точки при наведении\n                        hitRadius: 10, // Радиус области взаимодействия точки\n                    }\n                }\n            }\n        });\n    }, 100);\n    return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n}\n\nfunction createCompareGraph(graphData) {\n    const canvasId = `compare-chart-${Math.random().toString(36).substr(2, 9)}`;\n    const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]; // индексы этих дней: 0,1,2,3,4,5,6\n    const currentDate = new Date();\n    const currentDayIndex = currentDate.getDay(); // нашли индекс текущего дня\n\n    // меняем массив дней недели так, чтобы справа был текущий день недели\n    const labels = [...daysOfWeek.slice(currentDayIndex + 1), ...daysOfWeek.slice(0, currentDayIndex + 1)];\n\n    const currentWeekData = new Array(7).fill(0); // Продажи текущей недели\n    const previousWeekData = new Array(7).fill(0); // Продажи предыдущей \n\n    // меняем строку даты в объект Date\n    const parseDate = (dateString) => {\n        const [day, month, year] = dateString.split('.').map(num => parseInt(num, 10));\n        return new Date(`20${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n    };\n\n    // Функция для получения индекса дня недели\n    const getWeekdayIndex = (date) => {\n        return date.getDay();\n    };\n\n    // Заполняем данные продаж для текущей и предыдущей недели\n    for (const [dateString, count] of Object.entries(graphData)) {\n        const date = parseDate(dateString);\n        const dayDiff = Math.floor((currentDate - date) / (1000 * 60 * 60 * 24));\n        if (dayDiff >= 0 && dayDiff < 7) {\n            currentWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n        } else if (dayDiff >= 7 && dayDiff < 14) {\n            previousWeekData[(7 + getWeekdayIndex(date) - currentDayIndex - 1) % 7] = count;\n        }\n    }\n\n    setTimeout(() => {\n        const ctx = document.getElementById(canvasId).getContext('2d');\n        new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Продажи предыдущей недели', // убрал это обозначение\n                    data: previousWeekData,\n                    backgroundColor: 'rgba(75, 192, 192, 0.6)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1\n                }, {\n                    label: 'Продажи текущей недели', // убрал это обозначение\n                    data: currentWeekData,\n                    backgroundColor: 'rgba(153, 102, 255, 0.6)',\n                    borderColor: 'rgba(153, 102, 255, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        display: false // Скрыть ось Y\n                    },\n                    x: {\n                        display: true,\n                        ticks: {\n                            color: 'grey' // Цвет текста на оси X\n                        }\n                    }\n                },\n                plugins: {\n                    legend: {\n                        display: false // Скрыть легенду\n                    },\n                    tooltip: {\n                        enabled: true,\n                        callbacks: {\n                            label: function (tooltipItem) {\n                                let label = tooltipItem.dataset.label || '';\n                                if (label) {\n                                    label += ': ';\n                                }\n                                label += tooltipItem.raw.toFixed(2);\n                                return label;\n                            }\n                        }\n                    }\n                },\n                maintainAspectRatio: false,\n                responsive: true\n            }\n        });\n    }, 100);\n\n    return `<canvas id=\"${canvasId}\" style=\"width: 100%; height: 100px;\"></canvas>`;\n}\n     \n\n// Обработчик кнопки \"Показать товар без модификаций\" НЕ РАБОТАЕТ ХЗ ПОЧЕМУ\ndocument.querySelector('.deleteModify').addEventListener('click', function () {\n    if ($(this).text() === \"Показать товар без модификаций\") {   \n        $(this).text(\"Показать модификации\");   \n        $.getJSON('data.json', function (response) {\n        const originalData = response.data;\n        const rowDataWithoutSizes = transformDataWithoutSizes(originalData);\n\n        // Применяем транзакцию для удаления текущих данных и добавления новых данных без размеров\n        const nodesToRemove = [];\n        console.log('nodesToRemove: ',nodesToRemove);\n        gridOptions.api.forEachNode(node => {\n            nodesToRemove.push(node);\n        });\n\n        gridOptions.api.applyTransaction({\n            remove: nodesToRemove,\n            add: rowDataWithoutSizes\n        });\n    }).fail(function () {\n        console.error('Ошибка при загрузке данных');\n    });\n       \n    } else if ($(this).text() === \"Показать модификации\") {\n         $(this).text(\"Показать товар без модификации\");      \n        //  // Загружаем и отображаем модификации\n        //  $.getJSON('data.json', function (response) {\n        //     const originalData = response.data;\n        //     const modifiedData = transformData(originalData);\n\n        //     gridOptions.api.applyTransaction({\n        //         remove: [], // При смене данных не удаляем текущие, только добавляем новые\n        //         add: modifiedData\n        //     });\n        // }).fail(function () {\n        //     console.error('Ошибка при загрузке данных');\n        // });\n        location.reload()\n    }\n    \n});\n\n\n\n// Добавление события для кнопки сброса всех фильтров\ndocument.querySelector('#resetFilters').addEventListener('click', function() {\n        gridOptions.api.setFilterModel(null);\n    });\n \n \n// Обработчик кнопки \"Рассчитать пополнение (шт)\"\ndocument.querySelector('.calculateReplenishment').addEventListener('click', function () {\n    const daysInputElement = document.querySelector('#daysInput');\n    const daysInput = daysInputElement.value;\n\n    if (isNaN(daysInput) || daysInput < 15 || daysInput > 45) {\n        alert('Введите число в диапазоне от 15 до 45');\n    } \n\n    // Проверяем, что daysInput не пустой и является числом\n    if (daysInput && !isNaN(daysInput)) {\n        // Рассчитываем replenish для каждой строки\n        gridOptions.api.forEachNode(rowNode => {\n            const orders1m = rowNode.data.orders1m;\n            const stockDays = rowNode.data.stockDays;\n\n            if (orders1m !== 0 && stockDays !== 0) {\n                let replenish = ((orders1m * daysInput) - stockDays).toFixed(2);\n\n                // Обновляем данные в текущей строке\n                rowNode.setDataValue('replenish', replenish);\n            }\n        });\n\n        // Очищаем значение инпута после выполнения расчетов\n        daysInputElement.value = '';\n    } else {\n        console.error('Введите корректное значение для количества дней');\n    }\n});\n\n    });\n    \ndocument.addEventListener('DOMContentLoaded', function () {\n    const gridDiv = document.querySelector('#myGrid');\n    new agGrid.Grid(gridDiv, gridOptions);\n\n    fetchData();\n\n    \n    \n});\n\n\n    </script>\n</body>\n</html>\n"
        }
    ]
}